{
  "api/Switchboard.ApplicationEnd.html": {
    "href": "api/Switchboard.ApplicationEnd.html",
    "title": "Class ApplicationEnd | Switchboard 1.0.0",
    "keywords": "Class ApplicationEnd Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. public static class ApplicationEnd Inheritance object ApplicationEnd Methods Add(Action) Adds an observer Action to an event that is invoked near the very end of the application. public static void Add(Action handler) Parameters handler Action The Action to add to the event. Remove(Action) Removes an observer Action from the application end event. public static void Remove(Action handler) Parameters handler Action The Action to remove from the event."
  },
  "api/Switchboard.ApplicationPlatform.html": {
    "href": "api/Switchboard.ApplicationPlatform.html",
    "title": "Class ApplicationPlatform | Switchboard 1.0.0",
    "keywords": "Class ApplicationPlatform Namespace Switchboard Assembly Switchboard.PlatformFlags.dll Provides helper methods for getting a PlatformFlags value for the current platform. public static class ApplicationPlatform Inheritance object ApplicationPlatform Properties Flag Gets the PlatformFlags value for the current platform. public static PlatformFlags Flag { get; } Methods GetFlag(RuntimePlatform) Converts the value of a UnityEngine.RuntimePlatform argument into a corresponding PlatformFlags value. public static PlatformFlags GetFlag(this RuntimePlatform runtimePlatform) Parameters runtimePlatform RuntimePlatform The platform to convert into a flag. Returns PlatformFlags Returns a PlatformFlags value that corresponds to the runtimePlatform."
  },
  "api/Switchboard.ApplicationTicker.html": {
    "href": "api/Switchboard.ApplicationTicker.html",
    "title": "Class ApplicationTicker | Switchboard 1.0.0",
    "keywords": "Class ApplicationTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Provides a static root for lazy loaded object tickers that correspond to Update(), LateUpdate(), and FixedUpdate(). public static class ApplicationTicker Inheritance object ApplicationTicker Properties FixedTicker Gets a static FixedTicker instance, which is lazy loaded if necessary. public static FixedTicker FixedTicker { get; } LateTicker Gets a static LateTicker instance, which is lazy loaded if necessary. public static LateTicker LateTicker { get; } Ticker Gets a static Ticker instance, which is lazy loaded if necessary. public static Ticker Ticker { get; } Methods StartFixedTick(InputAction<FrameOfTime>) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public static void StartFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartFixedTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public static void StartFixedTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartLateTick(InputAction<FrameOfTime>) Adds an observer event handler to the LateTick event, invoked once per late update. public static void StartLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartLateTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the LateTick event, invoked once per late update. public static void StartLateTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartTick(InputAction<FrameOfTime>) Adds an observer event handler to the Tick event, invoked once per update. public static void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the Tick event, invoked once per update. public static void StartTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StopFixedTick(InputAction<FrameOfTime>) Removes an observer event handler from the FixedTick event. public static void StopFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopLateTick(InputAction<FrameOfTime>) Removes an observer event handler from the LateTick event. public static void StopLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the Tick event. public static void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.ClockSynchronizer.html": {
    "href": "api/Switchboard.ClockSynchronizer.html",
    "title": "Class ClockSynchronizer | Switchboard 1.0.0",
    "keywords": "Class ClockSynchronizer Namespace Switchboard Assembly Switchboard.LogFileManager.dll Synchronizes the PreciseClock with the system clock at a certain frequency. public static class ClockSynchronizer Inheritance object ClockSynchronizer Fields DefaultFrequency The default number of seconds between synchronization. public const float DefaultFrequency = 2 Methods Start() Starts synchronizing the PreciseClock with the system clock at the default frequency. public static void Start() Start(float) Starts synchronizing the PreciseClock with the system clock at the specified frequency. public static void Start(float frequency) Parameters frequency float The number of seconds between synchronization. Stop() Stops synchronizing the PreciseClock with the system clock. public static void Stop()"
  },
  "api/Switchboard.CompositionRoot.html": {
    "href": "api/Switchboard.CompositionRoot.html",
    "title": "Class CompositionRoot | Switchboard 1.0.0",
    "keywords": "Class CompositionRoot Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Loads the CompositionRootAsset and initializes the DependencyInjector. public static class CompositionRoot Inheritance object CompositionRoot"
  },
  "api/Switchboard.CompositionRootAsset.html": {
    "href": "api/Switchboard.CompositionRootAsset.html",
    "title": "Class CompositionRootAsset | Switchboard 1.0.0",
    "keywords": "Class CompositionRootAsset Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. [CreateAssetMenu(fileName = \"CompositionRoot\", menuName = \"Switchboard/Composition Root\", order = 1080)] public sealed class CompositionRootAsset : ScriptableObject Inheritance object Object ScriptableObject CompositionRootAsset Fields DependencyInjector The DependencyInjector to initialize when the application starts. [Tooltip(\"The DependencyInjector to initialize when the application starts.\")] public DependencyInjector DependencyInjector FileName The only relevant file name for a CompositionRootAsset. public const string FileName = \"CompositionRoot\" LogNullInjectorError If true, and the DependencyInjector is null, an error will be logged when the application starts. [Tooltip(\"If true, and the DependencyInjector is null, an error will be logged when the application starts.\")] public bool LogNullInjectorError"
  },
  "api/Switchboard.DateTimeToTextConverter.html": {
    "href": "api/Switchboard.DateTimeToTextConverter.html",
    "title": "Class DateTimeToTextConverter | Switchboard 1.0.0",
    "keywords": "Class DateTimeToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts a DateTime value into a string of characters without allocating memory for garbage collection. public static class DateTimeToTextConverter Inheritance object DateTimeToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent a DateTime value. public const int MaxCharacterCount = 27 Methods ConvertToText(DateTime, Span<char>) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(DateTime, Span<char>, int) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result, int subSecondPrecision) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. subSecondPrecision int The number of digits to display for fractions of a second. Returns int Returns the number of characters in the result. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this DateTime value, T model, ReadOnlySpanAction<char, T> action) Parameters value DateTime The DateTime to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>, int) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this DateTime value, T model, ReadOnlySpanAction<char, T> action, int subSecondPrecision) Parameters value DateTime The DateTime to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. subSecondPrecision int The number of digits to display for fractions of a second. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.DependencyInjector.html": {
    "href": "api/Switchboard.DependencyInjector.html",
    "title": "Class DependencyInjector | Switchboard 1.0.0",
    "keywords": "Class DependencyInjector Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides a base representation for an asset that can be initialized on start up, provide instances of requested types, and shut down on exit. public abstract class DependencyInjector : ScriptableObject, IInjector Inheritance object Object ScriptableObject DependencyInjector Implements IInjector Properties IsActive Gets whether the instance has been initialized and not shut down. public bool IsActive { get; } Methods Activate() Calls Activation(), unless it is already active. IsActive will be set to true even if an exception is thrown from Activation(). public void Activate() Activation() Invoked on Activate(), unless the instance IsActive. protected abstract void Activation() Deactivate() Calls Deactivation() and sets IsActive to false, unless it is already inactive. public void Deactivate() Deactivation() Invoked on Deactivate() if IsActive is true. It may not be called at all if the application exits unexpectedly. protected abstract void Deactivation() GetInstanceOf(Type) Invoked on Inject<T>(out T), if the instance IsActive. protected abstract object GetInstanceOf(Type type) Parameters type Type The type of object requested. Returns object Returns an object reference to an instance of the requested type, or null if none can be provided. Inject<T>(out T) Gets an instance of the requested type. public bool Inject<T>(out T instance) where T : class Parameters instance T Contains the reference to an instance of the requested type, or null if none can be provided. Returns bool Returns true if an instance of the requested type was provided successfully. Type Parameters T The type of object requested."
  },
  "api/Switchboard.Destructor.html": {
    "href": "api/Switchboard.Destructor.html",
    "title": "Class Destructor | Switchboard 1.0.0",
    "keywords": "Class Destructor Namespace Switchboard Assembly Switchboard.DependencyInjection.dll A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. [DefaultExecutionOrder(32000)] public class Destructor : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Destructor Events Destroyed The event invoked when OnDestroy() is called. public event Action Destroyed"
  },
  "api/Switchboard.DynamicQueue-1.html": {
    "href": "api/Switchboard.DynamicQueue-1.html",
    "title": "Class DynamicQueue<T> | Switchboard 1.0.0",
    "keywords": "Class DynamicQueue<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class DynamicQueue<T> where T : class Type Parameters T Inheritance object DynamicQueue<T> Properties Count Gets the number of objects currently stored in the queue. public int Count { get; } Methods Add(T) Adds an object to the queue. public void Add(T item) Parameters item T The object to add. Exceptions ArgumentNullException Thrown if item is null. InvalidOperationException Thrown if the Count is at MaxValue. Clear() Removes all items from the queue. public void Clear() Next() Gets the next object in the queue by removing it. public T Next() Returns T Returns the next object in the queue, or null if the queue is empty. Peek() Gets the next object in the queue without removing it. public T Peek() Returns T Returns the next object in the queue, or null if the queue is empty."
  },
  "api/Switchboard.ExpandableAttribute.html": {
    "href": "api/Switchboard.ExpandableAttribute.html",
    "title": "Class ExpandableAttribute | Switchboard 1.0.0",
    "keywords": "Class ExpandableAttribute Namespace Switchboard Assembly Switchboard.Expandable.dll Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. public sealed class ExpandableAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute ExpandableAttribute"
  },
  "api/Switchboard.FileRemover.html": {
    "href": "api/Switchboard.FileRemover.html",
    "title": "Class FileRemover | Switchboard 1.0.0",
    "keywords": "Class FileRemover Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides methods for removing excess files from a directory. public static class FileRemover Inheritance object FileRemover Methods RemoveFilesBeyondLimit(int, string, string, string) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. RemoveFilesBeyondLimit(int, string, string, string, bool) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. RemoveFilesBeyondLimit(int, string, string, string, bool, Comparison<FileSystemInfo>) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted according to the sortComparison method. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile, Comparison<FileSystemInfo> sortComparison) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. sortComparison Comparison<FileSystemInfo> The comparison method to use for sorting files, before accumulating their file size. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, fileNameSuffix, or sortComparison> are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use."
  },
  "api/Switchboard.FixedTicker.html": {
    "href": "api/Switchboard.FixedTicker.html",
    "title": "Class FixedTicker | Switchboard 1.0.0",
    "keywords": "Class FixedTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per fixed update. public sealed class FixedTicker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase FixedTicker Implements ITicker Inherited Members TickerBase.StartTick(InputAction<FrameOfTime>) TickerBase.StartTick(InputAction<FrameOfTime>, int) TickerBase.StopTick(InputAction<FrameOfTime>)"
  },
  "api/Switchboard.FloatFormatInfo.html": {
    "href": "api/Switchboard.FloatFormatInfo.html",
    "title": "Class FloatFormatInfo | Switchboard 1.0.0",
    "keywords": "Class FloatFormatInfo Namespace Switchboard Assembly Switchboard.TextConverter.dll Provides detailed info for formatting floating-point numbers. public sealed class FloatFormatInfo Inheritance object FloatFormatInfo Constructors FloatFormatInfo() Initializes a new instance of the class. public FloatFormatInfo() FloatFormatInfo(char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. FloatFormatInfo(char, char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. FloatFormatInfo(char, char, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. FloatFormatInfo(char, char, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. FloatFormatInfo(char, char, bool, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. FloatFormatInfo(char, char, bool, bool, bool, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. FloatFormatInfo(char, char, bool, bool, bool, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. FloatFormatInfo(char, char, bool, bool, bool, string, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol, string nanSymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. nanSymbol string The characters used to represent a value that is not a number. Fields DefaultDecimalPoint Gets the default decimal point character. public const char DefaultDecimalPoint = '.' DefaultDigitGroupSeparator Gets the default digit group separator character. public const char DefaultDigitGroupSeparator = ',' DefaultNaNSymbol Gets the default string of characters used to represent a value that is not a number. public const string DefaultNaNSymbol = \"NaN\" DefaultNegativeInfinitySymbol Gets the default string of characters used to represent a negative infinity value. public const string DefaultNegativeInfinitySymbol = \"-Infinity\" DefaultPositiveInfinitySymbol Gets the default string of characters used to represent a positive infinity value. public const string DefaultPositiveInfinitySymbol = \"Infinity\" Properties DecimalPoint Gets or sets the character to use for the decimal point, separating integral digits from fractional digits. public char DecimalPoint { get; set; } DigitGroupSeparator Gets or sets the character to use for separating groups of integral digits. public char DigitGroupSeparator { get; set; } LowercaseE Gets or sets whether to display the exponent value as a lowercase 'e' instead of the default uppercase 'E'. public bool LowercaseE { get; set; } NaNSymbol Gets or sets the string of characters to use for representing a value that is not a number. public string NaNSymbol { get; set; } NegativeInfinitySymbol Gets or sets the string of characters to use for representing a negative infinity value. public string NegativeInfinitySymbol { get; set; } PadExponent Gets or sets whether to pad the exponent value with leading zeroes, so that all exponent values use the same number of characters. public bool PadExponent { get; set; } PositiveInfinitySymbol Gets or sets the string of characters to use for representing a positive infinity value. public string PositiveInfinitySymbol { get; set; } ShowZeroExponent Gets or sets whether to display an exponent value of zero in scientific notation. public bool ShowZeroExponent { get; set; } Methods SetDecimalPoint(char) Sets the character to use for the decimal point, separating integral digits from fractional digits. public void SetDecimalPoint(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. SetDigitGroupSeparator(char) Sets the character to use for separating groups of integral digits. public void SetDigitGroupSeparator(char digitGroupSeparator) Parameters digitGroupSeparator char The character to use for separating groups of integral digits. SetNaNSymbol(string) Sets the characters used to represent a value that is not a number. public void SetNaNSymbol(string nanSymbol) Parameters nanSymbol string The characters used to represent a value that is not a number. SetNegativeInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetNegativeInfinitySymbol(string negativeInfinitySymbol) Parameters negativeInfinitySymbol string The characters used to represent positive infinity. SetPositiveInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetPositiveInfinitySymbol(string positiveInfinitySymbol) Parameters positiveInfinitySymbol string The characters used to represent positive infinity."
  },
  "api/Switchboard.FloatToTextConverter.html": {
    "href": "api/Switchboard.FloatToTextConverter.html",
    "title": "Class FloatToTextConverter | Switchboard 1.0.0",
    "keywords": "Class FloatToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts floating-point numbers into strings of characters without allocating memory for garbage collection. public sealed class FloatToTextConverter Inheritance object FloatToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent the exact value of the longest double-precision floating-point number. public const int MaxCharacterCount = 1076 RoundTripDoublePrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a double into text, then back into a double, without changing the binary value of the double. public const int RoundTripDoublePrecision = 17 RoundTripFloatPrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a float into text, then back into a float, without changing the binary value of the float. public const int RoundTripFloatPrecision = 9 Properties ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static FloatToTextConverter ThreadStaticInstance { get; } Methods ConvertToText(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.FloatToTextExtensions.html": {
    "href": "api/Switchboard.FloatToTextExtensions.html",
    "title": "Class FloatToTextExtensions | Switchboard 1.0.0",
    "keywords": "Class FloatToTextExtensions Namespace Switchboard Assembly Switchboard.TextConverter.dll Adds extension methods to float and double for converting to strings of characters. public static class FloatToTextExtensions Inheritance object FloatToTextExtensions Methods ConvertToText(double, Span<char>) public static int ConvertToText(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.FrameOfTime.html": {
    "href": "api/Switchboard.FrameOfTime.html",
    "title": "Struct FrameOfTime | Switchboard 1.0.0",
    "keywords": "Struct FrameOfTime Namespace Switchboard Assembly Switchboard.FrameOfTime.dll Represents information about the timing of a single frame in an update loop. public readonly struct FrameOfTime Constructors FrameOfTime(int, float, float, float, float) Initializes a new instance of the structure. public FrameOfTime(int frameCount, float time, float delta, float realTime, float realDelta) Parameters frameCount int The number of frames since the beginning of the loop. time float The number of seconds, potentially paused or scaled, since the beginning of the loop. delta float The number of seconds, potentially paused or scaled, since the last frame. realTime float The number of seconds, unpaused and unscaled, since the beginning of the loop. realDelta float The number of seconds, unpaused and unscaled, since the last frame. Properties Delta The number of seconds, potentially paused or scaled, since the last frame. public float Delta { get; } FrameCount The number of frames since the beginning of the loop. public int FrameCount { get; } RealDelta The number of seconds, unpaused and unscaled, since the last frame. public float RealDelta { get; } RealTime The number of seconds, unpaused and unscaled, since the beginning of the loop. public float RealTime { get; } Time The number of seconds, potentially paused or scaled, since the beginning of the loop. public float Time { get; }"
  },
  "api/Switchboard.html": {
    "href": "api/Switchboard.html",
    "title": "Namespace Switchboard | Switchboard 1.0.0",
    "keywords": "Namespace Switchboard Classes ApplicationEnd Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. ApplicationPlatform Provides helper methods for getting a PlatformFlags value for the current platform. ApplicationTicker Provides a static root for lazy loaded object tickers that correspond to Update(), LateUpdate(), and FixedUpdate(). ClockSynchronizer Synchronizes the PreciseClock with the system clock at a certain frequency. CompositionRoot Loads the CompositionRootAsset and initializes the DependencyInjector. CompositionRootAsset Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. DateTimeToTextConverter Converts a DateTime value into a string of characters without allocating memory for garbage collection. DependencyInjector Provides a base representation for an asset that can be initialized on start up, provide instances of requested types, and shut down on exit. Destructor A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. DynamicQueue<T> Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. ExpandableAttribute Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. FileRemover Provides methods for removing excess files from a directory. FixedTicker Invokes an event once per fixed update. FloatFormatInfo Provides detailed info for formatting floating-point numbers. FloatToTextConverter Converts floating-point numbers into strings of characters without allocating memory for garbage collection. FloatToTextExtensions Adds extension methods to float and double for converting to strings of characters. ILoggerExtensions Provides extension methods for the ILogger interface that assign the LogLevel based on the method. InjectorLocator Provides a static event that an IInjectable can invoke to locate an IInjector to call Inject(IInjector). IntToTextConverter Converts integral numbers into strings of characters, without allocating memory for garbage collection. LateTicker Invokes an event once per late update. LogFileManager Provides a helpful utility for managing instances of LogFileWriter within Unity. LogFileWriter Writes log entries to log files. LoggerRoot Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. ObjectArrayPool Stores object arrays of a specific length in a thread safe pool. ObjectPool<T> Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. PathUtility Provides utilities for working with file system paths. PlatformStats Provides a string that contains detailed information about the current hardware platform on which the application is running. PreciseClock Provides DateTime values that have the precision of a Stopwatch. PriorityEvent<T> Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. SharedObjectArrayPool A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. StandardLogFormatter Provides a standard implementation of the ILogFormatter interface. StringMaker Represents a string of characters that can be modified without allocating memory for garbage collection. StringMakerILoggerExtensions Provides extension methods for the ILogger interface to accept StringMaker messages. StringMakerUnityExtensions Provides extension methods for StringMaker to append common Unity types. SwitchboardLogger Provides a single, static LoggerRoot and helper methods for standard operations. SwitchboardMenuOrder Provides Switchboard's order in the asset creation menu. ThreadSafeObjectPool<T> Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. Ticker Invokes an event once per update. TickerBase Provides an abstract base class for invoking an event once per update. UnityLogHandler Provides a reference to the default Unity log handler. UnityLogHijacker Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. UnityLogger A singleton implementation of ILogger that targets the UnityLogHandler. Structs FrameOfTime Represents information about the timing of a single frame in an update loop. StringMakerHandle Provides a readonly ref struct facade for StringMaker. Interfaces IInjectable Provides a generic interface for having a single dependency injected per type. IInjector Provides a generic interface for injecting a single dependency per type. ILogFormatter Provides an interface for formatting log message and exceptions. ILogger Provides an interface for logging. ITicker Provides an interface for observing an event that is invoked every time a frame of the application is updated. Enums LogLevel Defines the levels of significance that may be assigned to a log entry. PlatformFlags Provides a FlagsAttribute enum comparable to UnityEngine.RuntimePlatform. Use the GetFlag(RuntimePlatform) method to convert a RuntimePlatform value into a flag value, or compare the current platform like so: PlatformFlagsVariable.HasFlag(Flag) Delegates InputAction<T> Represents a type of delegate similar to Action<T>, but utilizing an in parameter as a readonly reference. Because the parameter is an in parameter, the action cannot have a contravariant type parameter like Action<T>."
  },
  "api/Switchboard.IInjectable.html": {
    "href": "api/Switchboard.IInjectable.html",
    "title": "Interface IInjectable | Switchboard 1.0.0",
    "keywords": "Interface IInjectable Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides a generic interface for having a single dependency injected per type. public interface IInjectable Methods Inject(IInjector) Provides an IInjector for dependency injection. void Inject(IInjector injector) Parameters injector IInjector The injector to use."
  },
  "api/Switchboard.IInjector.html": {
    "href": "api/Switchboard.IInjector.html",
    "title": "Interface IInjector | Switchboard 1.0.0",
    "keywords": "Interface IInjector Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides a generic interface for injecting a single dependency per type. public interface IInjector Methods Inject<T>(out T) Provides a reference to a specified type of dependency. bool Inject<T>(out T dependency) where T : class Parameters dependency T Contains the reference to the requested type. Returns bool Returns true if an instance of the requested type was provided successfully. Type Parameters T The type of instance requested."
  },
  "api/Switchboard.ILogFormatter.html": {
    "href": "api/Switchboard.ILogFormatter.html",
    "title": "Interface ILogFormatter | Switchboard 1.0.0",
    "keywords": "Interface ILogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides an interface for formatting log message and exceptions. public interface ILogFormatter Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.ILogger.html": {
    "href": "api/Switchboard.ILogger.html",
    "title": "Interface ILogger | Switchboard 1.0.0",
    "keywords": "Interface ILogger Namespace Switchboard Assembly Switchboard.ILogger.dll Provides an interface for logging. public interface ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.ILoggerExtensions.html": {
    "href": "api/Switchboard.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | Switchboard 1.0.0",
    "keywords": "Class ILoggerExtensions Namespace Switchboard Assembly Switchboard.ILogger.dll Provides extension methods for the ILogger interface that assign the LogLevel based on the method. public static class ILoggerExtensions Inheritance object ILoggerExtensions Methods LogDebug(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogError(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.InjectorLocator.html": {
    "href": "api/Switchboard.InjectorLocator.html",
    "title": "Class InjectorLocator | Switchboard 1.0.0",
    "keywords": "Class InjectorLocator Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides a static event that an IInjectable can invoke to locate an IInjector to call Inject(IInjector). public static class InjectorLocator Inheritance object InjectorLocator Methods Inject(IInjectable) Invokes an event for an IInjectable to locate an IInjector to call Inject(IInjector). public static void Inject(IInjectable injectable) Parameters injectable IInjectable The injectable requesting an IInjector from any event observer. Events LocateInjector Observers of this event should call Inject(IInjector) on the IInjectable. public static event Action<IInjectable> LocateInjector"
  },
  "api/Switchboard.InputAction-1.html": {
    "href": "api/Switchboard.InputAction-1.html",
    "title": "Delegate InputAction<T> | Switchboard 1.0.0",
    "keywords": "Delegate InputAction<T> Namespace Switchboard Assembly Switchboard.Delegates.dll Represents a type of delegate similar to Action<T>, but utilizing an in parameter as a readonly reference. Because the parameter is an in parameter, the action cannot have a contravariant type parameter like Action<T>. public delegate void InputAction<T>(in T input) Parameters input T The in parameter for the method the delegate encapsulates. Type Parameters T The invariant type of the in parameter for the method the delegate encapsulates."
  },
  "api/Switchboard.IntToTextConverter.html": {
    "href": "api/Switchboard.IntToTextConverter.html",
    "title": "Class IntToTextConverter | Switchboard 1.0.0",
    "keywords": "Class IntToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts integral numbers into strings of characters, without allocating memory for garbage collection. public static class IntToTextConverter Inheritance object IntToTextConverter Fields MaxCharacterCount Gets the maximum number of characters that may be necessary to store the text representation of a number. public const int MaxCharacterCount = 71 Methods ConvertToText(byte, Span<char>) Converts a byte into a Span<T> of characters. public static int ConvertToText(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(short, Span<char>) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(short, Span<char>, char) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, char) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, char, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, char) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, char, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters. public static int ConvertToText(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(byte, Span<char>) Converts a byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(short, Span<char>) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(int, Span<char>) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(int, Span<char>, char) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(long, Span<char>) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this byte value, T model, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this short value, T model, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this short value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this int value, T model, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this int value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this sbyte value, T model, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex(byte, Span<char>) Converts a byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(int, Span<char>) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(int, Span<char>, char) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(long, Span<char>) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this byte value, T model, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this short value, T model, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this short value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this int value, T model, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this int value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this sbyte value, T model, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.ITicker.html": {
    "href": "api/Switchboard.ITicker.html",
    "title": "Interface ITicker | Switchboard 1.0.0",
    "keywords": "Interface ITicker Namespace Switchboard Assembly Switchboard.ITicker.dll Provides an interface for observing an event that is invoked every time a frame of the application is updated. public interface ITicker Methods StartTick(InputAction<FrameOfTime>) Adds an observer event handler to an event invoked once per update. void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the the event. void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed."
  },
  "api/Switchboard.LateTicker.html": {
    "href": "api/Switchboard.LateTicker.html",
    "title": "Class LateTicker | Switchboard 1.0.0",
    "keywords": "Class LateTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per late update. public sealed class LateTicker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase LateTicker Implements ITicker Inherited Members TickerBase.StartTick(InputAction<FrameOfTime>) TickerBase.StartTick(InputAction<FrameOfTime>, int) TickerBase.StopTick(InputAction<FrameOfTime>)"
  },
  "api/Switchboard.LogFileManager.html": {
    "href": "api/Switchboard.LogFileManager.html",
    "title": "Class LogFileManager | Switchboard 1.0.0",
    "keywords": "Class LogFileManager Namespace Switchboard Assembly Switchboard.LogFileManager.dll Provides a helpful utility for managing instances of LogFileWriter within Unity. public sealed class LogFileManager Inheritance object LogFileManager Constructors LogFileManager() Initializes a new instance of the class. public LogFileManager() LogFileManager(string) Initializes a new instance of the class. public LogFileManager(string directory) Parameters directory string The path to the directory where log files will be written. LogFileManager(string, string) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. LogFileManager(string, string, string) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. LogFileManager(string, string, string, int) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. LogFileManager(string, string, string, int, int) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit, int directorySizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. directorySizeLimit int The maximum total size for all log files in the log directory. LogFileManager(string, string, string, int, int, ILogFormatter) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit, int directorySizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. directorySizeLimit int The maximum total size for all log files in the log directory. formatter ILogFormatter The formatter to use for formatting log entries. Fields DefaultDirectorySizeLimit Gets the default value for DirectorySizeLimit. public const int DefaultDirectorySizeLimit = 50000000 Properties DirectorySizeLimit Gets or sets the maximum number of total bytes allowed for the combined size of all log files within the log directory. The latest file will remain, even if its size exceeds the limit. public static int DirectorySizeLimit { get; set; } DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. If no LogFileWriter is created, which is always the case in WebGL, this property gets a default value and the setter has no function. public bool DisplayCallerInfo { get; set; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. If no LogFileWriter is created, which is always the case in WebGL, this property gets a default value and the setter has no function. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if attempting to set a value less than MaxBytesPerLog. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogFileWriter Gets the LogFileWriter instance. public LogFileWriter LogFileWriter { get; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. If no LogFileWriter is created, which is always the case in WebGL, this property gets a default value and the setter has no function. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } Methods FlushLogFile() Flushes queued log file entries so that they are written to the actual file. Automatically called once per frame. public void FlushLogFile() RemoveExcessLogFiles() Removes older log files from the log directory if their total size is greater than DirectorySizeLimit. public void RemoveExcessLogFiles() RemoveLogFilesBeyondLimit(int) Removes older log files from the log directory if their total size is greater than byteLimit. public void RemoveLogFilesBeyondLimit(int byteLimit) Parameters byteLimit int The maximum allowed total size for all log files in the log directory. StartLogging() Opens the log file, creating a new file if necessary, and adds it as a log target. Starts ticking the log file once per frame to flush queued logs to file. Writes hardware platform statistics upon first opening. public bool StartLogging() Returns bool StopLogging() Flushes queued log entries to file, and closes the file. Removes the log file as a log target and stops ticking. public void StopLogging()"
  },
  "api/Switchboard.LogFileWriter.html": {
    "href": "api/Switchboard.LogFileWriter.html",
    "title": "Class LogFileWriter | Switchboard 1.0.0",
    "keywords": "Class LogFileWriter Namespace Switchboard Assembly Switchboard.Logger.dll Writes log entries to log files. public sealed class LogFileWriter : ILogger Inheritance object LogFileWriter Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Constructors LogFileWriter(string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. Exceptions ArgumentNullException Thrown if directory or fileNamePrefix are null. ArgumentException Thrown if directory or fileNamePrefix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix contains invalid file name characters for the current platform. LogFileWriter(string, string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. LogFileWriter(string, string, string, int) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. LogFileWriter(string, string, string, int, ILogFormatter) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension, int fileSizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. formatter ILogFormatter The formatter to use for formatting log entries. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Fields DefaultExtension Gets the default file name extension for log files. public const string DefaultExtension = \".log\" DefaultFileSizeLimit Gets the default file size limit in bytes. public const int DefaultFileSizeLimit = 10000000 MaxBytesPerLog Gets the maximum number of bytes that may be necessary to write a single log entry to the log file. public const int MaxBytesPerLog = 82944 Properties DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. public bool DisplayCallerInfo { get; set; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if attempting to set a value less than MaxBytesPerLog. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } Methods Close() Closes the FileStream for the current log file. Closing the FileStream does not automatically FlushLogs(). public void Close() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or FlushLogs(). FlushLogs() Flushes queued log entries so that they are written to the log file. If necessary, a new log file will be created, and the FileStream will be opened. It should be called regularly to prevent too many logs from accumulating in the queue. public void FlushLogs() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or Close(). SecurityException A new file needs to be created, and the caller does not have the required permission. DirectoryNotFoundException A new file needs to be created, and the specified path is invalid. UnauthorizedAccessException A new file needs to be created, and write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException A new file needs to be created, and the specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. Log(LogLevel, Exception, ReadOnlySpan<char>) Queues an exception to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the exception, the formatting exception, the message, and original exception will be queued without formatting. No exception will be thrown. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Queues a message to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the message, the message will be queued without formatting. Then, the formatting exception will be re-thrown. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentException Thrown if the message is empty. Open() Opens a FileStream for the current log file. If there is no current log file a new one will be created. public void Open() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Close(), or FlushLogs(). FileNotFoundException The file cannot be found. SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. OpenNewFile() Opens a FileStream for a new log file. The file name will start with the file name prefix, followed by a time stamp and the file name extension. public void OpenNewFile() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as Open(), Close(), or FlushLogs(). SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. SetFileSizeLimit(int) Sets the maximum log file size in bytes. When a log file reaches the size limit, a new file will be created. public void SetFileSizeLimit(int fileSizeLimit) Parameters fileSizeLimit int The maximum file size in bytes. Exceptions ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Events FileClosed Occurs when the FileStream for the current log file is closed. Provides an opportunity to clean up old log files. public event Action FileClosed"
  },
  "api/Switchboard.LoggerRoot.html": {
    "href": "api/Switchboard.LoggerRoot.html",
    "title": "Class LoggerRoot | Switchboard 1.0.0",
    "keywords": "Class LoggerRoot Namespace Switchboard Assembly Switchboard.Logger.dll Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. public sealed class LoggerRoot : ILogger Inheritance object LoggerRoot Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties LogLevel Gets or sets the overall LogLevel for all log targets within the LoggerRoot. If the LogLevel of a message or exception is less significant, it will not be sent to any log targets. The value may not be immediately accurate across all threads. public LogLevel LogLevel { get; set; } Methods Add(ILogger) Adds an implementation of ILogger to the LoggerRoot as a log target. public bool Add(ILogger logTarget) Parameters logTarget ILogger The logger to add. Returns bool Returns false if the logTarget has already been added to the LoggerRoot, otherwise returns true. Exceptions ArgumentNullException Thrown if the logTarget is null. ArgumentException Thrown if the logTarget is a LoggerRoot. Contains(ILogger) Determines whether a log target has been added. public bool Contains(ILogger logTarget) Parameters logTarget ILogger The logger to search for. Returns bool Returns true if the logTarget is contained within, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. Log(LogLevel, Exception, ReadOnlySpan<char>) Writes an exception to the log. Log targets should never attempt to throw an exception when logging an exception. If a log target throws an exception during the method, it is silently consumed. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Writes a message to the log. If a log target throws an exception, it will be captured until all log targets have had a chance to log, then re-thrown. If multiple exceptions are thrown, they will all be re-thrown as one AggregateException. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Remove(ILogger) Removes a log target. public bool Remove(ILogger logTarget) Parameters logTarget ILogger The logger to remove. Returns bool Returns true if the logTarget was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. RemoveAllTargets() Removes all loggers from the log target list. public void RemoveAllTargets()"
  },
  "api/Switchboard.LogLevel.html": {
    "href": "api/Switchboard.LogLevel.html",
    "title": "Enum LogLevel | Switchboard 1.0.0",
    "keywords": "Enum LogLevel Namespace Switchboard Assembly Switchboard.ILogger.dll Defines the levels of significance that may be assigned to a log entry. public enum LogLevel Fields Debug = 1 Information = 2 Warning = 3 Error = 4 None = 6"
  },
  "api/Switchboard.ObjectArrayPool.html": {
    "href": "api/Switchboard.ObjectArrayPool.html",
    "title": "Class ObjectArrayPool | Switchboard 1.0.0",
    "keywords": "Class ObjectArrayPool Namespace Switchboard Assembly Switchboard.Collections.dll Stores object arrays of a specific length in a thread safe pool. public sealed class ObjectArrayPool Inheritance object ObjectArrayPool Constructors ObjectArrayPool(int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength) Parameters arrayLength int The length of the object arrays to be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength. ObjectArrayPool(int, int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength, int maxCount) Parameters arrayLength int The length of the object arrays to be stored in the pool. maxCount int The maximum number of object arrays that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength, or when maxCount is less than zero. Fields MinArrayLength Represents the smallest possible length of object arrays that can be stored in any ObjectArrayPool. public const int MinArrayLength = 15 Properties ArrayLength Gets the length of the object arrays stored in the pool. public int ArrayLength { get; } Count Gets the current number of object arrays stored in the pool. The value may not be accurate as other threads add and remove arrays from the pool. public int Count { get; } MaxCount Gets the maximum number of object arrays that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } Methods Add(object[]) Adds an object array to the pool, unless the pool is at max capacity. public bool Add(object[] array) Parameters array object[] The object array to add to the pool. Returns bool Returns true if the object array was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the array is null. ArgumentException Thrown if the length of the array does not equal ArrayLength, or if the exact type of the array is not an object array. Clear() Removes all object arrays from the pool. public void Clear() GetArray() Provides an object array with a length equal to the value of ArrayLength. If the pool is empty, a new array is instantiated. Otherwise, an array is provided by removing it from the pool. public object[] GetArray() Returns object[] An object array with a length equal to the value of ArrayLength. SetMaxCount(int) Sets the maximum number of object arrays that can be stored in the pool. The value cannot be set to less than the current Count, unless the value is set to zero. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of object arrays that can be stored in the pool. Exceptions InvalidOperationException Thrown if the maxCount is less than the current Count, and not equal to zero."
  },
  "api/Switchboard.ObjectPool-1.html": {
    "href": "api/Switchboard.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Switchboard 1.0.0",
    "keywords": "Class ObjectPool<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ObjectPool<T> Constructors ObjectPool() Initializes a new instance of the class. public ObjectPool() ObjectPool(int) Initializes a new instance of the class. public ObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class for the specific type T. public static ObjectPool<T> ThreadStaticInstance { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. Clear() Removes all objects from the pool. public void Clear() Contains(T) Returns true if the item's Equals(object) method returns true for an object in the pool. public bool Contains(T item) Parameters item T The object to search for in the pool. Returns bool Returns true if the pool contains the object, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. ForEach(Action<T>) Applies an Action<T> to each object in the pool. public void ForEach(Action<T> action) Parameters action Action<T> The Action<T> to apply to each object. Exceptions ArgumentNullException Thrown if the action is null. Remove(T) Removes a specific object from the pool. Removing an object changes the order of the objects in the pool. If the item's Equals(object) method returns true for an object in the pool, that object is removed. public bool Remove(T item) Parameters item T The object to remove from the pool. Returns bool Returns true if the object was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. RequestObject() Provides an object from the pool, if one is available. public T RequestObject() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity."
  },
  "api/Switchboard.PathUtility.html": {
    "href": "api/Switchboard.PathUtility.html",
    "title": "Class PathUtility | Switchboard 1.0.0",
    "keywords": "Class PathUtility Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides utilities for working with file system paths. public static class PathUtility Inheritance object PathUtility Properties DirectorySeparator Gets the standard directory separator character for the platform, either Windows '\\', or non-Windows '/'. public static char DirectorySeparator { get; } Methods CombinePaths(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePaths(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForNonWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForNonWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. GetFileName(string) Uses a static Dictionary<TKey, TValue> to cache file names parsed from a given path string. The method is thread safe. It calls GetFileName(string) and stores the result. So, if the same filePath is evaluated multiple times, the value is simply retrieved from the cache. public static string GetFileName(string filePath) Parameters filePath string The file path to parse for a file name. Returns string The file name. Exceptions ArgumentNullException Thrown if the filePath is null. ArgumentException Thrown if the filePath is Empty. GetFileNameAndExtension(string, out string, out string) Gets the file name and extension of a given path string. public static int GetFileNameAndExtension(string path, out string fileName, out string extension) Parameters path string The path string to parse. fileName string The file name parsed from the path, or null if not found. extension string The extension parsed from the path, or null if not found. Returns int The index of the last directory separator, or -1 if not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for the platform, or ends with a period on Windows. GetFileNameAndExtensionForNonWindows(string, out string, out string) public static int GetFileNameAndExtensionForNonWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they are not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or if the file name contains an invalid character for non-Windows platforms. GetFileNameAndExtensionForWindows(string, out string, out string) public static int GetFileNameAndExtensionForWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they arenot found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for Windows, or ends with a period. IsDirectorySeparator(char) Determines whether a character is any type of directory separator character. public static bool IsDirectorySeparator(char character) Parameters character char The character to evalute. Returns bool Returns true if the character is a directory separator character, otherwise false. NormalizePath(string) Converts directory separator characters within a path string into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePath(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForNonWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForNonWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidateFileNameCharacters(string) Throws exceptions if any characters in the fileName are invalid file name characters for the current platform. public static void ValidateFileNameCharacters(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForNonWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for a non-Windows platform. public static void ValidateFileNameCharactersForNonWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for the Windows platform. public static void ValidateFileNameCharactersForWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidatePathCharacters(string) Throws exceptions if any characters in the path are invalid path characters for the current platform. public static void ValidatePathCharacters(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForNonWindows(string) Throws exceptions if any characters in the path are invalid path characters for a non-Windows platform. public static void ValidatePathCharactersForNonWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForWindows(string) Throws exceptions if any characters in the path are invalid path characters for the Windows platform. public static void ValidatePathCharactersForWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character."
  },
  "api/Switchboard.PlatformFlags.html": {
    "href": "api/Switchboard.PlatformFlags.html",
    "title": "Enum PlatformFlags | Switchboard 1.0.0",
    "keywords": "Enum PlatformFlags Namespace Switchboard Assembly Switchboard.PlatformFlags.dll Provides a FlagsAttribute enum comparable to UnityEngine.RuntimePlatform. Use the GetFlag(RuntimePlatform) method to convert a RuntimePlatform value into a flag value, or compare the current platform like so: PlatformFlagsVariable.HasFlag(Flag) [Flags] public enum PlatformFlags Fields Android = 32 CloudRendering = 262144 EmbeddedLinuxArm32 = 8388608 EmbeddedLinuxArm64 = 4194304 EmbeddedLinuxX64 = 16777216 EmbeddedLinuxX86 = 33554432 GameCoreXboxOne = 1048576 GameCoreXboxSeries = 524288 IPhonePlayer = 16 LinuxEditor = 128 LinuxPlayer = 64 LinuxServer = 67108864 Lumin = 65536 OSXEditor = 1 OSXPlayer = 2 OSXServer = 268435456 PS4 = 4096 PS5 = 2097152 Stadia = 131072 Switch = 32768 WSAPlayerARM = 2048 WSAPlayerX64 = 1024 WSAPlayerX86 = 512 WebGLPlayer = 256 WindowsEditor = 8 WindowsPlayer = 4 WindowsServer = 134217728 XboxOne = 8192 tvOS = 16384"
  },
  "api/Switchboard.PlatformStats.html": {
    "href": "api/Switchboard.PlatformStats.html",
    "title": "Class PlatformStats | Switchboard 1.0.0",
    "keywords": "Class PlatformStats Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a string that contains detailed information about the current hardware platform on which the application is running. public static class PlatformStats Inheritance object PlatformStats Methods GetStatLog() Gets a string that contains detailed information about the current hardware platform. public static string GetStatLog() Returns string Returns the string with platform statistics."
  },
  "api/Switchboard.PreciseClock.html": {
    "href": "api/Switchboard.PreciseClock.html",
    "title": "Class PreciseClock | Switchboard 1.0.0",
    "keywords": "Class PreciseClock Namespace Switchboard Assembly Switchboard.PreciseClock.dll Provides DateTime values that have the precision of a Stopwatch. public static class PreciseClock Inheritance object PreciseClock Properties Now Gets the last synchronized Now value, plus the Elapsed time since synchronization. public static DateTime Now { get; } UtcNow Gets the last synchronized UtcNow value, plus the Elapsed time since synchronization. public static DateTime UtcNow { get; } Methods SynchronizeWithSystemClock() Synchronizes the UtcNow and Now properties with the system clock. If the difference between the old time and the new time is less than one second, the time will not be changed. public static void SynchronizeWithSystemClock()"
  },
  "api/Switchboard.PriorityEvent-1.html": {
    "href": "api/Switchboard.PriorityEvent-1.html",
    "title": "Class PriorityEvent<T> | Switchboard 1.0.0",
    "keywords": "Class PriorityEvent<T> Namespace Switchboard Assembly Switchboard.Events.dll Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. public sealed class PriorityEvent<T> Type Parameters T The type of event data that will be passed to observers when the event is invoked. Inheritance object PriorityEvent<T> Constructors PriorityEvent() Initializes a new instance of the class. public PriorityEvent() PriorityEvent(int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity) Parameters handlerCapacity int The initial capacity for observers. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity is less than zero. PriorityEvent(int, int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity, int priorityCapacity) Parameters handlerCapacity int The initial capacity for observers. priorityCapacity int The initial capacity for priority values. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity or priorityCapacity are less than zero. Methods Add(InputAction<T>) Adds an observer event handler to the event with the default priority value of zero. Duplicate event handlers are never added. public void Add(InputAction<T> handler) Parameters handler InputAction<T> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. Add(InputAction<T>, int) Adds an observer event handler to the event with the specified priority value. Duplicate event handlers are never added. public void Add(InputAction<T> handler, int priority) Parameters handler InputAction<T> The observer event handler to add. priority int The order in which the event handler will be called. Event handlers with lower priority are called before those with higher priority. Exceptions ArgumentNullException Thrown if the handler is null. Invoke(in T) Invokes the event. public void Invoke(in T parameters) Parameters parameters T The event data that will passed to observer event handlers. Exceptions InvalidOperationException Thrown if the event is invoked while the previous invocation is still in progress. Remove(InputAction<T>) Removes a specific observer event handler from invocation. public void Remove(InputAction<T> handler) Parameters handler InputAction<T> The observer event handler to remove. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.SharedObjectArrayPool.html": {
    "href": "api/Switchboard.SharedObjectArrayPool.html",
    "title": "Class SharedObjectArrayPool | Switchboard 1.0.0",
    "keywords": "Class SharedObjectArrayPool Namespace Switchboard Assembly Switchboard.Collections.dll A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. public static class SharedObjectArrayPool Inheritance object SharedObjectArrayPool Methods GetPoolForLength(int) Provides a static ObjectArrayPool instance that stores object arrays of the requested length. The only recognized length values are 32, 64, 128, 256. public static ObjectArrayPool GetPoolForLength(int arrayLength) Parameters arrayLength int The length of the arrays stored in the requested ObjectArrayPool. Returns ObjectArrayPool A static ObjectArrayPool instance that stores object arrays of the specified arrayLength. Exceptions ArgumentException Thrown if the arrayLength value is anything other than 32, 64, 128, 256."
  },
  "api/Switchboard.StandardLogFormatter.html": {
    "href": "api/Switchboard.StandardLogFormatter.html",
    "title": "Class StandardLogFormatter | Switchboard 1.0.0",
    "keywords": "Class StandardLogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides a standard implementation of the ILogFormatter interface. public sealed class StandardLogFormatter : ILogFormatter Inheritance object StandardLogFormatter Implements ILogFormatter Properties StaticInstance Gets a static instance of the class. public static StandardLogFormatter StaticInstance { get; } Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. public void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.StringMaker.html": {
    "href": "api/Switchboard.StringMaker.html",
    "title": "Class StringMaker | Switchboard 1.0.0",
    "keywords": "Class StringMaker Namespace Switchboard Assembly Switchboard.StringMaker.dll Represents a string of characters that can be modified without allocating memory for garbage collection. public sealed class StringMaker Inheritance object StringMaker Extension Methods StringMakerUnityExtensions.Append(StringMaker, Bounds) StringMakerUnityExtensions.Append(StringMaker, BoundsInt) StringMakerUnityExtensions.Append(StringMaker, Color) StringMakerUnityExtensions.Append(StringMaker, Rect) StringMakerUnityExtensions.Append(StringMaker, RectInt) StringMakerUnityExtensions.Append(StringMaker, Vector2) StringMakerUnityExtensions.Append(StringMaker, Vector2Int) StringMakerUnityExtensions.Append(StringMaker, Vector3) StringMakerUnityExtensions.Append(StringMaker, Vector3Int) StringMakerUnityExtensions.Append(StringMaker, Vector4) Fields AppendAction Gets the static ReadOnlySpanAction<T, TArg> instance used to append a character Span<T> to a StringMaker. public static readonly ReadOnlySpanAction<char, StringMaker> AppendAction CharacterArrayPool Gets the static ThreadSafeObjectPool<T> of character arrays used as memory pages by all StringMaker instances. The pool is made public to simplify memory management, such as setting the MaxCount. Adding or removing character arrays from the pool for other reasons is not recommended. Character arrays from the pool are not cleared before use, only after, and if their length is not PageLength they are discarded for garbage collection. public static readonly ThreadSafeObjectPool<char[]> CharacterArrayPool CopyAction Gets the static SpanAction<T, TArg> instance used to copy the contents of a StringMaker to a character Span<T>. public static readonly SpanAction<char, StringMaker> CopyAction MaxCapacity Gets the maximum number of characters that can be stored per StringMaker instance. The value is the result of MaxPages * PageLength. Converting characters, which occupy two bytes, into a UTF-8 byte array can require up to three bytes per character. The character limit ensures that the maximum necessary size of a UTF-8 byte array is under 85kB, avoiding the large object heap. public const int MaxCapacity = 27648 MaxPages Gets the maximum number of pages that can be allocated per StringMaker instance. public const int MaxPages = 27 PageLength Gets the number of characters that can be stored per page of internal memory. Memory is allocated internally as character arrays of the specified fixed size, referred to as pages. public const int PageLength = 1024 Properties Capacity Gets the current Length of characters that can be set without borrowing or allocating new memory. public int Capacity { get; } this[int] Gets or sets the character at a specific index. public char this[int index] { get; set; } Parameters index int The character index. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static StringMaker ThreadStaticInstance { get; } Methods Append(bool) Appends a boolean value. public StringMaker Append(bool value) Parameters value bool The boolean value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMaker Append(char value) Parameters value char The character to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMaker Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMaker Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMaker Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMaker Append(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Append(long) Appends a long integer. public StringMaker Append(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMaker Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMaker Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMaker Append(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMaker Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(byte) Appends a byte as a binary value. public StringMaker AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(short) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The numberto append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(int) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(long) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMaker AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMaker AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMaker AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(uint) Appends an unsigned integer. public StringMaker AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMaker AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. AppendLine() Appends the NewLine character(s). public StringMaker AppendLine() Returns StringMaker Returns the instance, enabling a fluent interface. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMaker AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Clear() Clears and releases all memory pages. public StringMaker Clear() Returns StringMaker Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> EnsureCapacity(int) Allocates enough internal memory to store the specified number of characters. public int EnsureCapacity(int capacity) Parameters capacity int The total number of characters for which to ensure capacity. Returns int The actual allocated character capacity, may be more than requested. Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of char up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. TrimExcess() Releases excess memory pages to the CharacterArrayPool, and clears characters by setting to '\\0' from the Length index to the end of the page. public StringMaker TrimExcess() Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerHandle.html": {
    "href": "api/Switchboard.StringMakerHandle.html",
    "title": "Struct StringMakerHandle | Switchboard 1.0.0",
    "keywords": "Struct StringMakerHandle Namespace Switchboard Assembly Switchboard.StringMaker.dll Provides a readonly ref struct facade for StringMaker. public readonly ref struct StringMakerHandle Constructors StringMakerHandle(StringMaker) Initializes a new instance with the stringMaker as the internal reference. public StringMakerHandle(StringMaker stringMaker) Parameters stringMaker StringMaker The StringMaker to contain within the StringMakerHandle. Properties Capacity Gets the current Length of characters that can be set without borrowing or allocating new memory. public int Capacity { get; } this[int] Gets or sets the character at a specific index. public char this[int index] { get; set; } Parameters index int The character index. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } Methods Append(bool) Appends a boolean value. public StringMakerHandle Append(bool value) Parameters value bool The boolean value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMakerHandle Append(char value) Parameters value char The character to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMakerHandle Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMakerHandle Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMakerHandle Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMakerHandle Append(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(long) Appends a long integer. public StringMakerHandle Append(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMakerHandle Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMakerHandle Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMakerHandle Append(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMakerHandle Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(byte) Appends a byte as a binary value. public StringMakerHandle AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(short) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(int) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(long) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMakerHandle AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMakerHandle AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMakerHandle AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(uint) Appends an unsigned integer. public StringMakerHandle AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMakerHandle AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendLine() Appends the NewLine character(s). public StringMakerHandle AppendLine() Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMakerHandle AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Clear() Clears and releases all memory pages. public StringMakerHandle Clear() Returns StringMakerHandle Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> EnsureCapacity(int) Allocates enough internal memory to store the specified number of characters. public int EnsureCapacity(int capacity) Parameters capacity int The total number of characters for which to ensure capacity. Returns int The actual allocated character capacity, may be more than requested. Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(StringMakerHandle) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMakerHandle stringMakerHandle) Parameters stringMakerHandle StringMakerHandle The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of char up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. TrimExcess() Releases excess memory pages to the CharacterArrayPool, and clears characters by setting to '\\0' from the Length index to the end of the page. public StringMakerHandle TrimExcess() Returns StringMakerHandle Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerILoggerExtensions.html": {
    "href": "api/Switchboard.StringMakerILoggerExtensions.html",
    "title": "Class StringMakerILoggerExtensions | Switchboard 1.0.0",
    "keywords": "Class StringMakerILoggerExtensions Namespace Switchboard Assembly Switchboard.Logger.dll Provides extension methods for the ILogger interface to accept StringMaker messages. public static class StringMakerILoggerExtensions Inheritance object StringMakerILoggerExtensions Methods Log(ILogger, LogLevel, StringMaker, string, string, int) Logs a StringMaker message. public static void Log(this ILogger logger, LogLevel logLevel, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the message. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.StringMakerUnityExtensions.html": {
    "href": "api/Switchboard.StringMakerUnityExtensions.html",
    "title": "Class StringMakerUnityExtensions | Switchboard 1.0.0",
    "keywords": "Class StringMakerUnityExtensions Namespace Switchboard Assembly Switchboard.StringMakerUnity.dll Provides extension methods for StringMaker to append common Unity types. public static class StringMakerUnityExtensions Inheritance object StringMakerUnityExtensions Methods Append(StringMaker, Bounds) Appends a Bounds value. public static StringMaker Append(this StringMaker stringMaker, Bounds value) Parameters stringMaker StringMaker The StringMaker. value Bounds The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, BoundsInt) Appends a BoundsInt value. public static StringMaker Append(this StringMaker stringMaker, BoundsInt value) Parameters stringMaker StringMaker The StringMaker. value BoundsInt The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Color) Appends a Color value. public static StringMaker Append(this StringMaker stringMaker, Color value) Parameters stringMaker StringMaker The StringMaker. value Color The color to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Rect) Appends a Rect value. public static StringMaker Append(this StringMaker stringMaker, Rect value) Parameters stringMaker StringMaker The StringMaker. value Rect The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, RectInt) Appends a RectInt value. public static StringMaker Append(this StringMaker stringMaker, RectInt value) Parameters stringMaker StringMaker The StringMaker. value RectInt The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2) Appends a Vector2 value. public static StringMaker Append(this StringMaker stringMaker, Vector2 value) Parameters stringMaker StringMaker The StringMaker. value Vector2 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2Int) Appends a Vector2Int value. public static StringMaker Append(this StringMaker stringMaker, Vector2Int value) Parameters stringMaker StringMaker The StringMaker. value Vector2Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3) Appends a Vector3 value. public static StringMaker Append(this StringMaker stringMaker, Vector3 value) Parameters stringMaker StringMaker The StringMaker. value Vector3 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3Int) Appends a Vector3Int value. public static StringMaker Append(this StringMaker stringMaker, Vector3Int value) Parameters stringMaker StringMaker The StringMaker. value Vector3Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector4) Appends a Vector4 value. public static StringMaker Append(this StringMaker stringMaker, Vector4 value) Parameters stringMaker StringMaker The StringMaker. value Vector4 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.SwitchboardLogger.html": {
    "href": "api/Switchboard.SwitchboardLogger.html",
    "title": "Class SwitchboardLogger | Switchboard 1.0.0",
    "keywords": "Class SwitchboardLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a single, static LoggerRoot and helper methods for standard operations. public static class SwitchboardLogger Inheritance object SwitchboardLogger Properties RootInstance Gets the static logger root. public static LoggerRoot RootInstance { get; } Methods AddUnityLogger() Adds the Unity logger to the logger root. public static void AddUnityLogger() HijackUnityLogHandler() Redirects calls to Unity log methods to the logger root. public static void HijackUnityLogHandler() RemoveUnityLogger() Removes the Unity logger from the logger root. public static void RemoveUnityLogger() ResetUnityLogHandler() Directs calls to Unity log methods to the default log handler. public static void ResetUnityLogHandler()"
  },
  "api/Switchboard.SwitchboardMenuOrder.html": {
    "href": "api/Switchboard.SwitchboardMenuOrder.html",
    "title": "Class SwitchboardMenuOrder | Switchboard 1.0.0",
    "keywords": "Class SwitchboardMenuOrder Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides Switchboard's order in the asset creation menu. public static class SwitchboardMenuOrder Inheritance object SwitchboardMenuOrder Fields Value Gets Switchboard's order in the asset creation menu. public const int Value = 1080"
  },
  "api/Switchboard.ThreadSafeObjectPool-1.html": {
    "href": "api/Switchboard.ThreadSafeObjectPool-1.html",
    "title": "Class ThreadSafeObjectPool<T> | Switchboard 1.0.0",
    "keywords": "Class ThreadSafeObjectPool<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ThreadSafeObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ThreadSafeObjectPool<T> Constructors ThreadSafeObjectPool() Initializes a new instance of the class. public ThreadSafeObjectPool() ThreadSafeObjectPool(int) Initializes a new instance of the class. public ThreadSafeObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ThreadSafeObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. The value may not be accurate as other threads add and remove objects. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } StaticInstance Gets a static instance of the class for the specific type T. public static ThreadSafeObjectPool<T> StaticInstance { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if item is null. Clear() Removes all objects from the pool. public void Clear() RequestObject() Provides an object from the pool, if one is available. public T RequestObject() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. The method is thread safe, but may be slow if many objects are stored in the pool when the value is reduced. It could cause other threads to become locked if they are also attempting to operate on the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity."
  },
  "api/Switchboard.Ticker.html": {
    "href": "api/Switchboard.Ticker.html",
    "title": "Class Ticker | Switchboard 1.0.0",
    "keywords": "Class Ticker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per update. public sealed class Ticker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase Ticker Implements ITicker Inherited Members TickerBase.StartTick(InputAction<FrameOfTime>) TickerBase.StartTick(InputAction<FrameOfTime>, int) TickerBase.StopTick(InputAction<FrameOfTime>)"
  },
  "api/Switchboard.TickerBase.html": {
    "href": "api/Switchboard.TickerBase.html",
    "title": "Class TickerBase | Switchboard 1.0.0",
    "keywords": "Class TickerBase Namespace Switchboard Assembly Switchboard.Ticker.dll Provides an abstract base class for invoking an event once per update. public abstract class TickerBase : MonoBehaviour, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase Implements ITicker Derived FixedTicker LateTicker Ticker Methods OnTick() protected void OnTick() StartTick(InputAction<FrameOfTime>) Adds an observer event handler to an event invoked once per update. public void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. StartTick(InputAction<FrameOfTime>, int) Adds an observer event handler to an event invoked once per update. public void StartTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the the event. public void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.UnityLogger.html": {
    "href": "api/Switchboard.UnityLogger.html",
    "title": "Class UnityLogger | Switchboard 1.0.0",
    "keywords": "Class UnityLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll A singleton implementation of ILogger that targets the UnityLogHandler. public sealed class UnityLogger : ILogger Inheritance object UnityLogger Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. public bool DisplayCallerInfo { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } StaticInstance Gets the single, static instance of the class. public static UnityLogger StaticInstance { get; } Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.UnityLogHandler.html": {
    "href": "api/Switchboard.UnityLogHandler.html",
    "title": "Class UnityLogHandler | Switchboard 1.0.0",
    "keywords": "Class UnityLogHandler Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a reference to the default Unity log handler. public static class UnityLogHandler Inheritance object UnityLogHandler Properties Default Gets the default Unity log handler. public static ILogHandler Default { get; } Methods Initialize() Initializes the class. It is called automatically when the application starts. [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)] public static void Initialize()"
  },
  "api/Switchboard.UnityLogHijacker.html": {
    "href": "api/Switchboard.UnityLogHijacker.html",
    "title": "Class UnityLogHijacker | Switchboard 1.0.0",
    "keywords": "Class UnityLogHijacker Namespace Switchboard Assembly Switchboard.UnityLogger.dll Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. public sealed class UnityLogHijacker : ILogHandler Inheritance object UnityLogHijacker Implements ILogHandler Constructors UnityLogHijacker(ILogger) Initializes a new instance of the class. public UnityLogHijacker(ILogger logger) Parameters logger ILogger The logger to be used instead of the Unity logger. Methods LogException(Exception, Object) Logs an exception message. public void LogException(Exception exception, Object context) Parameters exception Exception Runtime Exception. context Object The UnityEngine.Object to which the exception applies. LogFormat(LogType, Object, string, params object[]) Logs a formatted message. public void LogFormat(LogType logType, Object context, string format, params object[] args) Parameters logType LogType The type of log message. context Object The UnityEngine.Object to which the message applies. format string A composite format string. args object[] Format arguments."
  },
  "index.html": {
    "href": "index.html",
    "title": "Switchboard | Switchboard 1.0.0",
    "keywords": "Switchboard Switchboard is an application framework for the Unity game engine. It provides a composition root to define that executes when the application starts playing, regardless of which scenes are loaded. Dependency injection allows your classes to have loosely coupled dependencies that are automatically injected at run time. It even works when adding new objects are instantiated at run time. You don't need singletons or special scenes to load first. It just works! No reflection, and no baking. Switchboard boasts maximum compatibility with other plugins and code bases. There is no need to inherit from a special base class, or establish tightly coupled dependencies. Switchboard is also a logging framework. The core library provides persistent log files, and garbage-free string operations for any C# application, not just Unity. Any object, including any non-MonoBehaviour, can be updated in the game loop via the static ApplicationTicker. Every feature has been meticulously crafted for maximum stability and performance. Switchboard is built on a system of collections that pool shared memory in universally re-usable memory pools. The core library is thread safe, and fast. Integrating with Switchboard undoubtedly improve the architecture and performance of your applications. Unity Specific Features Composition Root Dependency Injection Update Any Object Encourages Best Practices, S.O.L.I.D. Programming, Loose Coupling, Clean Code Architecture Universal C# Features High Performance Log Files StringMaker, a Superior StringBuilder Render Number Values that .NET Cannot Eliminate Garbage Collection from Strings"
  },
  "manual/benchmarks.html": {
    "href": "manual/benchmarks.html",
    "title": "Benchmarks | Switchboard 1.0.0",
    "keywords": "Benchmarks"
  },
  "manual/collections.html": {
    "href": "manual/collections.html",
    "title": "Collections | Switchboard 1.0.0",
    "keywords": "Collections While developing Switchboard, one of my ultimate goals became to eliminate allocation of new memory for garbage collection. You, the user, shouldn't have to worry about something like that just for integrating a plugin. This framework is designed for game development, and should have an absolute minimal impact on the performance of your software. So, it became necessary to look at collections to replace some of the standard .NET collections for my purposes. When a collection, like a List, grows in size, it must re-allocate an array of internal memory. For many collections the pattern is to allocate a new array, twice the size of the previous array, copy the contents, and discard the old array for garbage collection. Since I would like to eliminate undue garbage collection all together, I created collections that return unused arrays back to a memory pool. I would be creating multiple types of collection classes that would store generic types of elements, and I did not want that to result in an untenable mess of memory pools of arrays of various lengths and types. I realized that I could use object arrays as a sort of universal underlying memory store, regardless of collection or type. So, I created the ObjectArrayPool, which can store an infinite amount of object arrays of a specific length without ever allocating any other memory than the arrays that are being stored. This class serves as the basis for pooling all of the underlying memory pages or buckets that serve the other collections. It is also thread safe. So, after some benchmarking experiments I chose some specific lengths for memory pages that I might use, 32, 64, 128, and 256. The SharedObjectArrayPool is just a static class that holds an ObjectArrayPool for each of those lengths. So, when ObjectPool, ThreadSafeObjectPool, or DynamicQueue need to expand their internal memory, they borrow an object array of one of those four sizes from the SharedObjectArrayPool. So, the main place to profile memory pooling is at the SharedObjectArrayPool. You can set a max count on each of those pools, so if they fill to that point, any excess arrays will be subject to garbage collection as usual. One advantage of Switchboard collections over standard collections is that they don't just grow dynamically. They also shrink dynamically. So, as elements are removed from a collection, the memory that was previously necessary to store those items is automatically returned to the shared pool. One disadvantage of using Switchboard ObjectPool or ThreadSafeObjectPool is that they have an inherent maximum capacity of 65536 by design. If you need a collection that stores more elements than that, you will have to find another solution. DynamicQueue functions as a queue, first-in first-out, that grows and shrinks dynamically to any length by chaining object arrays together like a linked list. Normally I would advise anyone away from ever using a linked list because their real world performance is abysmal. However, this solution is mostly comprised of arrays, but linked to the next array at every 256 elements. Also, there is no method for iteration over the queue. So, the performance is not really impacted in this case. LogFileWriter uses this collection to queue up a potentially unlimited number of log entries. There are two types of object pool. ObjectPool has a ForEach method for iterating over the elements and removing specific elements. This was intended for future use on creating a replacement for the standard way of handling events that does not allocate garbage as events typically do. The ThreadSafeObjectPool is more limited in its function, but it is, as the name implies, thread safe. Again, none of these collections contribute to garbage collection. They all share their internal memory allocations as object arrays of one of the four memory page lengths via the SharedObjectArrayPool."
  },
  "manual/dependency-injection.html": {
    "href": "manual/dependency-injection.html",
    "title": "What is Dependency Injection? | Switchboard 1.0.0",
    "keywords": "What is Dependency Injection? Dependency injection is simply when one object has a dependency that gets provided by an external object. When you instantiate a new object by calling the class contructor, and provide an argument that the object requires for instantiation and proper function, you have just performed dependency injection. In fact, this is the ideal form of dependency injection. Constructor injection should be used wherever possible. Objects that instantiate other objects should provide the dependencies of those child objects down through the hierarchy of your application. So, the dependent object does not seek out its own dependency, like with a static reference. When an object contains a direct reference to a type that it depends on those types become tightly coupled. You cannot separate the implementation of the dependent object from the object upon which it depends. This can lead to an unecessary amount of strong dependencies over time, resulting in spaghetti code, where all of your classes are tangled together. They can't be separated from one another without causing compilation errors. When many classes have these types of strong dependencies it can feel like every file in the project has some chain of dependencies that ultimately reach every other file in the project. This makes it very difficult to separate your modules along clean conceptual boundaries. So, what is the alternative? When we have well defined conceptual boundaries between the responsibilities of various classes and modules, it's nice for those types to be loosely coupled via interfaces. An interface provides a minimal definition for object interaction, like the required method signatures and properties. This allows your types to depend on a simple interface, rather than an explicit implementation of a particular class. When an object depends on an interface it becomes trivial to swap the specific implementation of that interface. Also, the dependent code is now more portable, as it only requires that very small interface as a dependency, rather than all of the actual code behind a specific implementation, and the entire dependency chain that may come along with it. Programming an object to depend on interfaces encourages S.O.L.I.D. programming and clean code architecture. Or, perhaps it is more accurate to say that S.O.L.I.D. programming and clean architecture are not possible without programming some dependencies as interfaces and having those dependencies injected from outside, in order to avoid tight coupling of distinctly separate classes. So, dependency injection is fundamental and necessary for truly object-oriented, modular code architecture. Dependency Injection vs Singletons Many Unity programmers will be familiar with using singletons, or static classes and instances, to implement a module that is intended to have only a single instance or representation. These types of modules are sometimes referred to as services. Other objects that depend on these services can easily reference them directly via their static reference. However, that creates tight coupling between the dependent object and that static type. So, why would anyone ever use static, global references if they always result in tight coupling? Well, that's why some people advise against it. However, there are circumstances where it is unavoidable. When you have no choice, it becomes unhelpful to only hear that you should avoid it. One circumstance where reaching out for a global, static reference is all but required is when you do not have control over the instantiation of objects. This is, in fact, the case in an environment such as Unity. In Unity, most scripts inherit from MonoBehaviour and are instantiated automatically via the Unity engine. By the time your code executes, it is far too late to call the constructor yourself. Having been constructed without an opportunity for dependency injection, nearly the only option that remains is for something to reach out for a static frame of reference. This is why many Unity programmers are so familiar with the concept of singletons, and all of the problems that come along with them. Unity Constraints Unity does not allow you to control instantiation of scripts derived from MonoBehaviour or ScriptableObject. The constructor is called by the Unity engine environment within which your code resides. Also, there is no root entry point from which to compose your application. The actual composition root of the player or editor application is again controlled by Unity, and no analogous main method is provided directly for you. What's more, there is no event invoked when a new object is created for services to observe and inject dependencies. Therefore, something must reach out for a static reference from the MonoBehaviour side of the environment. Bridging this gap between scenes, and the MonoBehaviour components loaded into them, is the crucial issue that makes programming in the Unity environment fundamentally different from most other programming contexts when it comes to dependency injection and singletons. One pattern that is related to both singletons and dependency injection is the Service Locator pattern. A service locator is a singleton that provides dependencies to other objects upon request. So, it is like a singleton service that provides all other services. This pattern inherently comes with all of the pitfalls of any singleton or static reference, like tightly coupling a dependency upon that particular implementation of the service. However, when the particular implementation is sufficiently abstract, it can effectively operate like an interface. Which brings me to the Injector Locator pattern. The Injector Locator Pattern When object instantiation, calling constructors, and dependency injection are out of your control due to the programming environment it becomes necessary to call upon a static reference in order to satisfy dependencies. However, this need not be an overly explicit or concrete implementation of any particular service. Following abstraction to its logical conclusion, the static reference itself can be abstracted almost away entirely. To this end, I created a static class called InjectorLocator. This class functions like a static middle man that bridges the gap between two sides of the development environment. On one side are the composition root of your application, the main entry point for the lifecycle of your software, and various static services. On the other side are the objects being instantiated outside of your control. There are two public methods for interacting with the InjectorLocator, one for each side of the environment. When the application launches from the composition root, objects that satisfy dependencies are registered with the InjectorLocator as observers of an event to be invoked when a new object requests dependency injection. When objects are created, and they can eventually reach out for a static reference, they reach out to the InjectorLocator to call a method for requesting dependency injection, which invokes the event. In order for this class, the method, and the event it invokes to be sufficiently abstract, they must operate on abstract interfaces. The generic IInjector and IInjectable interfaces make up a pair that allow one to inject the other with an instance of a class based on the requested type. These two interfaces have no dependency on the InjectorLocator, and are fully self sufficient as an abstract dependency injection interface. Injector locator operates on these two interfaces, with IInjector implementations on the composition root and static service side of the environment, and IInjectable objects on the other. An IInjector observer of the event receives the IInjectable that is requesting injection, and can then invoke method injection on that object simply by passing itself in as the argument to the IInjectable.Inject(IInjector). One other concern to note with a static reference is that they are global. The properties of a global reference can be altered from anywhere, potentially corrupting the expected state. However, the C# event paradigm automatically mitigates those concerns. The ability to add and remove an observer is limited by the ability to access the method delegate that is added to the event. Delegates can refer to private or protected methods, enabling observers of the event to hide access to the method that is delegated to observe the event. Therefore, even though the event is global, if the methods added to the event are not global, they cannot be removed from the event by an external actor. Also, the event cannot be cleared of delegates because only the class that owns the event can do that. The expected state set by one observer, that it is observing the event, cannot be altered or corrupted externally. Only one with access to add the method delegate to the global event has access to remove it. Outside of C# the pattern can be replicated by replicating the functionality of the C# event paradigm. After all, it is just a hidden MultiCastDelegate with public methods to add and remove, in the form of the += and -= operators. C# just makes it easy to encapsulate the whole concept into one line of code. The entirety of this pattern is demonstrated via Switchboard's public interface which is free and open source under the MIT license at https://github.com/swipetrack/switchboard/tree/main/interface. Switchboard itself is designed to be loosely coupled to your application. Therefore, the only real dependency requirement is on a free, open-source, publicly available implementation of this pattern that is all of 19 lines of code, including curly braces. Switchboard provides a concrete implementation of the IInjector interface, which provides many actual services by observing the InjectorLocator, but it is possible to use Switchboard and only depend directly on those IInjector, IInjectable, and InjectorLocator interfaces. Even though InjectorLocator is a static class, and technically constitues a tightly coupled dependency, it is so light weight and abstract that it effectively functions more like an interface. This is the essence of the InjectorLocator pattern, true loose coupling across a boundary that prevents constructor injection. IInjector and IInjectable The IInjector interface is the most fundamental interface for dependency injection. It has no dependencies and consists of a single method. It makes use of C# generics to provide a method that accepts any object as an out parameter. This is the object to which the IInjector should assign an instance, and the type is automatically inferred at compile time. The type is the metadata that defines the request. A boolean is returened so the IInjector can return indicate whether the dependency was provided successfully. This enables the client that is requesting an instance of a type to embed the request within a conditional if statement, performing other actions based on whether the IInjector indicated success. Additionally, the object reference can be checked for null. An IInjector reference can refer to your entire dependency container at the composition root of your application, containing all of your services, and it be passed down into any newly created object via constructor injection as a single argument. Any C# application could easily adopt this interface as a way of generically injecting loosely coupled dependencies with not other framework or dependencies necessary. The IInjectable interface defines a method for method injection of an IInjector. This only becomes truly necessary when constructor injection is out of the question, as is the case in the Unity environment. Other Dependency Injection Frameworks You may be wondering how Switchboard compares to other dependency injection frameworks for Unity. Hopefully, if you've read this far some of the major differences are apparent, but I will point out some of the common pitfalls that I see in most the other plugins that Switchboard avoids entirely. For one, Switchboard does not use reflection. Many, if not all, of the other dependency injection frameworks out there for Unity rely heavily on reflection, and decorating your code base with various attributes. Reflection refers to the ability in C# to examine and invoke private and protected members of a type or instance that you would not normally have access to. Most dependency injection frameworks will have you decorate the various members of your classes with certain attributes, particular to that specific framework. At run time, objects are caused to undergo reflection, examining all of their members for those attributes, and injecting dependencies accordingly. There's just one problem, reflection is notoriously slow. I am of the opinion that reflection should be avoided almost entirely, at all costs, under any circumstance, if you are trying to make something like a video game with high performance requirements. Some of the more mature frameworks have a feature for baking reflection. This is a process by which reflection occurs only at compile time, then those references are then serialized for deployment so they are already defined at run time. This eliminates the run time performance penalty. However, it does not eliminate the penalty all together, and it does not allow for dynamic alteration of those references at run time for newly created objects. You still have to bake, which takes time, and those baked references are now locked in. Switchboard has none of those issues. No reflection occurs at design time, compile time, or run time. It is avoided entirely, and the performance is nearly instantaneous. Switchboard is fully compatible with Unity's enter play mode options that allow you to press play and begin working nearly instantly. No need for loading, waiting, baking, etc. You can just hit play and instantly be playing with all dependencies satisfied in any scene. You can swap all of those references in an instant, and the updates will be live, and persist when you stop playing. They don't get reverted like changes you make to a scene file while playing in the editor. You can drop a prefab into a scene, and it will automatically and instantly have all of it's dependencies resolved with no performance penalty. That is the difference! You will not find another plugin that works this way. Also, I feel like there is a common mistake that occurs in implementing inversion of control with attributes and reflection. Just because you've eliminated a client object's explicit reference to another class, does not mean that you have eliminated tight coupling of dependencies from your code base! It's like not being able to see the forest through all of the treees. When the entire code base has very specific attributes belonging to a particular framework peppered all over various members of every class, you have a tightly coupled dependency! Now, all of your classes depend on that dependency injection framework! So, even though you may not be referencing the concrete type that is being injected, you are referencing the concrete types of the particular dependency injection framework that you've chosen to weave throughout your codebase. Without that particular plugin, none of your code works. No other plugin is going to operate predictably on the attributes defined in a different framework. When using Switchboard you only depend on the ultra-light, interface based Injector Locator pattern. Swapping out the entire plugin would be trivial, if there were any alternatives to choose from. Another issue I have with some of the other frameworks, and plugins generally, is that they are often too feature rich for my taste. A plethora of features may seem enticing. More is better right? Well, when the features get too idiosyncratic they effectively constitute tight coupling to a pattern. You're boxed into doing things the way that plugin wants you to. You want that fancy feature? Well, it only works that fancy way, in that fancy plugin, and if you change your mind about the plugin the feature follows. Switchboard aims to be simple and elegant. I want this plugin to get out of your way so that you can be enabled to develop faster, cleaner, more stable code of your own without any interference from some plugin. Oh, and one more thing. Some solutions struggle with execution order. Getting your services to load first, and persist beyond the end of all calls to OnDestroy(), represents a problem. Many plugins have elaborate requirements and pitfalls for you, the user, to deal with in order to balance those concerns. Switchboard has all of the execution order issues figured out for you. The composition root runs when you press play, or the player application is launched, with the first scene loaded, but before any Awake(), OnEnable(), or Start() calls occur. You can instantiate a GameObject and add components if you like, although you should no longer need to. The dependency container you define for the composition root deactivates after all other OnDestroy() calls. Plus, Switchboard is not only a dependency injection framework. That's just one of the many features it provides! Injector Locator Simplicity In this case, simplicity enables complexity. It's important to remember the problem that this pattern is solving, and to not overly complicate the situation. If it were not necessary to bridge the divide between scene objects and application environment, it would be ideal to use pure constructor injection throughout your application. In most circumstances you should be able to fully disregard any overly complex dependency injection framework in favor of pure constructor injection. The entire dependency injection container can be passed down through the entire composition graph as a single IInjector argument passed to each constructor. Those objects don't even need to be IInjectable. The IInjectable interface is only necessary for method injection, not constructor injection. So, dependency injection can be reduced to a single dependency on the IInjector interface, which is essentially one line of code. Some other plugins offer a lot of options for how a particular dependency is loaded, instantiated, or which instance is injected based on various properties, parameters, or attributes. I feel like all of that fails to reduce the elegance of the interface and solve the original problem. With Switchboard, IInjectable objects are in full control of their own method injection, and IInjectors control how objects are instantiated and injected. An IInjectable object can control whether the inject method is regarded only once, then skipped there after, or if it can be effectively invoked multiple times, changing the injected parameters. IInjectors can be nested simply by adding multiple injectors as observers of the Injector Locator. As a convention, C# events are invoked in the order they are added. You are left with complete control, with the full power of the language, to define injection in any way you choose. Composition Root and Dependency Injector The composition root is the entry point for the application to start up at run time. This occurs when you press play in the editor, or launch the player application, when the first scene is loaded, but before the first call to Awake(). In the Switchboard section of the project settings window, there is a single object reference. That is where you assign any implementation of DependencyInjector you like. The DependencyInjector referenced when play begins is cached, so changing this value after run time has no effect on the composition root. DependencyInjector is a ScriptableObject, so it exists as an asset in your project rather than the scene hierarchy. You can define multiple implementations of DependencyInjector, and you can have multiple instances of a certain type of DependencyInjector saved as assets with differing properties. The injector can be swapped out easily to change the context of your application. You could create a mock environment dependency injector and swap it out easily for unit testing. Any properties that you change on the dependency injector asset are live at run time, and persist even after you stop playing, making testing, tweaking, and experimentation simple and intuitive."
  },
  "manual/events.html": {
    "href": "manual/events.html",
    "title": "Events | Switchboard 1.0.0",
    "keywords": "Events The Ticker module uses the PriorityEvent class to invoke update events. The priority event class has good performance, but work is in progress to develop an event better system for event handling that will then serve as the basis for the Configuration module."
  },
  "manual/feedback.html": {
    "href": "manual/feedback.html",
    "title": "Discussion Forum | Switchboard 1.0.0",
    "keywords": "Discussion Forum If you would like to discuss any topic please do so at: https://github.com/swipetrack/switchboard/discussions Report an Issue If you find a bug, want to request a feature, or have any other issue please post it here: https://github.com/swipetrack/switchboard/issues Direct Message If you would like to send a direct message concerning Switchboard, please send an email to switchboard@swipetrack.com. Review Please consider leaving a positive review on the Unity Asset Store. It will be greatly appreciated!"
  },
  "manual/interface.html": {
    "href": "manual/interface.html",
    "title": "Interface | Switchboard 1.0.0",
    "keywords": "Interface The following modules represent the public interfaces that your software can depend on while still maintaining a loose coupling to this framework. These interfaces are all open source under the MIT open source license, and publicly available on the Switchboard GitHub repo located here: https://github.com/swipetrack/switchboard/tree/main/interface Injector Locator When object instantiation, calling constructors, and dependency injection are out of your control due to the programming environment it becomes necessary to call upon a static reference in order to satisfy dependencies. However, this need not be an overly explicit or concrete implementation of any particular service. Following abstraction to its logical conclusion, the static reference itself can be abstracted almost away entirely. To this end, I created a static class called InjectorLocator. This class functions like a static middle man that bridges the gap between two sides of the development environment. On one side are the composition root of your application, the main entry point for the lifecycle of your software, and various static services. On the other side are the objects being instantiated outside of your control. There are two public methods for interacting with the InjectorLocator, one for each side of the environment. When the application launches from the composition root, objects that satisfy dependencies are registered with the InjectorLocator as observers of an event to be invoked when a new object requests dependency injection. When objects are created, and they can eventually reach out for a static reference, they reach out to the InjectorLocator to call a method for requesting dependency injection, which invokes the event. In order for this class, the method, and the event it invokes to be sufficiently abstract, they must operate on abstract interfaces. The generic IInjector and IInjectable interfaces make up a pair that allow one to inject the other with an instance of a class based on the requested type. These two interfaces have no dependency on the InjectorLocator, and are fully self sufficient as an abstract dependency injection interface. Injector locator operates on these two interfaces, with IInjector implementations on the composition root and static service side of the environment, and IInjectable objects on the other. An IInjector observer of the event receives the IInjectable that is requesting injection, and can then invoke method injection on that object simply by passing itself in as the argument to the IInjectable.Inject(IInjector). One other concern to note with a static reference is that they are global. The properties of a global reference can be altered from anywhere, potentially corrupting the expected state. However, the C# event paradigm automatically mitigates those concerns. The ability to add and remove an observer is limited by the ability to access the method delegate that is added to the event. Delegates can refer to private or protected methods, enabling observers of the event to hide access to the method that is delegated to observe the event. Therefore, even though the event is global, if the methods added to the event are not global, they cannot be removed from the event by an external actor. Also, the event cannot be cleared of delegates because only the class that owns the event can do that. The expected state set by one observer, that it is observing the event, cannot be altered or corrupted externally. Only one with access to add the method delegate to the global event has access to remove it. Outside of C# the pattern can be replicated by replicating the functionality of the C# event paradigm. After all, it is just a hidden MultiCastDelegate with public methods to add and remove, in the form of the += and -= operators. C# just makes it easy to encapsulate the whole concept into one line of code. The entirety of this pattern is demonstrated via Switchboard's public interface which is free and open source under the MIT license at https://github.com/swipetrack/switchboard/tree/main/interface. Switchboard itself is designed to be loosely coupled to your application. Therefore, the only real dependency requirement is on a free, open-source, publicly available implementation of this pattern that is all of 19 lines of code, including curly braces. Switchboard provides a concrete implementation of the IInjector interface, which provides many actual services by observing the InjectorLocator, but it is possible to use Switchboard and only depend directly on those IInjector, IInjectable, and InjectorLocator interfaces. Even though InjectorLocator is a static class, and technically constitues a tightly coupled dependency, it is so light weight and abstract that it effectively functions more like an interface. This is the essence of the InjectorLocator pattern, true loose coupling across a boundary that prevents constructor injection. ILogger The ILogger interface is mostly identical in use to the typical .NET ILogger interface. However, the Switchboard.ILogger interface accepts a ReadOnlySpan of char, which supports string and char[] arguments, and StringMaker, for zero GC logging. Also, it can automatically log the file name, method, and line number from which the log call originated, at compile time, with no run time impact on performance, except for the extra operations to log the data. Delegates Switchboard only has one delegate that your code may need to depend on, but it's possible that there could come more later, with development on events. So, this section is maintained for now. InputAction An InputAction is similar to a .NET Action that accepts one argument, except that the argument is passed with the in keyword, which makes it a readonly reference parameter. This should basically have no affect on class arguments, but it allows for efficient passing of readonly struct arguments. That means event data args can be generated on the stack via local readonly struct, then passed into the event via readonly reference. Then no garbage memory is ever allocated for event arguments. ITicker ITicker the ticker interface that enables you to attach a method in any class to Unity's Update() method. The interface is intentionally vague, with only support for Update() ticks, and no other features. All games have an update loop. Defining further features in the interface could result in tight conceptual coupling to the Unity engine, and the Unity way of doing things. More detailed ticking operations can be done via the ApplicationTicker. FrameOfTime FrameOfTime is the event data struct that is passed to observer event handlers when ticker events are invoked. ExpandableAttribute Switchboard includes an Expandable attribute that can be applied to UnityEngine.Object references to expand their properties in the editor without having to select the object. StringMaker Although using StringMaker constitutes a tightly coupled dependency, it deserves an honorable mention here for sharing an interface that is mostly the same as the .NET System.StringBuilder class. Therefore, replacing instances of StringBuilder with StringMaker, or vice versa, should be mostly a find and replace operation."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "User Manual | Switchboard 1.0.0",
    "keywords": "User Manual Welcome to the Switchboard User Manual. Please use the links in the table of contents to navigate to different pages of the manual. Switchboard Switchboard is an application framework for the Unity game engine. It provides a composition root to define that executes when the application starts playing, regardless of which scenes are loaded. Dependency injection allows your classes to have loosely coupled dependencies that are automatically injected at run time. It even works when adding new objects are instantiated at run time. You don't need singletons or special scenes to load first. It just works! No reflection, and no baking. Switchboard boasts maximum compatibility with other plugins and code bases. There is no need to inherit from a special base class, or establish tightly coupled dependencies. Switchboard is also a logging framework. The core library provides persistent log files, and garbage-free string operations for any C# application, not just Unity. Any object, including any non-MonoBehaviour, can be updated in the game loop via the static ApplicationTicker. Every feature has been meticulously crafted for maximum stability and performance. Switchboard is built on a system of collections that pool shared memory in universally re-usable memory pools. The core library is thread safe, and fast. Integrating with Switchboard undoubtedly improve the architecture and performance of your applications. Unity Specific Features Composition Root Dependency Injection Update Any Object Encourages Best Practices, S.O.L.I.D. Programming, Loose Coupling, Clean Code Architecture Universal C# Features High Performance Log Files StringMaker, a Superior StringBuilder Render Number Values that .NET Cannot Eliminate Garbage Collection from Strings"
  },
  "manual/logger.html": {
    "href": "manual/logger.html",
    "title": "Core Logger | Switchboard 1.0.0",
    "keywords": "Core Logger One of the main features of Switchboard is an implementation of the standard logger interface that writes persistent log files to disk, on any hardware platform, with minimal impact on performance. Most of the logger module is in the Core library, which has no dependencies on Unity. Switchboard's logger interface and log file writer can be used in any C# application. One caveat is that the LogFileWriter class is designed for a loop based system, as is the case in game development. When a log entry is sent to LogFileWriter, it is formatted and added to a queue of entries that will be flushed to disk later. This design decouples the log call from the more costly process of opening a file stream and flushing the appropriate bytes to the disk. Therefore, at some later point LogFileWriter.FlushLogs() must be called. In Switchboard's standard use case, this method is called at the end of each frame. In your application you may call this method wherever it seems most appropriate. However, if logs are not flushed regularly, it becomes possible for many logs to build up in the queue, which could cause the next flush to take longer. Opening the file stream is a costly operation. Switchboard, by default, opens the file stream and keeps it open for the duration of the application. LogFileWriter.OpenNewFile() or .Open() will open the file stream, creating a new file if necessary, and keep it open until .Close() is called. Flushing logs will open the file stream if it is not open already. The Switchboard logger implements an ILogger interface that, while not identical to, is intended to be mostly interchangeable with the default .NET ILogger interface. The core implementation of this interface is LoggerRoot which maintains an array of other ILogger implementations, and calls the appropriate log method on each one. I call these log targets, but they have no special definition because they are just further implementations of the ILogger interface. So, in the typical case, the main logger instance is a LoggerRoot with a LogFileWriter, and potentially other log targets. However, you can use LogFileWriter directly as an ILogger. Unity Logger In Unity, Switchboard also includes an implementation of ILogger that writes to Unity's default log console and other log output. This can be assigned to the LoggerRoot as an additional target. Also, I use an implementation of Unity's ILogHandler called UnityLogHijacker to re-route calls to Debug.Log() so that they are sent to the LoggerRoot instead. The static Logger class provides a LoggerRoot instance, and simple methods for hijacking Debug.Log() calls, so they can be routed to LogFileWriter for instance, and for adding Unity's logger to the LoggerRoot as one of the targets, so that they still reach the console. The LogFileManager class is intended to simplify many of the manual operations around handling log files within Unity. Also, when you start a log file in Unity you'll automatically get a detailed report of the current hardware platform statistics that Unity provides, including things like \"Graphics Tier\" which can really help when configuring your project settings."
  },
  "manual/memory-management.html": {
    "href": "manual/memory-management.html",
    "title": "Memory Management | Switchboard 1.0.0",
    "keywords": "Memory Management Whether you read the Collections section, or not, you should be aware that Switchboard uses memory pooling to avoid garbage collection. One of the potential negative side effects of this is that you can effectively simulate a memory leak by pooling too much memory at one time in the execution of your application, that is unnecessary and problematic at a later time. Most of what is actually pooled by Switchboard can be controlled by setting a max count value on the four memory pools help by SharedObjectArrayPool. Instead of pooling all types of arrays, generic Switchboard collections all use object arrays internally. SharedObjectArray is the static close holding the four ObjectArrayPool instances of lengths 32, 64, 128, and 256. Limiting the max count of those pools will help assure that your application does not accidentally run out of memory. When the max count is exceeded the excess will be discarded for garbage collection as usual. StringMaker also pools arrays of characters. StringMaker has a public, static ThreadSafeObjectPool of character arrays. Each array that StringMaker conributes to the pool is 1024 characters. Each StringMaker can only hold 27 of those arrays, but the static character array pool that all StringMaker instances share can store up to 65536. When you want to return the internal memory allocated to a StringMaker instance, you should set the Length as desired and call TrimExcess(), or just call Clear(). That will return the character arrays used by that StringMaker to the static StringMaker.CharacterArrayPool."
  },
  "manual/miscellaneous.html": {
    "href": "manual/miscellaneous.html",
    "title": "Expandable Objects | Switchboard 1.0.0",
    "keywords": "Expandable Objects Switchboard makes use of an Expandable attribute in the composition root. This allows you to assign and modify the dependency injector properties in place, without having to change windows or select a different object. This attribute can be used on any object field serialized in the editor to display that object with a dropdown menu, which displays all of the object's properties in place. It cannot render custom property drawers, so the properties may not be rendered in the ideal fashion. Aside from that, it allows you to inspect an object in place without have to explicitly select the object. Expandable object fields can be nested, so there is no limit to the depth of expanding object references. However, if a property has already been expanded once, it will not be displayed as expandable in the same hierarchy. This avoids the potential for infinite recursion. Platform Flags The PlatformFlags enum provides a dropdown menu in Unity for selecting multiple hardware platforms that can be easily compared against the platform the application is running on for platform dependent conditional operations. Precise Clock The PreciseClock is a static class that provides DateTime.Now and DateTime.UtcNow values that have the precision of a Stopwatch, without the usual performance impace of calling DateTime.Now. File Utilties The File Utilties module provides a PathUtility for operations like validating and combining file path strings, and a FileRemover that is used for removing old log files when the log file directory reaches the size limit."
  },
  "manual/roadmap.html": {
    "href": "manual/roadmap.html",
    "title": "Memory Pool Management | Switchboard 1.0.0",
    "keywords": "Memory Pool Management Right now, there is no straightforward or standardized way of profiling or configuring the various memory pools that Switchboard relies on to eliminate garbage collection. Every object pool in Switchboard has a Count property to track current allocations, but it's a very simple and somewhat hidden mechanic for profiling memory pools. All memory pools can have maximum count values set, so that they never grow too large or simulate a memory leak, but they have no max count set by default. Here again, there is no straightforward, standardized way of setting those max count values, such as through the editor. Ideally, a breakdown of memory allocation by current counts and bytes allocated would be easy to access by default. Configuration Files One module of this framework that did not make it into version 1.0.0 is for Configuration, using definable configuration sources, with a focus on .ini configuration files. This would be a nice fit for the framework as it would easily allow configuration of the logger, so that log level and other properties could be changed easily via local config file. Garbage Free Events While working on a Configuration module, I wanted to implement much of the interface using events. However, while researching events and delegates closely I determined that a lot of garbage memory is allocated when adding and removing observers via the normal process typically used in .NET. Also, the PriorityEvent class, which is used by the Ticker module to invoke update events, supports a priority parameter for specifying the order in which observers will be notified. I want to continue to support that feature, while refining the current implementation for event handling. Event handlers that do not allocate any memory for garbage collection are in development."
  },
  "manual/setup.html": {
    "href": "manual/setup.html",
    "title": "Installation & Basic Setup | Switchboard 1.0.0",
    "keywords": "Installation & Basic Setup Switchboard is available for download through the Unity Asset Store at https://assetstore.unity.com/packages/slug/250879. After importing Switchboard, open the Switchboard menu in the project settings window. This will automatically create a composition root asset located at Switchboard/Resources/CompositionRoot.asset. This asset is required by Switchboard at run time. The name of the file cannot be changed, but it can be relocated to any Resources directory. Assign a dependency injector asset to the composition root, or you may disable the \"Log Null Injector Error\" option to ignore dependency injection. An example dependency injector can be found in the Switchboard/Example/Assets/ directory. Example Open the SwitchboardExample scene. Assign the example dependency injector asset, located at Switchboard/Example/Assets/, to the Dependency Injector field of the composition root asset, in the Switchboard project settings menu. Press play. See how the color and position of the example object are injected automatically with the model data assigned to the dependency injector. Change the color and properties of the model assigned to the dependency injector. See how the color and motion of the example object change in real time. Assign the other model asset, located at Switchboard/Example/Assets/, to the dependency injector. If ModelA is assigned, assign ModelB, or vice versa. Drag the ExamplePrefab from Switchboard/Example/Assets/ to the scene hierarchy. See how the color of the new object matches the color of the current model, but the object does not move. This is not a bug. The dependency injector began updating the original model when the application started playing. The new model was never told to update. It is still injected into new objects that request model data. The current color value can be retreived. Be aware of this potential when creating your own dependency injector. You may want to cache a reference to original data when the dependency injector activates, or make use of other designs, to prevent certain data from changing at run time. Note that the composition root already caches a reference to the original dependency injector when play begins. You are able to change the assigned dependency injector at run time because it is rendered with the expandable property drawer, but the composition root will remember which dependency injector was assigned from the start and use that one until the end. Stop play. See that the changes made to the dependency injector and model assets while playing still remain after stopping. Changes made while playing are not lost. Open the UnityEngine.Application.persistentDataPath directory for your project to view the generated log file. Create a Dependency Injector The ExampleInjector class, located at Switchboard/Example/Scripts/, can be used as a starting point for creating your own dependency injector. The LogFileManager class simplifies the process of starting a log file in Unity. The ClockSynchronizer synchronizes the PreciseClock with the system clock so that log file time stamps are accurate. The ClockSynchronizer is updated by the ApplicationTicker. Both the LogFileManager and ClockSynchronizer are provided with source code, which can be seen in the Switchboard/Assemblies/Unity/ directory. Create a new C# script, or copy the ExampleInjector to create a new dependency injector class. Open the script and ensure the class derives from DependencyInjector. Remove any predefined MonoBehaviour methods. Add a CreateAssetMenu attribute similar to the example injector so that an instance can be created and added to the project. If you want the create option to be in the Switchboard directory, use the attribute arguments (menuName = \"Switchboard/Your Injector Name Here\", order = SwitchboardMenuOrder.Value). Override the Activation(), Deactivation(), and GetInstanceOf(Type) methods. The Activation() method will run when the application starts playing, before the first scene is fully loaded, before Awake(), OnEnable(), Start() or other methods are called on objects in the scene. You can create game objects and they will be added to the first scene that is loaded. However, it shouldn't usually be necessary to create game objects or MonoBehaviours. That's the whole reason for this framework exists! The Deactivation() method will be run when the application is quitting, but don't assume it is guaranteed. Don't assume that Deactivation() will run in all cases. If the application closes suddenly, it is possible that this method may not be invoked. However, this method is where everything that was spun up during Activation() can also be shut down gracefully when play is stopped in the editor. The GetInstanceOfType(Type) method provides an instance of the requested Type of object, if the dependency injector has been activated. This method will not be invoked until Activation() has occurred, prior to Deactivation(). The ExampleInjector class provides examples of how to handle type comparison. The Type argument will never be null, it will always be a reference type, and it can be compared for equality with a result of the typeof operator. Additionally, the IsAssignableFrom(Type) method can be invoked on the Type argument for a more flexible comparison of whether a certain type of object may be assigned to the requested type. The requested Type may be the exact Type of object in the injector, a base class in the same inheritance hierarchy, or an interface that it implements. If the object injected from the dependency injector can be assigned to the requested Type, IsAssignableFrom(Type) will tell you. If you want to restrict injection to only work with, for instance, an exact interface Type request then just compare for equality with a specific typeof() operator result. TextMeshPro Integration A TextMeshProExtensions class is included in the Switchboard/Example/Scripts/ directory. This class provides an extension method that enables easy assignment of a StringMaker to a TextMeshProUGUI text component. The extension method checks whether the text has actually changed to avoid re-creating geometry and other unnecessary operations, which provides a performance increase. Also, using a StringMaker to assign the text generates no new memory allocation for garbage collection. The script is included with the example code, with references to TextMeshPro commented out, so that Switchboard does not technically have a dependency on TextMeshPro. Simply uncomment the included method and move the script to a suitable location in your project to integrate StringMaker with TextMeshPro."
  },
  "manual/stringmaker.html": {
    "href": "manual/stringmaker.html",
    "title": "StringMaker | Switchboard 1.0.0",
    "keywords": "StringMaker You may be well aware that string manipulation in C# can end up allocating a lot of memory for the garbage collector to clean up later. You may even have used the StringBuilder class to mitigate this concern, but did you know that StringBuilder also generates a lot of garbage memory? That's why Switchboard includes a class called StringMaker, which is intended as a more efficient replacement for StringBuilder. As I was working on dependency injection it seemed logical to implement a logger service. A logger is maybe the most obvious example of a service that a dependency injector may provide, and I had a need for persistent log files. My dissatisfaction with other solutions lead me perpetually down one rabbit hole after another as I found myself wanting to improve on whatever I saw. I didn't want to accept that I would have to potentially allocate garbage memory, without being fully aware of it, just to write log files. So, to make a long story short, Switchboard is now able to concatenate any string you can imagine and write it as UTF-8 bytes in a text file without ever allocating any unnecessary memory for garbage collection. How do I avoid garbage collection entirely? Well, the same way anyone does, with memory pooling. When memory is needed, it is indeed allocated, but then when it is no longer needed it is always cached away for later use. Does that lead to a bunch of bloated memory pools instead of garbage collection? Hopefully, after reading the sections on Collections and Memory Management, you will agree that it is indeed a good solution. If you don't want to use memory pooling at all, every memory pool in this framework can have its max count set to 0, and garbage collection will function as normal. So, back to StringBuilder. StringBuilder is supposed to get rid of garbage memory allocation when working with strings, right? Wrong. StringBuilder allocates new memory that must be garbage collected during many of its operations. First of all, appending any kind of number variable is going to result in a call to the ToString() method. That method is allocating a new garbage string every time. So, if you're trying to eliminate garbage collection by using StringBuilder, I hope you don't want to append the value of any number variables to your strings. Secondly, StringBuilder allocates new character arrays internally in chunks as needed. That may not seem like an issue, and it's not. However, if you append a lot of characters, resulting in multiple chunks being allocated, and then set the Length to 0, guess what happens? A brand new array of characters is allocated. The length of the new array is equal to the entire capacity of all chunks that were previously allocated. All of the old chunks are then discarded for garbage collection. I bet you didn't assume that would happen from something like StringBuilder.Length = 0. StringBuilder doesn't really know how to reduce its Length beyond the boundary of the current chunk without allocating garbage memory. So, I created StringMaker as an alternative. Neither StringBuilder nor StringMaker are implemented as an interface. They are both tightly coupled, strong dependencies no matter which one you use. However, I designed StringMaker to have a functional interface, the signature of the methods and properties, that would closely align with StringBuilder. That way you can do a find and replace operation to replace either one with the other, and most of the methods should still function as expected. However, there are some methods I did not replicate in StringMaker because I view them as unnecessary or inherently costly operations, and StringMaker includes some methods that StringBuilder does not."
  },
  "manual/text-converter.html": {
    "href": "manual/text-converter.html",
    "title": "Text Converter | Switchboard 1.0.0",
    "keywords": "Text Converter On the issue of the ToString() method allocating a new string for garbage collection, Switchboard provides methods for converting any number variable into a string of characters without allocating unnecessary memory. It does this essentially as fast, or even faster than ToString(), depending on the type. Floating point types are converted to text much faster than with ToString(), and their actual values can be accurately represented. There are many fractional number values that ToString() is simply not capable of rendering. This includes when inspecting variables in the debugger! So, if your software has float or double values that need to be displayed as the actual value that is stored in memory, you need Switchboard. Also, integral variables, such as int, can be easily rendered as hexadecimal or binary values. You can use the .NET BitConverter class methods DoubleToInt64Bits(double) and SingleToInt32Bits(int) to get the bitwise representation of floating point numbers and render them as binary or hexadecimal as well. The resulting representation can also be formatted in any way you can imagine. One note on formatting floating point numbers: If you find it necessary to limit the maximum fractional digits of a floating point number to 0, then you must implement a slightly custom method that checks whether the value is greater than a float value representing int.MaxValue. (A float can store a much larger number than int.MaxValue.) If the number is greater, simply convert it to text. It is impossible that it will have fractional digits to display. If the number is less than int.MaxValue, cast or round the float to an int and convert it to text as such. No fractional digits will be displayed then. The same pattern applies to double and long. I've also included a simple DateTimeToTextConverter that can render a DateTime value without allocation. However, the formatting is limited to my preferred style, which is similar to the ISO 8601 standard, but not exactly the same, as I don't include the 'T' or 'Z' characters. Also, in Unity there are new Append() extension methods added to StringMaker that make use of the appropriate text converters to automatically convert common Unity types, like Vector3, without allocation."
  },
  "manual/ticker.html": {
    "href": "manual/ticker.html",
    "title": "Ticker | Switchboard 1.0.0",
    "keywords": "Ticker Switchboard provides a Ticker service, which calls Update(), LateUpdate(), or FixedUpdate() on any method. ApplicationTicker is the static class that lazy loads references to singleton instances of Ticker, LateTicker, and FixedTicker. When starting a ticker method, a priority value can be passed to specify the order in which observers should receive invocation of the event. Each of the three ticker MonoBehaviours can have their script execution order specified in the project settings menu. Then, all observers of those tickers are notified in order according to priority. The performance of using a ticker to update is equal to or greater than using Unity's built in update methods. In addition to that, any method that is updating via ticker will not cause the frame to halt if an exception is thrown. The exception will be logged, but all of the other objects in the frame will be allowed to update and continue on. This can alter the behavior of your application by alterting the way exceptions are handled."
  },
  "release-notes/v1.0.0.html": {
    "href": "release-notes/v1.0.0.html",
    "title": "Version 1.0.0 | Switchboard 1.0.0",
    "keywords": "Version 1.0.0 Initial release."
  }
}