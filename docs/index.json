{
  "api/Switchboard.ApplicationEnd.html": {
    "href": "api/Switchboard.ApplicationEnd.html",
    "title": "Class ApplicationEnd | Switchboard 1.0.0",
    "keywords": "Class ApplicationEnd Namespace Switchboard Assembly SwitchboardUnity.dll Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. public static class ApplicationEnd Inheritance object ApplicationEnd Methods Add(Action) Adds an observer Action to an event that is invoked near the very end of the application. public static void Add(Action handler) Parameters handler Action The Action to add to the event. Remove(Action) Removes an observer Action from the application end event. public static void Remove(Action handler) Parameters handler Action The Action to remove from the event."
  },
  "api/Switchboard.ApplicationTicker.html": {
    "href": "api/Switchboard.ApplicationTicker.html",
    "title": "Class ApplicationTicker | Switchboard 1.0.0",
    "keywords": "Class ApplicationTicker Namespace Switchboard Assembly SwitchboardUnity.dll Provides a static, root instance for all types of ticker that lazy load as necessary, which manages its own life cycle in the player and editor. public sealed class ApplicationTicker : ITicker, ILateTicker, IFixedTicker Inheritance object ApplicationTicker Implements ITicker ILateTicker IFixedTicker Properties StaticInstance Gets the single, static instance of the class. public static ApplicationTicker StaticInstance { get; } Methods StartFixedTick(InputAction<FrameOfTime>) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartFixedTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartLateTick(InputAction<FrameOfTime>) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartLateTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartTick(InputAction<FrameOfTime>) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StopFixedTick(InputAction<FrameOfTime>) Removes an observer event handler from the FixedTick event. public void StopFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopLateTick(InputAction<FrameOfTime>) Removes an observer event handler from the LateTick event. public void StopLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the Tick event. public void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.ClockSynchronizer.html": {
    "href": "api/Switchboard.ClockSynchronizer.html",
    "title": "Class ClockSynchronizer | Switchboard 1.0.0",
    "keywords": "Class ClockSynchronizer Namespace Switchboard Assembly SwitchboardUnity.dll Adds a permanent observer to a ILateTicker, which synchronizes the PreciseClock with the system clock every certain number of seconds. public sealed class ClockSynchronizer Inheritance object ClockSynchronizer Constructors ClockSynchronizer(ILateTicker) Initializes a new instance of the class. public ClockSynchronizer(ILateTicker ticker) Parameters ticker ILateTicker The ticker to observe. ClockSynchronizer(ILateTicker, float) Initializes a new instance of the class. public ClockSynchronizer(ILateTicker ticker, float frequency) Parameters ticker ILateTicker The ticker to observe. frequency float The number of seconds between synchronization. Fields DefaultFrequency The default number of seconds between synchronization. public const float DefaultFrequency = 2"
  },
  "api/Switchboard.CompositionRoot.html": {
    "href": "api/Switchboard.CompositionRoot.html",
    "title": "Class CompositionRoot | Switchboard 1.0.0",
    "keywords": "Class CompositionRoot Namespace Switchboard Assembly SwitchboardUnity.dll Loads the CompositionRootAsset and initializes the DependencyInjector. public static class CompositionRoot Inheritance object CompositionRoot Properties IsRunning Gets whether the composition root has been initialized, at RuntimeInitializeLoadType.BeforeSceneLoad, and not shut down at the end of the application. public static bool IsRunning { get; }"
  },
  "api/Switchboard.CompositionRootAsset.html": {
    "href": "api/Switchboard.CompositionRootAsset.html",
    "title": "Class CompositionRootAsset | Switchboard 1.0.0",
    "keywords": "Class CompositionRootAsset Namespace Switchboard Assembly SwitchboardUnity.dll Represents a single, root asset file that can be loaded when the app runs in order to activate dependency injection. [CreateAssetMenu(fileName = \"CompositionRoot\", menuName = \"Switchboard/Composition Root\", order = 1080)] public sealed class CompositionRootAsset : ScriptableObject Inheritance object Object ScriptableObject CompositionRootAsset Fields DependencyInjector The DependencyInjector to initialize when the app runs. public DependencyInjector DependencyInjector FileName The only relevant file name for a CompositionRootAsset. public const string FileName = \"CompositionRoot\" LogNullInjectorError If true, an error will be logged when the app runs if the DependencyInjector is null. public bool LogNullInjectorError"
  },
  "api/Switchboard.CreateAssetMenuOrder.html": {
    "href": "api/Switchboard.CreateAssetMenuOrder.html",
    "title": "Class CreateAssetMenuOrder | Switchboard 1.0.0",
    "keywords": "Class CreateAssetMenuOrder Namespace Switchboard Assembly SwitchboardUnity.dll Provides Switchboard's order in the asset creation menu. public static class CreateAssetMenuOrder Inheritance object CreateAssetMenuOrder Fields Value Gets Switchboard's order in the asset creation menu. public const int Value = 1080"
  },
  "api/Switchboard.DateTimeToTextConverter.html": {
    "href": "api/Switchboard.DateTimeToTextConverter.html",
    "title": "Class DateTimeToTextConverter | Switchboard 1.0.0",
    "keywords": "Class DateTimeToTextConverter Namespace Switchboard Assembly SwitchboardCore.dll Converts a DateTime value into a string of characters without allocating memory for garbage collection. public static class DateTimeToTextConverter Inheritance object DateTimeToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent a DateTime value. public const int MaxCharacterCount = 27 Methods ConvertToText(DateTime, Span<char>) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(DateTime, Span<char>, int) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result, int subSecondPrecision) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. subSecondPrecision int The number of digits to display for fractions of a second. Returns int Returns the number of characters in the result. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this DateTime value, T model, ReadOnlySpanAction<char, T> action) Parameters value DateTime The DateTime to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>, int) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this DateTime value, T model, ReadOnlySpanAction<char, T> action, int subSecondPrecision) Parameters value DateTime The DateTime to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. subSecondPrecision int The number of digits to display for fractions of a second. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.DependencyInjector.html": {
    "href": "api/Switchboard.DependencyInjector.html",
    "title": "Class DependencyInjector | Switchboard 1.0.0",
    "keywords": "Class DependencyInjector Namespace Switchboard Assembly SwitchboardUnity.dll Provides a base representation for an asset that can be initialized on start up, provide instances of requested types, and shut down on exit. public abstract class DependencyInjector : ScriptableObject, IInjector Inheritance object Object ScriptableObject DependencyInjector Implements IInjector Derived StandardDependencyInjector Properties IsActive Gets whether the instance has been initialized and not shut down. public bool IsActive { get; } Methods Activate() Calls Activation(), unless it is already active. IsActive will be set to true even if an exception is thrown from Activation(). public void Activate() Activation() Invoked on Activate(), unless the instance IsActive. protected abstract void Activation() Deactivate() Calls Deactivation() and sets IsActive to false, unless it is already inactive. public void Deactivate() Deactivation() Invoked on Deactivate() if IsActive is true. It may not be called at all if the application exits unexpectedly. protected abstract void Deactivation() GetInstanceOf(Type) Invoked on Inject<T>(out T), if the instance IsActive. protected abstract object GetInstanceOf(Type type) Parameters type Type The type of object requested. Returns object Returns an object reference to an instance of the requested type, or null if none can be provided. Inject<T>(out T) Gets an instance of the requested type. public bool Inject<T>(out T instance) where T : class Parameters instance T Contains the reference to an instance of the requested type, or null if none can be provided. Returns bool Returns true if an instance of the requested type was provided successfully. Type Parameters T The type of object requested."
  },
  "api/Switchboard.Destructor.html": {
    "href": "api/Switchboard.Destructor.html",
    "title": "Class Destructor | Switchboard 1.0.0",
    "keywords": "Class Destructor Namespace Switchboard Assembly SwitchboardUnity.dll A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. [DefaultExecutionOrder(32000)] public class Destructor : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Destructor Events Destroyed The event invoked when OnDestroy() is called. public event Action Destroyed"
  },
  "api/Switchboard.DynamicQueue-1.html": {
    "href": "api/Switchboard.DynamicQueue-1.html",
    "title": "Class DynamicQueue<T> | Switchboard 1.0.0",
    "keywords": "Class DynamicQueue<T> Namespace Switchboard Assembly SwitchboardCore.dll Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class DynamicQueue<T> where T : class Type Parameters T Inheritance object DynamicQueue<T> Properties Count Gets the number of objects currently stored in the queue. public int Count { get; } Methods Add(T) Adds an object to the queue. public void Add(T item) Parameters item T The object to add. Exceptions ArgumentNullException Thrown if item is null. InvalidOperationException Thrown if the Count is at MaxValue. Clear() Removes all items from the queue. public void Clear() Next() Gets the next object in the queue by removing it. public T Next() Returns T Returns the next object in the queue, or null if the queue is empty. Peek() Gets the next object in the queue without removing it. public T Peek() Returns T Returns the next object in the queue, or null if the queue is empty."
  },
  "api/Switchboard.ExpandableAttribute.html": {
    "href": "api/Switchboard.ExpandableAttribute.html",
    "title": "Class ExpandableAttribute | Switchboard 1.0.0",
    "keywords": "Class ExpandableAttribute Namespace Switchboard Assembly SwitchboardUnity.dll Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. public sealed class ExpandableAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute ExpandableAttribute"
  },
  "api/Switchboard.FileRemover.html": {
    "href": "api/Switchboard.FileRemover.html",
    "title": "Class FileRemover | Switchboard 1.0.0",
    "keywords": "Class FileRemover Namespace Switchboard Assembly SwitchboardCore.dll Provides methods for removing excess files from a directory. public static class FileRemover Inheritance object FileRemover Methods RemoveFilesBeyondLimit(int, string, string, string) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. RemoveFilesBeyondLimit(int, string, string, string, bool) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. RemoveFilesBeyondLimit(int, string, string, string, bool, Comparison<FileSystemInfo>) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted according to the sortComparison method. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile, Comparison<FileSystemInfo> sortComparison) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. sortComparison Comparison<FileSystemInfo> The comparison method to use for sorting files, before accumulating their file size. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, fileNameSuffix, or sortComparison> are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use."
  },
  "api/Switchboard.FixedTicker.html": {
    "href": "api/Switchboard.FixedTicker.html",
    "title": "Class FixedTicker | Switchboard 1.0.0",
    "keywords": "Class FixedTicker Namespace Switchboard Assembly SwitchboardUnity.dll Invokes an event once per fixed update. public sealed class FixedTicker : MonoBehaviour, IFixedTicker Inheritance object Object Component Behaviour MonoBehaviour FixedTicker Implements IFixedTicker Methods StartFixedTick(InputAction<FrameOfTime>) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. StartFixedTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. StopFixedTick(InputAction<FrameOfTime>) Removes an observer event handler from the FixedTick event. public void StopFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.FloatFormatInfo.html": {
    "href": "api/Switchboard.FloatFormatInfo.html",
    "title": "Class FloatFormatInfo | Switchboard 1.0.0",
    "keywords": "Class FloatFormatInfo Namespace Switchboard Assembly SwitchboardCore.dll Provides detailed info for formatting floating-point numbers. public sealed class FloatFormatInfo Inheritance object FloatFormatInfo Constructors FloatFormatInfo() Initializes a new instance of the class. public FloatFormatInfo() FloatFormatInfo(char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. FloatFormatInfo(char, char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. FloatFormatInfo(char, char, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. FloatFormatInfo(char, char, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. FloatFormatInfo(char, char, bool, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. FloatFormatInfo(char, char, bool, bool, bool, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. FloatFormatInfo(char, char, bool, bool, bool, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. FloatFormatInfo(char, char, bool, bool, bool, string, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol, string nanSymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. nanSymbol string The characters used to represent a value that is not a number. Fields DefaultDecimalPoint Gets the default decimal point character. public const char DefaultDecimalPoint = '.' DefaultDigitGroupSeparator Gets the default digit group separator character. public const char DefaultDigitGroupSeparator = ',' DefaultNaNSymbol Gets the default string of characters used to represent a value that is not a number. public const string DefaultNaNSymbol = \"NaN\" DefaultNegativeInfinitySymbol Gets the default string of characters used to represent a negative infinity value. public const string DefaultNegativeInfinitySymbol = \"-Infinity\" DefaultPositiveInfinitySymbol Gets the default string of characters used to represent a positive infinity value. public const string DefaultPositiveInfinitySymbol = \"Infinity\" Properties DecimalPoint Gets or sets the character to use for the decimal point, separating integral digits from fractional digits. public char DecimalPoint { get; set; } DigitGroupSeparator Gets or sets the character to use for separating groups of integral digits. public char DigitGroupSeparator { get; set; } LowercaseE Gets or sets whether to display the exponent value as a lowercase 'e' instead of the default uppercase 'E'. public bool LowercaseE { get; set; } NaNSymbol Gets or sets the string of characters to use for representing a value that is not a number. public string NaNSymbol { get; set; } NegativeInfinitySymbol Gets or sets the string of characters to use for representing a negative infinity value. public string NegativeInfinitySymbol { get; set; } PadExponent Gets or sets whether to pad the exponent value with leading zeroes, so that all exponent values use the same number of characters. public bool PadExponent { get; set; } PositiveInfinitySymbol Gets or sets the string of characters to use for representing a positive infinity value. public string PositiveInfinitySymbol { get; set; } ShowZeroExponent Gets or sets whether to display an exponent value of zero in scientific notation. public bool ShowZeroExponent { get; set; } Methods SetDecimalPoint(char) Sets the character to use for the decimal point, separating integral digits from fractional digits. public void SetDecimalPoint(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. SetDigitGroupSeparator(char) Sets the character to use for separating groups of integral digits. public void SetDigitGroupSeparator(char digitGroupSeparator) Parameters digitGroupSeparator char The character to use for separating groups of integral digits. SetNaNSymbol(string) Sets the characters used to represent a value that is not a number. public void SetNaNSymbol(string nanSymbol) Parameters nanSymbol string The characters used to represent a value that is not a number. SetNegativeInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetNegativeInfinitySymbol(string negativeInfinitySymbol) Parameters negativeInfinitySymbol string The characters used to represent positive infinity. SetPositiveInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetPositiveInfinitySymbol(string positiveInfinitySymbol) Parameters positiveInfinitySymbol string The characters used to represent positive infinity."
  },
  "api/Switchboard.FloatToTextConverter.html": {
    "href": "api/Switchboard.FloatToTextConverter.html",
    "title": "Class FloatToTextConverter | Switchboard 1.0.0",
    "keywords": "Class FloatToTextConverter Namespace Switchboard Assembly SwitchboardCore.dll Converts floating-point numbers into strings of characters without allocating memory for garbage collection. public sealed class FloatToTextConverter Inheritance object FloatToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent the exact value of the longest double-precision floating-point number. public const int MaxCharacterCount = 1076 RoundTripDoublePrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a double into text, then back into a double, without changing the binary value of the double. public const int RoundTripDoublePrecision = 17 RoundTripFloatPrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a float into text, then back into a float, without changing the binary value of the float. public const int RoundTripFloatPrecision = 9 Properties ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static FloatToTextConverter ThreadStaticInstance { get; } Methods ConvertToText(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public T ConvertToTextAsScientific<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public T ConvertToTextWithDigitLimit<T>(double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public T ConvertToText<T>(double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.FloatToTextExtensions.html": {
    "href": "api/Switchboard.FloatToTextExtensions.html",
    "title": "Class FloatToTextExtensions | Switchboard 1.0.0",
    "keywords": "Class FloatToTextExtensions Namespace Switchboard Assembly SwitchboardCore.dll Adds extension methods to float and double for converting to strings of characters. public static class FloatToTextExtensions Inheritance object FloatToTextExtensions Methods ConvertToText(double, Span<char>) public static int ConvertToText(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static T ConvertToTextAsScientific<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static T ConvertToTextWithDigitLimit<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this double value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static T ConvertToText<T>(this float value, T model, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.FrameData.html": {
    "href": "api/Switchboard.FrameData.html",
    "title": "Struct FrameData | Switchboard 1.0.0",
    "keywords": "Struct FrameData Namespace Switchboard Assembly SwitchboardUnity.dll Represents information about the timing of a single frame in an update loop. public readonly struct FrameData Constructors FrameData(int, float, float, float, float) Initializes a new instance of the structure. public FrameData(int frameCount, float time, float delta, float realTime, float realDelta) Parameters frameCount int The number of frames since the beginning of the loop. time float The number of seconds, potentially paused or scaled, since the beginning of the loop. delta float The number of seconds, potentially paused or scaled, since the last frame. realTime float The number of seconds, unpaused and unscaled, since the beginning of the loop. realDelta float The number of seconds, unpaused and unscaled, since the last frame. Properties Delta The number of seconds, potentially paused or scaled, since the last frame. public float Delta { get; } FrameCount The number of frames since the beginning of the loop. public int FrameCount { get; } RealDelta The number of seconds, unpaused and unscaled, since the last frame. public float RealDelta { get; } RealTime The number of seconds, unpaused and unscaled, since the beginning of the loop. public float RealTime { get; } Time The number of seconds, potentially paused or scaled, since the beginning of the loop. public float Time { get; }"
  },
  "api/Switchboard.FrameOfTime.html": {
    "href": "api/Switchboard.FrameOfTime.html",
    "title": "Struct FrameOfTime | Switchboard 1.0.0",
    "keywords": "Struct FrameOfTime Namespace Switchboard Assembly SwitchboardUnity.dll Represents information about the timing of a single frame in an update loop. public readonly struct FrameOfTime Constructors FrameOfTime(int, float, float, float, float) Initializes a new instance of the structure. public FrameOfTime(int frameCount, float time, float delta, float realTime, float realDelta) Parameters frameCount int The number of frames since the beginning of the loop. time float The number of seconds, potentially paused or scaled, since the beginning of the loop. delta float The number of seconds, potentially paused or scaled, since the last frame. realTime float The number of seconds, unpaused and unscaled, since the beginning of the loop. realDelta float The number of seconds, unpaused and unscaled, since the last frame. Properties Delta The number of seconds, potentially paused or scaled, since the last frame. public float Delta { get; } FrameCount The number of frames since the beginning of the loop. public int FrameCount { get; } RealDelta The number of seconds, unpaused and unscaled, since the last frame. public float RealDelta { get; } RealTime The number of seconds, unpaused and unscaled, since the beginning of the loop. public float RealTime { get; } Time The number of seconds, potentially paused or scaled, since the beginning of the loop. public float Time { get; }"
  },
  "api/Switchboard.html": {
    "href": "api/Switchboard.html",
    "title": "Namespace Switchboard | Switchboard 1.0.0",
    "keywords": "Namespace Switchboard Classes ApplicationEnd Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. ApplicationTicker Provides a static, root instance for all types of ticker that lazy load as necessary, which manages its own life cycle in the player and editor. ClockSynchronizer Adds a permanent observer to a ILateTicker, which synchronizes the PreciseClock with the system clock every certain number of seconds. CompositionRoot Loads the CompositionRootAsset and initializes the DependencyInjector. CompositionRootAsset Represents a single, root asset file that can be loaded when the app runs in order to activate dependency injection. DateTimeToTextConverter Converts a DateTime value into a string of characters without allocating memory for garbage collection. DependencyInjector Provides a base representation for an asset that can be initialized on start up, provide instances of requested types, and shut down on exit. Destructor A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. DynamicQueue<T> Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. ExpandableAttribute Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. FileRemover Provides methods for removing excess files from a directory. FixedTicker Invokes an event once per fixed update. FloatFormatInfo Provides detailed info for formatting floating-point numbers. FloatToTextConverter Converts floating-point numbers into strings of characters without allocating memory for garbage collection. FloatToTextExtensions Adds extension methods to float and double for converting to strings of characters. ILoggerExtensions Provides extension methods for the ILogger interface that assign the LogLevel based on the method. InjectorLocator Provides a static event that an IInjectable can invoke to request an IInjector to call InjectWith(IInjector). IntToTextConverter Converts integral numbers into strings of characters, without allocating memory for garbage collection. LateTicker Invokes an event once per late update. LogFileManager Provides a helpful utility for managing instances of LogFileWriter within Unity. LogFileWriter Writes log entries to log files. Logger Provides a single, static LoggerRoot and helper methods for standard operations. LoggerRoot Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. ObjectArrayPool Stores object arrays of a specific length in a thread safe pool. ObjectPool<T> Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. PathUtility Provides utilities for working with file system paths. PlatformStats Provides a string that contains detailed information about the current hardware platform on which the application is running. PreciseClock Provides DateTime values that have the precision of a Stopwatch. PriorityEvent<T> Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. SharedObjectArrayPool A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. StandardDependencyInjector Provides a standard implementation of DependencyInjector. StandardLogFormatter Provides a standard implementation of the ILogFormatter interface. StringMaker Represents a string of characters that can be modified without allocating memory for garbage collection. StringMakerILoggerExtensions Provides extension methods for the ILogger interface to accept StringMaker messages. StringMakerUnityExtensions Provides extension methods for StringMaker to append common Unity types. SwitchboardMenuOrder Provides Switchboard's order in the asset creation menu. TheTypeOf<T> Provides a generic, static cache for the results of the typeof operator. ThreadSafeObjectPool<T> Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. Ticker Invokes an event once per update. UnityLogHandler Provides a reference to the default Unity log handler. UnityLogHijacker Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. UnityLogger An implementation of ILogger that targets the UnityLogger. Structs FrameOfTime Represents information about the timing of a single frame in an update loop. StringMakerHandle Provides a readonly ref struct facade for StringMaker. Interfaces IFixedTicker Provides an interface for adding observers to a fixed tick event, called each fixed update of the physics state, a variable number of times per frame. IInjectable Provides a generic interface for having a single dependency injected per type. IInjector Provides a generic interface for injecting a single dependency per type. ILateTicker Provides an interface for adding observers to a late tick event, called at the end of each update, once per frame. ILogFormatter Provides an interface for formatting log message and exceptions. ILogger Provides an interface for logging. ITicker Provides an interface for adding observers to a tick event, called each update, once per frame. Enums LogLevel Defines the levels of significance that may be assigned to a log entry. Delegates InputAction<T> Represents a type of delegate similar to Action<T>, but utilizing an in parameter as a readonly reference. Because the parameter is an in parameter, the action cannot have a contravariant type parameter like Action<T>."
  },
  "api/Switchboard.IFixedTicker.html": {
    "href": "api/Switchboard.IFixedTicker.html",
    "title": "Interface IFixedTicker | Switchboard 1.0.0",
    "keywords": "Interface IFixedTicker Namespace Switchboard Assembly SwitchboardUnity.dll Provides an interface for adding observers to a fixed tick event, called each fixed update of the physics state, a variable number of times per frame. public interface IFixedTicker Methods StartFixedTick(InputAction<FrameOfTime>) Adds an observer event handler to the fixed tick event, invoked once per update of the physics state. void StartFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. StartFixedTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the fixed tick event, invoked once per update of the physics state. void StartFixedTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. StopFixedTick(InputAction<FrameOfTime>) Removes an observer event handler from the fixed tick event. void StopFixedTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed."
  },
  "api/Switchboard.IInjectable.html": {
    "href": "api/Switchboard.IInjectable.html",
    "title": "Interface IInjectable | Switchboard 1.0.0",
    "keywords": "Interface IInjectable Namespace Switchboard Assembly SwitchboardUnity.dll Provides a generic interface for having a single dependency injected per type. public interface IInjectable Methods InjectWith(IInjector) Provides an IInjector for dependency injection. void InjectWith(IInjector injector) Parameters injector IInjector The injector to use."
  },
  "api/Switchboard.IInjector.html": {
    "href": "api/Switchboard.IInjector.html",
    "title": "Interface IInjector | Switchboard 1.0.0",
    "keywords": "Interface IInjector Namespace Switchboard Assembly SwitchboardUnity.dll Provides a generic interface for injecting a single dependency per type. public interface IInjector Methods Inject<T>(out T) Provides a reference to a specified type of dependency. bool Inject<T>(out T dependency) where T : class Parameters dependency T Contains the reference to the requested type. Returns bool Returns true if an instance of the requested type was provided successfully. Type Parameters T The type of instance requested."
  },
  "api/Switchboard.ILateTicker.html": {
    "href": "api/Switchboard.ILateTicker.html",
    "title": "Interface ILateTicker | Switchboard 1.0.0",
    "keywords": "Interface ILateTicker Namespace Switchboard Assembly SwitchboardUnity.dll Provides an interface for adding observers to a late tick event, called at the end of each update, once per frame. public interface ILateTicker Methods StartLateTick(InputAction<FrameOfTime>) Adds an observer event handler to the late tick event, invoked at the end of each frame. void StartLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. StartLateTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the late tick event, invoked at the end of each frame. void StartLateTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. StopLateTick(InputAction<FrameOfTime>) Removes an observer event handler from the late tick event. void StopLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed."
  },
  "api/Switchboard.ILogFormatter.html": {
    "href": "api/Switchboard.ILogFormatter.html",
    "title": "Interface ILogFormatter | Switchboard 1.0.0",
    "keywords": "Interface ILogFormatter Namespace Switchboard Assembly SwitchboardCore.dll Provides an interface for formatting log message and exceptions. public interface ILogFormatter Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.ILogger.html": {
    "href": "api/Switchboard.ILogger.html",
    "title": "Interface ILogger | Switchboard 1.0.0",
    "keywords": "Interface ILogger Namespace Switchboard Assembly SwitchboardCore.dll Provides an interface for logging. public interface ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.ILoggerExtensions.html": {
    "href": "api/Switchboard.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | Switchboard 1.0.0",
    "keywords": "Class ILoggerExtensions Namespace Switchboard Assembly SwitchboardCore.dll Provides extension methods for the ILogger interface that assign the LogLevel based on the method. public static class ILoggerExtensions Inheritance object ILoggerExtensions Methods LogDebug(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogError(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.InjectorLocator.html": {
    "href": "api/Switchboard.InjectorLocator.html",
    "title": "Class InjectorLocator | Switchboard 1.0.0",
    "keywords": "Class InjectorLocator Namespace Switchboard Assembly SwitchboardUnity.dll Provides a static event that an IInjectable can invoke to request an IInjector to call InjectWith(IInjector). public static class InjectorLocator Inheritance object InjectorLocator Methods RequestInjection(IInjectable) Invokes an event for an IInjectable to request an IInjector to call InjectWith(IInjector). public static void RequestInjection(IInjectable injectable) Parameters injectable IInjectable The injectable requesting an IInjector from any event observer. Events InjectionRequested Observers of this event should call InjectWith(IInjector) on the IInjectable. public static event Action<IInjectable> InjectionRequested"
  },
  "api/Switchboard.InputAction-1.html": {
    "href": "api/Switchboard.InputAction-1.html",
    "title": "Delegate InputAction<T> | Switchboard 1.0.0",
    "keywords": "Delegate InputAction<T> Namespace Switchboard Assembly SwitchboardCore.dll Represents a type of delegate similar to Action<T>, but utilizing an in parameter as a readonly reference. Because the parameter is an in parameter, the action cannot have a contravariant type parameter like Action<T>. public delegate void InputAction<T>(in T input) Parameters input T The in parameter for the method the delegate encapsulates. Type Parameters T The invariant type of the in parameter for the method the delegate encapsulates."
  },
  "api/Switchboard.IntToTextConverter.html": {
    "href": "api/Switchboard.IntToTextConverter.html",
    "title": "Class IntToTextConverter | Switchboard 1.0.0",
    "keywords": "Class IntToTextConverter Namespace Switchboard Assembly SwitchboardCore.dll Converts integral numbers into strings of characters, without allocating memory for garbage collection. public static class IntToTextConverter Inheritance object IntToTextConverter Fields MaxCharacterCount Gets the maximum number of characters that may be necessary to store the text representation of a number. public const int MaxCharacterCount = 71 Methods ConvertToText(byte, Span<char>) Converts a byte into a Span<T> of characters. public static int ConvertToText(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(short, Span<char>) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(short, Span<char>, char) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, char) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(int, Span<char>, char, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, char) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(long, Span<char>, char, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. ConvertToText(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters. public static int ConvertToText(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToText(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToText(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(byte, Span<char>) Converts a byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(short, Span<char>) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(int, Span<char>) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(int, Span<char>, char) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(long, Span<char>) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsBinary(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsBinary<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this byte value, T model, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this short value, T model, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this short value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this int value, T model, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this int value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this sbyte value, T model, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the model into the action. public static T ConvertToTextAsBinary<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex(byte, Span<char>) Converts a byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(int, Span<char>) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(int, Span<char>, char) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(long, Span<char>) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. ConvertToTextAsHex<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this byte value, T model, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this short value, T model, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this short value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this int value, T model, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this int value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this sbyte value, T model, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ushort value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the model into the action. public static T ConvertToTextAsHex<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this long value, T model, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this long value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this uint value, T model, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this uint value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the model into the action. public static T ConvertToText<T>(this ulong value, T model, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. model T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Returns T Returns the model used in the action, enabling a fluent interface. Type Parameters T The type of model to pass into the action."
  },
  "api/Switchboard.ITicker.html": {
    "href": "api/Switchboard.ITicker.html",
    "title": "Interface ITicker | Switchboard 1.0.0",
    "keywords": "Interface ITicker Namespace Switchboard Assembly SwitchboardUnity.dll Provides an interface for adding observers to a tick event, called each update, once per frame. public interface ITicker Methods StartTick(InputAction<FrameOfTime>) Adds an observer event handler to the tick event, invoked once per frame. void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. StartTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the tick event, invoked once per frame. void StartTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the tick event. void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed."
  },
  "api/Switchboard.LateTicker.html": {
    "href": "api/Switchboard.LateTicker.html",
    "title": "Class LateTicker | Switchboard 1.0.0",
    "keywords": "Class LateTicker Namespace Switchboard Assembly SwitchboardUnity.dll Invokes an event once per late update. public sealed class LateTicker : MonoBehaviour, ILateTicker Inheritance object Object Component Behaviour MonoBehaviour LateTicker Implements ILateTicker Methods StartLateTick(InputAction<FrameOfTime>) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. StartLateTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. StopLateTick(InputAction<FrameOfTime>) Removes an observer event handler from the LateTick event. public void StopLateTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.LogFileManager.html": {
    "href": "api/Switchboard.LogFileManager.html",
    "title": "Class LogFileManager | Switchboard 1.0.0",
    "keywords": "Class LogFileManager Namespace Switchboard Assembly SwitchboardUnity.dll Provides a helpful utility for managing instances of LogFileWriter within Unity. public sealed class LogFileManager Inheritance object LogFileManager Constructors LogFileManager() Initializes a new instance of the class. public LogFileManager() LogFileManager(string) Initializes a new instance of the class. public LogFileManager(string directory) Parameters directory string The path to the directory where log files will be written. LogFileManager(string, string) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. LogFileManager(string, string, string) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. LogFileManager(string, string, string, int) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. LogFileManager(string, string, string, int, int) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit, int directorySizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. directorySizeLimit int The maximum total size for all log files in the log directory. LogFileManager(string, string, string, int, int, ILogFormatter) Initializes a new instance of the class. public LogFileManager(string directory, string fileNamePrefix, string extension, int fileSizeLimit, int directorySizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. directorySizeLimit int The maximum total size for all log files in the log directory. formatter ILogFormatter The formatter to use for formatting log entries. Fields DefaultDirectorySizeLimit Gets the default value for DirectorySizeLimit. public const int DefaultDirectorySizeLimit = 50000000 Properties DirectorySizeLimit Gets or sets the maximum number of total bytes allowed for the combined size of all log files within the log directory. The latest file will remain, even if its size exceeds the limit. public static int DirectorySizeLimit { get; set; } DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. public bool DisplayCallerInfo { get; set; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if attempting to set a value less than MaxBytesPerLog. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogFileWriter Gets the LogFileWriter instance. public LogFileWriter LogFileWriter { get; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } Methods FlushLogFile() Flushes queued log file entries so that they are written to the actual file. Automatically called once per frame. public void FlushLogFile() RemoveExcessLogFiles() Removes older log files from the log directory if their total size is greater than DirectorySizeLimit. public void RemoveExcessLogFiles() RemoveLogFilesBeyondLimit(int) Removes older log files from the log directory if their total size is greater than byteLimit. public void RemoveLogFilesBeyondLimit(int byteLimit) Parameters byteLimit int The maximum allowed total size for all log files in the log directory. StartLogging() Opens the log file, creating a new file if necessary, and adds it as a log target. Starts ticking the log file once per frame to flush queued logs to file. Writes hardware platform statistics upon first opening. public bool StartLogging() Returns bool StopLogging() Flushes queued log entries to file, and closes the file. Removes the log file as a log target and stops ticking. public void StopLogging()"
  },
  "api/Switchboard.LogFileWriter.html": {
    "href": "api/Switchboard.LogFileWriter.html",
    "title": "Class LogFileWriter | Switchboard 1.0.0",
    "keywords": "Class LogFileWriter Namespace Switchboard Assembly SwitchboardCore.dll Writes log entries to log files. public sealed class LogFileWriter : ILogger Inheritance object LogFileWriter Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Constructors LogFileWriter(string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. Exceptions ArgumentNullException Thrown if directory or fileNamePrefix are null. ArgumentException Thrown if directory or fileNamePrefix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix contains invalid file name characters for the current platform. LogFileWriter(string, string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. LogFileWriter(string, string, string, int) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. LogFileWriter(string, string, string, int, ILogFormatter) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string extension, int fileSizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. extension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. formatter ILogFormatter The formatter to use for formatting log entries. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or extension are null. ArgumentException Thrown if directory, fileNamePrefix, or extension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or extension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Fields DefaultExtension Gets the default file name extension for log files. public const string DefaultExtension = \".log\" DefaultFileSizeLimit Gets the default file size limit in bytes. public const int DefaultFileSizeLimit = 10000000 MaxBytesPerLog Gets the maximum number of bytes that may be necessary to write a single log entry to the log file. public const int MaxBytesPerLog = 82944 Properties DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. public bool DisplayCallerInfo { get; set; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if attempting to set a value less than MaxBytesPerLog. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } Methods Close() Closes the FileStream for the current log file. Closing the FileStream does not automatically FlushLogs(). public void Close() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or FlushLogs(). FlushLogs() Flushes queued log entries so that they are written to the log file. If necessary, a new log file will be created, and the FileStream will be opened. It should be called regularly to prevent too many logs from accumulating in the queue. public void FlushLogs() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or Close(). SecurityException A new file needs to be created, and the caller does not have the required permission. DirectoryNotFoundException A new file needs to be created, and the specified path is invalid. UnauthorizedAccessException A new file needs to be created, and write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException A new file needs to be created, and the specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. Log(LogLevel, Exception, ReadOnlySpan<char>) Queues an exception to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the exception, the formatting exception, the message, and original exception will be queued without formatting. No exception will be thrown. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Queues a message to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the message, the message will be queued without formatting. Then, the formatting exception will be re-thrown. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentException Thrown if the message is empty. Open() Opens a FileStream for the current log file. If there is no current log file a new one will be created. public void Open() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Close(), or FlushLogs(). FileNotFoundException The file cannot be found. SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. OpenNewFile() Opens a FileStream for a new log file. The file name will start with the file name prefix, followed by a time stamp and the file name extension. public void OpenNewFile() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as Open(), Close(), or FlushLogs(). SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. SetFileSizeLimit(int) Sets the maximum log file size in bytes. When a log file reaches the size limit, a new file will be created. public void SetFileSizeLimit(int fileSizeLimit) Parameters fileSizeLimit int The maximum file size in bytes. Exceptions ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Events FileClosed Occurs when the FileStream for the current log file is closed. Provides an opportunity to clean up old log files. public event Action FileClosed"
  },
  "api/Switchboard.Logger.html": {
    "href": "api/Switchboard.Logger.html",
    "title": "Class Logger | Switchboard 1.0.0",
    "keywords": "Class Logger Namespace Switchboard Assembly SwitchboardUnity.dll Provides a single, static LoggerRoot and helper methods for standard operations. public static class Logger Inheritance object Logger Properties Root Gets the static logger root. public static LoggerRoot Root { get; } Methods AddUnityLogger() Adds the Unity logger to the logger root. public static void AddUnityLogger() HijackUnityLogHandler() Redirects calls to Unity log methods to the logger root. public static void HijackUnityLogHandler() RemoveUnityLogger() Removes the Unity logger from the logger root. public static void RemoveUnityLogger() ResetUnityLogHandler() Directs calls to Unity log methods to the default log handler. public static void ResetUnityLogHandler()"
  },
  "api/Switchboard.LoggerRoot.html": {
    "href": "api/Switchboard.LoggerRoot.html",
    "title": "Class LoggerRoot | Switchboard 1.0.0",
    "keywords": "Class LoggerRoot Namespace Switchboard Assembly SwitchboardCore.dll Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. public sealed class LoggerRoot : ILogger Inheritance object LoggerRoot Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties LogLevel Gets or sets the overall LogLevel for all log targets within the LoggerRoot. If the LogLevel of a message or exception is less significant, it will not be sent to any log targets. The value may not be immediately accurate across all threads. public LogLevel LogLevel { get; set; } Methods Add(ILogger) Adds an implementation of ILogger to the LoggerRoot as a log target. public bool Add(ILogger logTarget) Parameters logTarget ILogger The logger to add. Returns bool Returns false if the logTarget has already been added to the LoggerRoot, otherwise returns true. Exceptions ArgumentNullException Thrown if the logTarget is null. ArgumentException Thrown if the logTarget is a LoggerRoot. Contains(ILogger) Determines whether a log target has been added. public bool Contains(ILogger logTarget) Parameters logTarget ILogger The logger to search for. Returns bool Returns true if the logTarget is contained within, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. Log(LogLevel, Exception, ReadOnlySpan<char>) Writes an exception to the log. Log targets should never attempt to throw an exception when logging an exception. If a log target throws an exception during the method, it is silently consumed. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Writes a message to the log. If a log target throws an exception, it will be captured until all log targets have had a chance to log, then re-thrown. If multiple exceptions are thrown, they will all be re-thrown as one AggregateException. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Remove(ILogger) Removes a log target. public bool Remove(ILogger logTarget) Parameters logTarget ILogger The logger to remove. Returns bool Returns true if the logTarget was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. RemoveAllTargets() Removes all loggers from the log target list. public void RemoveAllTargets()"
  },
  "api/Switchboard.LogLevel.html": {
    "href": "api/Switchboard.LogLevel.html",
    "title": "Enum LogLevel | Switchboard 1.0.0",
    "keywords": "Enum LogLevel Namespace Switchboard Assembly SwitchboardCore.dll Defines the levels of significance that may be assigned to a log entry. public enum LogLevel Fields Debug = 0 Information = 1 Warning = 2 Error = 3 None = 4"
  },
  "api/Switchboard.ObjectArrayPool.html": {
    "href": "api/Switchboard.ObjectArrayPool.html",
    "title": "Class ObjectArrayPool | Switchboard 1.0.0",
    "keywords": "Class ObjectArrayPool Namespace Switchboard Assembly SwitchboardCore.dll Stores object arrays of a specific length in a thread safe pool. public sealed class ObjectArrayPool Inheritance object ObjectArrayPool Constructors ObjectArrayPool(int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength) Parameters arrayLength int The length of the object arrays to be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength. ObjectArrayPool(int, int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength, int maxCount) Parameters arrayLength int The length of the object arrays to be stored in the pool. maxCount int The maximum number of object arrays that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength, or when maxCount is less than zero. Fields MinArrayLength Represents the smallest possible length of object arrays that can be stored in any ObjectArrayPool. public const int MinArrayLength = 15 Properties ArrayLength Gets the length of the object arrays stored in the pool. public int ArrayLength { get; } Count Gets the current number of object arrays stored in the pool. The value may not be accurate as other threads add and remove arrays from the pool. public int Count { get; } MaxCount Gets the maximum number of object arrays that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } Methods Add(object[]) Adds an object array to the pool, unless the pool is at max capacity. public bool Add(object[] array) Parameters array object[] The object array to add to the pool. Returns bool Returns true if the object array was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the array is null. ArgumentException Thrown if the length of the array does not equal ArrayLength, or if the exact type of the array is not an object array. Clear() Removes all object arrays from the pool. public void Clear() GetArray() Provides an object array with a length equal to the value of ArrayLength. If the pool is empty, a new array is instantiated. Otherwise, an array is provided by removing it from the pool. public object[] GetArray() Returns object[] An object array with a length equal to the value of ArrayLength. SetMaxCount(int) Sets the maximum number of object arrays that can be stored in the pool. The value cannot be set to less than the current Count, unless the value is set to zero. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of object arrays that can be stored in the pool. Exceptions InvalidOperationException Thrown if the maxCount is less than the current Count, and not equal to zero."
  },
  "api/Switchboard.ObjectPool-1.html": {
    "href": "api/Switchboard.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Switchboard 1.0.0",
    "keywords": "Class ObjectPool<T> Namespace Switchboard Assembly SwitchboardCore.dll Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ObjectPool<T> Constructors ObjectPool() Initializes a new instance of the class. public ObjectPool() ObjectPool(int) Initializes a new instance of the class. public ObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class for the specific type T. public static ObjectPool<T> ThreadStaticInstance { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. Clear() Removes all objects from the pool. public void Clear() Contains(T) Returns true if the item's Equals(object) method returns true for an object in the pool. public bool Contains(T item) Parameters item T The object to search for in the pool. Returns bool Returns true if the pool contains the object, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. ForEach(Action<T>) Applies an Action<T> to each object in the pool. public void ForEach(Action<T> action) Parameters action Action<T> The Action<T> to apply to each object. Exceptions ArgumentNullException Thrown if the action is null. Remove(T) Removes a specific object from the pool. Removing an object changes the order of the objects in the pool. If the item's Equals(object) method returns true for an object in the pool, that object is removed. public bool Remove(T item) Parameters item T The object to remove from the pool. Returns bool Returns true if the object was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. RequestObject() Provides an object from the pool, if one is available. public T RequestObject() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity."
  },
  "api/Switchboard.PathUtility.html": {
    "href": "api/Switchboard.PathUtility.html",
    "title": "Class PathUtility | Switchboard 1.0.0",
    "keywords": "Class PathUtility Namespace Switchboard Assembly SwitchboardCore.dll Provides utilities for working with file system paths. public static class PathUtility Inheritance object PathUtility Properties DirectorySeparator Gets the standard directory separator character for the platform, either Windows '\\', or non-Windows '/'. public static char DirectorySeparator { get; } Methods CombinePaths(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePaths(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForNonWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForNonWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. GetFileName(string) Uses a static Dictionary<TKey, TValue> to cache file names parsed from a given path string. The method is thread safe. It calls GetFileName(string) and stores the result. So, if the same filePath is evaluated multiple times, the value is simply retrieved from the cache. public static string GetFileName(string filePath) Parameters filePath string The file path to parse for a file name. Returns string The file name. Exceptions ArgumentNullException Thrown if the filePath is null. ArgumentException Thrown if the filePath is Empty. GetFileNameAndExtension(string, out string, out string) Gets the file name and extension of a given path string. public static int GetFileNameAndExtension(string path, out string fileName, out string extension) Parameters path string The path string to parse. fileName string The file name parsed from the path, or null if not found. extension string The extension parsed from the path, or null if not found. Returns int The index of the last directory separator, or -1 if not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for the platform, or ends with a period on Windows. GetFileNameAndExtensionForNonWindows(string, out string, out string) public static int GetFileNameAndExtensionForNonWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they are not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or if the file name contains an invalid character for non-Windows platforms. GetFileNameAndExtensionForWindows(string, out string, out string) public static int GetFileNameAndExtensionForWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they arenot found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for Windows, or ends with a period. IsDirectorySeparator(char) Determines whether a character is any type of directory separator character. public static bool IsDirectorySeparator(char character) Parameters character char The character to evalute. Returns bool Returns true if the character is a directory separator character, otherwise false. NormalizePath(string) Converts directory separator characters within a path string into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePath(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForNonWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForNonWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidateFileNameCharacters(string) Throws exceptions if any characters in the fileName are invalid file name characters for the current platform. public static void ValidateFileNameCharacters(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForNonWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for a non-Windows platform. public static void ValidateFileNameCharactersForNonWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for the Windows platform. public static void ValidateFileNameCharactersForWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidatePathCharacters(string) Throws exceptions if any characters in the path are invalid path characters for the current platform. public static void ValidatePathCharacters(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForNonWindows(string) Throws exceptions if any characters in the path are invalid path characters for a non-Windows platform. public static void ValidatePathCharactersForNonWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForWindows(string) Throws exceptions if any characters in the path are invalid path characters for the Windows platform. public static void ValidatePathCharactersForWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character."
  },
  "api/Switchboard.PlatformStats.html": {
    "href": "api/Switchboard.PlatformStats.html",
    "title": "Class PlatformStats | Switchboard 1.0.0",
    "keywords": "Class PlatformStats Namespace Switchboard Assembly SwitchboardUnity.dll Provides a string that contains detailed information about the current hardware platform on which the application is running. public static class PlatformStats Inheritance object PlatformStats Methods GetStatLog() Gets a string that contains detailed information about the current hardware platform. public static string GetStatLog() Returns string Returns the string with platform statistics."
  },
  "api/Switchboard.PreciseClock.html": {
    "href": "api/Switchboard.PreciseClock.html",
    "title": "Class PreciseClock | Switchboard 1.0.0",
    "keywords": "Class PreciseClock Namespace Switchboard Assembly SwitchboardCore.dll Provides DateTime values that have the precision of a Stopwatch. public static class PreciseClock Inheritance object PreciseClock Properties Now Gets the last synchronized Now value, plus the Elapsed time since synchronization. public static DateTime Now { get; } UtcNow Gets the last synchronized UtcNow value, plus the Elapsed time since synchronization. public static DateTime UtcNow { get; } Methods SynchronizeWithSystemClock() Synchronizes the UtcNow and Now properties with the system clock. If the difference between the old time and the new time is less than one second, the time will not be changed. public static void SynchronizeWithSystemClock()"
  },
  "api/Switchboard.PriorityEvent-1.html": {
    "href": "api/Switchboard.PriorityEvent-1.html",
    "title": "Class PriorityEvent<T> | Switchboard 1.0.0",
    "keywords": "Class PriorityEvent<T> Namespace Switchboard Assembly SwitchboardCore.dll Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. public sealed class PriorityEvent<T> Type Parameters T The type of event data that will be passed to observers when the event is invoked. Inheritance object PriorityEvent<T> Constructors PriorityEvent() Initializes a new instance of the class. public PriorityEvent() PriorityEvent(int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity) Parameters handlerCapacity int The initial capacity for observers. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity is less than zero. PriorityEvent(int, int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity, int priorityCapacity) Parameters handlerCapacity int The initial capacity for observers. priorityCapacity int The initial capacity for priority values. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity or priorityCapacity are less than zero. Methods Add(InputAction<T>) Adds an observer event handler to the event with the default priority value of zero. Duplicate event handlers are never added. public void Add(InputAction<T> handler) Parameters handler InputAction<T> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. Add(InputAction<T>, int) Adds an observer event handler to the event with the specified priority value. Duplicate event handlers are never added. public void Add(InputAction<T> handler, int priority) Parameters handler InputAction<T> The observer event handler to add. priority int The order in which the event handler will be called. Event handlers with lower priority are called before those with higher priority. Exceptions ArgumentNullException Thrown if the handler is null. Invoke(in T) Invokes the event. public void Invoke(in T parameters) Parameters parameters T The event data that will passed to observer event handlers. Exceptions InvalidOperationException Thrown if the event is invoked while the previous invocation is still in progress. Remove(InputAction<T>) Removes a specific observer event handler from invocation. public void Remove(InputAction<T> handler) Parameters handler InputAction<T> The observer event handler to remove. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.SharedObjectArrayPool.html": {
    "href": "api/Switchboard.SharedObjectArrayPool.html",
    "title": "Class SharedObjectArrayPool | Switchboard 1.0.0",
    "keywords": "Class SharedObjectArrayPool Namespace Switchboard Assembly SwitchboardCore.dll A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. public static class SharedObjectArrayPool Inheritance object SharedObjectArrayPool Methods GetPoolForLength(int) Provides a static ObjectArrayPool instance that stores object arrays of the requested length. The only recognized length values are 32, 64, 128, 256. public static ObjectArrayPool GetPoolForLength(int arrayLength) Parameters arrayLength int The length of the arrays stored in the requested ObjectArrayPool. Returns ObjectArrayPool A static ObjectArrayPool instance that stores object arrays of the specified arrayLength. Exceptions ArgumentException Thrown if the arrayLength value is anything other than 32, 64, 128, 256."
  },
  "api/Switchboard.StandardDependencyInjector.html": {
    "href": "api/Switchboard.StandardDependencyInjector.html",
    "title": "Class StandardDependencyInjector | Switchboard 1.0.0",
    "keywords": "Class StandardDependencyInjector Namespace Switchboard Assembly SwitchboardUnity.dll Provides a standard implementation of DependencyInjector. [CreateAssetMenu(fileName = \"StandardDependencyInjector\", menuName = \"Switchboard/Standard Dependency Injector\", order = 1080)] public class StandardDependencyInjector : DependencyInjector, IInjector Inheritance object Object ScriptableObject DependencyInjector StandardDependencyInjector Implements IInjector Inherited Members DependencyInjector.IsActive DependencyInjector.Activate() DependencyInjector.Deactivate() DependencyInjector.Inject<T>(out T) Properties LogFileManager Gets the LogFileManager that was provided by GetLogFileManager() at Activation(), or null if not active. protected LogFileManager LogFileManager { get; } Methods Activation() Starts a new log file, and creates a ClockSynchronizer. protected override void Activation() Deactivation() Stops writing log files. protected override void Deactivation() GetInstanceOf(Type) Gets a reference to an instance of the requested type. protected override object GetInstanceOf(Type type) Parameters type Type The type of object requested. Returns object Returns an object reference to an instance of the requested type, or null if none can be provided. GetLogFileManager() Gets the LogFileManager instance to use. Override it to customize log files. protected virtual LogFileManager GetLogFileManager() Returns LogFileManager Returns the log file manager to use."
  },
  "api/Switchboard.StandardLogFormatter.html": {
    "href": "api/Switchboard.StandardLogFormatter.html",
    "title": "Class StandardLogFormatter | Switchboard 1.0.0",
    "keywords": "Class StandardLogFormatter Namespace Switchboard Assembly SwitchboardCore.dll Provides a standard implementation of the ILogFormatter interface. public sealed class StandardLogFormatter : ILogFormatter Inheritance object StandardLogFormatter Implements ILogFormatter Properties StaticInstance Gets a static instance of the class. public static StandardLogFormatter StaticInstance { get; } Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. public void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.StringMaker.html": {
    "href": "api/Switchboard.StringMaker.html",
    "title": "Class StringMaker | Switchboard 1.0.0",
    "keywords": "Class StringMaker Namespace Switchboard Assembly SwitchboardCore.dll Represents a string of characters that can be modified without allocating memory for garbage collection. public sealed class StringMaker Inheritance object StringMaker Extension Methods StringMakerUnityExtensions.Append(StringMaker, Bounds) StringMakerUnityExtensions.Append(StringMaker, BoundsInt) StringMakerUnityExtensions.Append(StringMaker, Color) StringMakerUnityExtensions.Append(StringMaker, Rect) StringMakerUnityExtensions.Append(StringMaker, RectInt) StringMakerUnityExtensions.Append(StringMaker, Vector2) StringMakerUnityExtensions.Append(StringMaker, Vector2Int) StringMakerUnityExtensions.Append(StringMaker, Vector3) StringMakerUnityExtensions.Append(StringMaker, Vector3Int) StringMakerUnityExtensions.Append(StringMaker, Vector4) Fields AppendAction Gets the static ReadOnlySpanAction<T, TArg> instance used to append a character Span<T> to a StringMaker. public static readonly ReadOnlySpanAction<char, StringMaker> AppendAction CharacterArrayPool Gets the static ThreadSafeObjectPool<T> of character arrays used as memory pages by all StringMaker instances. The pool is made public to simplify memory management, such as setting the MaxCount. Adding or removing character arrays from the pool for other reasons is not recommended. Character arrays from the pool are not cleared before use, only after, and if their length is not PageLength they are discarded for garbage collection. public static readonly ThreadSafeObjectPool<char[]> CharacterArrayPool CopyAction Gets the static SpanAction<T, TArg> instance used to copy the contents of a StringMaker to a character Span<T>. public static readonly SpanAction<char, StringMaker> CopyAction MaxCapacity Gets the maximum number of characters that can be stored per StringMaker instance. The value is the result of MaxPages * PageLength. Converting characters, which occupy two bytes, into a UTF-8 byte array can require up to three bytes per character. The character limit ensures that the maximum necessary size of a UTF-8 byte array is under 85kB, avoiding the large object heap. public const int MaxCapacity = 27648 MaxPages Gets the maximum number of pages that can be allocated per StringMaker instance. public const int MaxPages = 27 PageLength Gets the number of characters that can be stored per page of internal memory. Memory is allocated internally as character arrays of the specified fixed size, referred to as pages. public const int PageLength = 1024 Properties Capacity Gets the current Length of characters that can be set without borrowing or allocating new memory. public int Capacity { get; } this[int] Gets or sets the character at a specific index. public char this[int index] { get; set; } Parameters index int The character index. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static StringMaker ThreadStaticInstance { get; } Methods Append(bool) Appends a boolean value. public StringMaker Append(bool value) Parameters value bool The boolean value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMaker Append(char value) Parameters value char The character to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMaker Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMaker Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMaker Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMaker Append(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Append(long) Appends a long integer. public StringMaker Append(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMaker Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMaker Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMaker Append(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMaker Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(byte) Appends a byte as a binary value. public StringMaker AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(short) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The numberto append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(int) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(long) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMaker AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMaker AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMaker AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(uint) Appends an unsigned integer. public StringMaker AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMaker AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. AppendLine() Appends the NewLine character(s). public StringMaker AppendLine() Returns StringMaker Returns the instance, enabling a fluent interface. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMaker AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Clear() Clears and releases all memory pages. public StringMaker Clear() Returns StringMaker Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> EnsureCapacity(int) Allocates enough internal memory to store the specified number of characters. public int EnsureCapacity(int capacity) Parameters capacity int The total number of characters for which to ensure capacity. Returns int The actual allocated character capacity, may be more than requested. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. TrimExcess() Releases excess memory pages to the CharacterArrayPool, and clears characters by setting to '\\0' from the Length index to the end of the page. public StringMaker TrimExcess() Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerHandle.html": {
    "href": "api/Switchboard.StringMakerHandle.html",
    "title": "Struct StringMakerHandle | Switchboard 1.0.0",
    "keywords": "Struct StringMakerHandle Namespace Switchboard Assembly SwitchboardCore.dll Provides a readonly ref struct facade for StringMaker. public readonly ref struct StringMakerHandle Constructors StringMakerHandle(StringMaker) Initializes a new instance with the stringMaker as the internal reference. public StringMakerHandle(StringMaker stringMaker) Parameters stringMaker StringMaker The StringMaker to contain within the StringMakerHandle. Properties this[int] Gets or sets the character at a specific index. public char this[int index] { get; } Parameters index int The character index. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; } Methods Append(bool) Appends a boolean value. public StringMakerHandle Append(bool value) Parameters value bool The boolean value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMakerHandle Append(char value) Parameters value char The character to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMakerHandle Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMakerHandle Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMakerHandle Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMakerHandle Append(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(long) Appends a long integer. public StringMakerHandle Append(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMakerHandle Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMakerHandle Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMakerHandle Append(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMakerHandle Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(byte) Appends a byte as a binary value. public StringMakerHandle AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(short) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(int) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(long) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMakerHandle AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMakerHandle AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMakerHandle AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(uint) Appends an unsigned integer. public StringMakerHandle AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMakerHandle AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendLine() Appends the NewLine character(s). public StringMakerHandle AppendLine() Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMakerHandle AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerILoggerExtensions.html": {
    "href": "api/Switchboard.StringMakerILoggerExtensions.html",
    "title": "Class StringMakerILoggerExtensions | Switchboard 1.0.0",
    "keywords": "Class StringMakerILoggerExtensions Namespace Switchboard Assembly SwitchboardCore.dll Provides extension methods for the ILogger interface to accept StringMaker messages. public static class StringMakerILoggerExtensions Inheritance object StringMakerILoggerExtensions Methods Log(ILogger, LogLevel, StringMaker, string, string, int) Logs a StringMaker message. public static void Log(this ILogger logger, LogLevel logLevel, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the message. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.StringMakerUnityExtensions.html": {
    "href": "api/Switchboard.StringMakerUnityExtensions.html",
    "title": "Class StringMakerUnityExtensions | Switchboard 1.0.0",
    "keywords": "Class StringMakerUnityExtensions Namespace Switchboard Assembly SwitchboardUnity.dll Provides extension methods for StringMaker to append common Unity types. public static class StringMakerUnityExtensions Inheritance object StringMakerUnityExtensions Methods Append(StringMaker, Bounds) Appends a Bounds value. public static StringMaker Append(this StringMaker stringMaker, Bounds value) Parameters stringMaker StringMaker The StringMaker. value Bounds The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, BoundsInt) Appends a BoundsInt value. public static StringMaker Append(this StringMaker stringMaker, BoundsInt value) Parameters stringMaker StringMaker The StringMaker. value BoundsInt The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Color) Appends a Color value. public static StringMaker Append(this StringMaker stringMaker, Color value) Parameters stringMaker StringMaker The StringMaker. value Color The color to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Rect) Appends a Rect value. public static StringMaker Append(this StringMaker stringMaker, Rect value) Parameters stringMaker StringMaker The StringMaker. value Rect The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, RectInt) Appends a RectInt value. public static StringMaker Append(this StringMaker stringMaker, RectInt value) Parameters stringMaker StringMaker The StringMaker. value RectInt The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2) Appends a Vector2 value. public static StringMaker Append(this StringMaker stringMaker, Vector2 value) Parameters stringMaker StringMaker The StringMaker. value Vector2 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2Int) Appends a Vector2Int value. public static StringMaker Append(this StringMaker stringMaker, Vector2Int value) Parameters stringMaker StringMaker The StringMaker. value Vector2Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3) Appends a Vector3 value. public static StringMaker Append(this StringMaker stringMaker, Vector3 value) Parameters stringMaker StringMaker The StringMaker. value Vector3 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3Int) Appends a Vector3Int value. public static StringMaker Append(this StringMaker stringMaker, Vector3Int value) Parameters stringMaker StringMaker The StringMaker. value Vector3Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector4) Appends a Vector4 value. public static StringMaker Append(this StringMaker stringMaker, Vector4 value) Parameters stringMaker StringMaker The StringMaker. value Vector4 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.SwitchboardMenuOrder.html": {
    "href": "api/Switchboard.SwitchboardMenuOrder.html",
    "title": "Class SwitchboardMenuOrder | Switchboard 1.0.0",
    "keywords": "Class SwitchboardMenuOrder Namespace Switchboard Assembly SwitchboardUnity.dll Provides Switchboard's order in the asset creation menu. public static class SwitchboardMenuOrder Inheritance object SwitchboardMenuOrder Fields Value Gets Switchboard's order in the asset creation menu. public const int Value = 1080"
  },
  "api/Switchboard.TheTypeOf-1.html": {
    "href": "api/Switchboard.TheTypeOf-1.html",
    "title": "Class TheTypeOf<T> | Switchboard 1.0.0",
    "keywords": "Class TheTypeOf<T> Namespace Switchboard Assembly SwitchboardCore.dll Provides a generic, static cache for the results of the typeof operator. public static class TheTypeOf<T> Type Parameters T The type to convert into a Type instance. Inheritance object TheTypeOf<T> Properties Type Gets the Type instance that corresponds to the type of T. public static Type Type { get; }"
  },
  "api/Switchboard.ThreadSafeObjectPool-1.html": {
    "href": "api/Switchboard.ThreadSafeObjectPool-1.html",
    "title": "Class ThreadSafeObjectPool<T> | Switchboard 1.0.0",
    "keywords": "Class ThreadSafeObjectPool<T> Namespace Switchboard Assembly SwitchboardCore.dll Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ThreadSafeObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ThreadSafeObjectPool<T> Constructors ThreadSafeObjectPool() Initializes a new instance of the class. public ThreadSafeObjectPool() ThreadSafeObjectPool(int) Initializes a new instance of the class. public ThreadSafeObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ThreadSafeObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. The value may not be accurate as other threads add and remove objects. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } StaticInstance Gets a static instance of the class for the specific type T. public static ThreadSafeObjectPool<T> StaticInstance { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if item is null. Clear() Removes all objects from the pool. public void Clear() RequestObject() Provides an object from the pool, if one is available. public T RequestObject() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. The method is thread safe, but may be slow if many objects are stored in the pool when the value is reduced. It could cause other threads to become locked if they are also attempting to operate on the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity."
  },
  "api/Switchboard.Ticker.html": {
    "href": "api/Switchboard.Ticker.html",
    "title": "Class Ticker | Switchboard 1.0.0",
    "keywords": "Class Ticker Namespace Switchboard Assembly SwitchboardUnity.dll Invokes an event once per update. public sealed class Ticker : MonoBehaviour, ITicker Inheritance object Object Component Behaviour MonoBehaviour Ticker Implements ITicker Methods StartTick(InputAction<FrameOfTime>) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. StartTick(InputAction<FrameOfTime>, int) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameOfTime> handler, int priority) Parameters handler InputAction<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(InputAction<FrameOfTime>) Removes an observer event handler from the Tick event. public void StopTick(InputAction<FrameOfTime> handler) Parameters handler InputAction<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.TickerRoot.html": {
    "href": "api/Switchboard.TickerRoot.html",
    "title": "Class TickerRoot | Switchboard 1.0.0",
    "keywords": "Class TickerRoot Namespace Switchboard Assembly SwitchboardUnity.dll Provides a static, root instance of all types of ticker that lazy loads as necessary, and manages its own life cycle within the editor. public sealed class TickerRoot : ITicker, ILateTicker, IFixedTicker Inheritance object TickerRoot Implements ITicker ILateTicker IFixedTicker Properties Instance Gets the single, static instance of this class. public static TickerRoot Instance { get; } Methods StartFixedTick(InputAction<FrameData>) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartFixedTick(InputAction<FrameData>, int) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public void StartFixedTick(InputAction<FrameData> handler, int priority) Parameters handler InputAction<FrameData> The observer event handler to add. priority int The order in which this event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartLateTick(InputAction<FrameData>) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartLateTick(InputAction<FrameData>, int) Adds an observer event handler to the LateTick event, invoked once per late update. public void StartLateTick(InputAction<FrameData> handler, int priority) Parameters handler InputAction<FrameData> The observer event handler to add. priority int The order in which this event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartTick(InputAction<FrameData>) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StartTick(InputAction<FrameData>, int) Adds an observer event handler to the Tick event, invoked once per update. public void StartTick(InputAction<FrameData> handler, int priority) Parameters handler InputAction<FrameData> The event handler to add. priority int The order in which this event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if IsRunning is false, or the application is quitting. StopFixedTick(InputAction<FrameData>) Removes an observer event handler from the FixedTick event. public void StopFixedTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopLateTick(InputAction<FrameData>) Removes an observer event handler from the LateTick event. public void StopLateTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(InputAction<FrameData>) Removes an observer event handler from the Tick event. public void StopTick(InputAction<FrameData> handler) Parameters handler InputAction<FrameData> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.UnityLogger.html": {
    "href": "api/Switchboard.UnityLogger.html",
    "title": "Class UnityLogger | Switchboard 1.0.0",
    "keywords": "Class UnityLogger Namespace Switchboard Assembly SwitchboardUnity.dll An implementation of ILogger that targets the UnityLogger. public sealed class UnityLogger : ILogger Inheritance object UnityLogger Implements ILogger Extension Methods ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties DisplayCallerInfo Gets or sets whether information about the caller of log method should be displayed. public bool DisplayCallerInfo { get; set; } Instance Gets the single, static instance of the class. public static UnityLogger Instance { get; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.UnityLogHandler.html": {
    "href": "api/Switchboard.UnityLogHandler.html",
    "title": "Class UnityLogHandler | Switchboard 1.0.0",
    "keywords": "Class UnityLogHandler Namespace Switchboard Assembly SwitchboardUnity.dll Provides a reference to the default Unity log handler. public static class UnityLogHandler Inheritance object UnityLogHandler Properties Default Gets the default Unity log handler. public static ILogHandler Default { get; } Methods Initialize() Initializes the class. It is called automatically when the application starts. [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)] public static void Initialize()"
  },
  "api/Switchboard.UnityLogHijacker.html": {
    "href": "api/Switchboard.UnityLogHijacker.html",
    "title": "Class UnityLogHijacker | Switchboard 1.0.0",
    "keywords": "Class UnityLogHijacker Namespace Switchboard Assembly SwitchboardUnity.dll Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. public sealed class UnityLogHijacker : ILogHandler Inheritance object UnityLogHijacker Implements ILogHandler Constructors UnityLogHijacker(ILogger) Initializes a new instance of the class. public UnityLogHijacker(ILogger logger) Parameters logger ILogger The logger to be used instead of the Unity logger. Methods LogException(Exception, Object) Logs an exception message. public void LogException(Exception exception, Object context) Parameters exception Exception Runtime Exception. context Object The UnityEngine.Object to which the exception applies. LogFormat(LogType, Object, string, params object[]) Logs a formatted message. public void LogFormat(LogType logType, Object context, string format, params object[] args) Parameters logType LogType The type of log message. context Object The UnityEngine.Object to which the message applies. format string A composite format string. args object[] Format arguments."
  },
  "index.html": {
    "href": "index.html",
    "title": "Switchboard | Switchboard 1.0.0",
    "keywords": "Switchboard Switchboard is an application framework for the Unity game engine. It provides a composition root so you can define what happens when the application runs, regardless of which scenes are loaded. Also, dependency injection so your classes can have loose dependencies that are automatically injected at run time. It even works when adding new objects to a scene at run time. You don't need Monobehaviour singletons or special scenes to load first! It just works! No reflection! No baking! Any object you create, meaning any non-MonoBehaviour, can be automatically updated with the game loop. The core library provides persistent log files, and garbage-free string manipulation to any C# application, not just Unity. Every feature has been meticulously crafted for maximum stability and performance. Unity Switchboard is a Unity framework for composing your application and injecting dependencies automatically when scenes load. Composition Root Automatic Dependency Injection Update Any Object Encourages Best Practices, S.O.L.I.D. Programming, Loose Coupling, Clean Code Architecture C# Core The core library contains Unity-independent features that can be used in any C# application. High Performance Log Files A Better StringBuilder Eliminates Garbage Collection"
  },
  "manual/feedback.html": {
    "href": "manual/feedback.html",
    "title": "Feedback | Switchboard 1.0.0",
    "keywords": "Feedback If you have any feedback please email me at rmoon@swipetrack.com."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Switchboard | Switchboard 1.0.0",
    "keywords": "Switchboard Switchboard is an application framework for the Unity game engine. It provides a composition root so you can define what happens when the application runs, regardless of which scenes are loaded. Also, dependency injection so your classes can have loose dependencies that are automatically injected at run time. It even works when adding new objects to a scene at run time. You don't need Monobehaviour singletons or special scenes to load first! It just works! No reflection! No baking! Any object you create, meaning any non-MonoBehaviour, can be automatically updated with the game loop. The core library provides persistent log files, and garbage-free string manipulation to any C# application, not just Unity. Every feature has been meticulously crafted for maximum stability and performance. Unity Switchboard is a Unity framework for composing your application and injecting dependencies automatically when scenes load. Composition Root Automatic Dependency Injection Update Any Object Encourages Best Practices, S.O.L.I.D. Programming, Loose Coupling, Clean Code Architecture C# Core The core library contains Unity-independent features that can be used in any C# application. High Performance Log Files A Better StringBuilder Eliminates Garbage Collection"
  },
  "manual/roadmap.html": {
    "href": "manual/roadmap.html",
    "title": "| Switchboard 1.0.0",
    "keywords": "Update Documentation The documentation always has room for improvement. I intend to add more articles as time permits, but if you have specific questions, please direct them to me via the channels provided in the Feedback section. Configuration One sub-module of this framework that did not make it into version 1.0.0 is for Configuration, using definable configuration sources, with a standard configuration source implementation provided that uses .ini files. This would be a nice fit for the framework as it would easily allow configuration of the logger, so that log level and other properties could be changed and persist via local config. Garbage Free Events While working on the Configuration module, I decided that I wanted to implement much of the interface using events. However, while researching events and delegates closely I determined that a lot of garbage memory is allocated when adding and removing observers via the normal process typically used in .NET. I am working on a way of implementing event handlers that do not allocate any memory for garbage collection unnecessarily simply for adding and removing observers of an event."
  },
  "manual/setup.html": {
    "href": "manual/setup.html",
    "title": "| Switchboard 1.0.0",
    "keywords": "Basic Setup Open the Switchboard menu in the project settings window. This will automatically create a composition root asset located at Switchboard/Resources/CompositionRoot.asset. This asset is required by Switchboard at run time. The name of the file cannot be changed, but it can be relocated to any Resources directory. Disable the \"Log Null Injector Error\" option, or assign a dependency injector asset. Example dependency injectors can be found in the Switchboard/Example/DependencyInjectors directory. Example Open the SwitchboardExample scene. Assign one of the example dependency injector assets located at Switchboard/Example/DependencyInjectors/ to the Dependency Injector field of the composition root asset in the Switchboard project settings menu. Press play. See how the color and position of the Example Renderer game object are provided automatically by the example model assigned to the dependency injector. Change the color and properties of the example model in the dependency injector. See how the color and motion of the Example Renderer change in real time according to your changes. Assign the other example model asset, located at Switchboard/Example/Assets/, to the dependency injector. If ExampleModelA is assigned to the Model field, assign ExampleModelB, or vice versa. Drag the Example Renderer prefab, located at Switchboard/Example/Assets/, to the scene hierarchy. See how the color of the new Example Renderer object matches the Color property of the newly assigned example model asset, but the object does not move. This is because the dependency injector began updating the example model that was assigned when the application started running. The newly assigned example model was never told to update. It is still provided to new objects that request a model, and the current color value can be retreived. Be aware of this potential when creating a custom dependency injector. Assign the original model asset back to the dependency injector. Assign the other dependency injector asset to the Dependency Injector field of the composition root asset in the Switchboard project settings menu. Drag the Example Renderer prefab to the scene hierarchy. See how the newly created object receives the model that was assigned to the original dependency injector. The dependency injector referenced by the composition root cannot actually be changed at run time, even though a different injector can be assigned in the editor. Be aware that the composition root maintains a reference to the original dependency injector asset. Stop play. Open the UnityEngine.Application.persistentDataPath directory and examine the log file. Create a Custom Dependency Injector View the ExampleInjectorDerived and ExampleInjectorBase classes located at Switchboard/Example/Scripts/. The ExampleInjectorDerived class provides an example for creating a custom dependency injector that derives from the StandardDependencyInjector class. The StandardDependencyInjector provides standard, basic functionality, such as log files, a Ticker interface for updating any object, and synchronizes the PreciseClock with the system clock every two seconds. The PreciseClock is used by the standard log file formatter to apply time stamps to log entries. The ExampleInjectorBase class provides an example for creating a custom dependency injector that derives directly from the abstract DependencyInjector class. That way, the definition of what happens in the composition root at start up and shut down can be fully customized. The ExampleInjectorBase class includes a basic replication of how the StandardDependencyInjector works. Create a new C# script and provide the class name of the custom dependency injector. Open the script and change the class to derive from either StandardDependencyInjector, or DependencyInjector. Remove any predefined MonoBehaviour methods. Override the Activation(), Deactivation(), and GetInstanceOf(Type) methods. If you derive from StandardDependencyInjector, call base.Activation() at the start of the Activation method, and base.Deactivation() at the end of the Deactivation() method. Also, return base.GetInstanceOf(type) at the end of the GetInstancOf(Type) method. The Activation() method will run when the application starts, before the first scene is fully loaded, before Awake(), OnEnable(), Start() or other methods are called on objects in the scene. You can create game objects and they will be added to the first scene that is loaded. However, it shouldn't usually be necessary to create game objects or MonoBehaviours. That's the whole reason for this framework! The Deactivation() method will be run when the application is quitting, but it is not guaranteed. Don't assume that Deactivation() will run in all cases. If the application closes suddenly, it is possible that this method may not be invoked. However, this method is where everything that was spun up during Activation() can also be shut down when play is stopped in the editor. The GetInstanceOfType(Type) method provides an instance of the requested Type of object, if the dependency injector has been activated. This method will not be invoked until Activation() has occurred and Deactivation() has not. The ExampleInjectorBase class provides examples of how type comparisons may be handled. The Type argument will never be null, it will always be a reference type, and it can be compared for equality with a result of the typeof operator. However, typeof will perform an operation each time, the result of which can be cached. Switchboard provides a generic, static class called TheTypeOf that automatically creates a static Type variable representing the cached result of the typeof operator for any type. This provides a small performance increase over using the typeof operator each time. Also, the IsAssignableFrom(Type) method can be invoked on the type argument for a more flexible comparison of whether a type of object may be assigned to the requested type, whether that it be the type itself, a base class, or an interface it implements."
  }
}