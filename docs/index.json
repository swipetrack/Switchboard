{
  "api/Switchboard.ActionWithInput-1.html": {
    "href": "api/Switchboard.ActionWithInput-1.html",
    "title": "Delegate ActionWithInput<T> | Switchboard",
    "keywords": "Delegate ActionWithInput<T> Namespace Switchboard Assembly Switchboard.ActionWithInput.dll Represents a type of delegate similar to Action<T>, but using an in parameter as a readonly reference. Because the parameter is an in parameter, the type argument must be invariant, it cannot be contravariant like Action<T>. public delegate void ActionWithInput<T>(in T input) Parameters input T The in parameter for the delegate method. Type Parameters T The type of in parameter for the delegate method."
  },
  "api/Switchboard.ApplicationEnd.html": {
    "href": "api/Switchboard.ApplicationEnd.html",
    "title": "Class ApplicationEnd | Switchboard",
    "keywords": "Class ApplicationEnd Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. public static class ApplicationEnd Inheritance object ApplicationEnd Methods Add(Action) Adds an observer Action to an event that is invoked near the very end of the application. public static void Add(Action handler) Parameters handler Action The Action to add to the event. Exceptions ArgumentNullException Thrown if handler is null. InvalidOperationException Thrown if the application is not playing. Remove(Action) Removes an observer Action from the application end event. public static void Remove(Action handler) Parameters handler Action The Action to remove from the event. Exceptions ArgumentNullException Thrown if handler is null."
  },
  "api/Switchboard.ApplicationPlatform.html": {
    "href": "api/Switchboard.ApplicationPlatform.html",
    "title": "Class ApplicationPlatform | Switchboard",
    "keywords": "Class ApplicationPlatform Namespace Switchboard Assembly Switchboard.PlatformFlags.dll Provides helper methods for getting a PlatformFlags value for the current platform. public static class ApplicationPlatform Inheritance object ApplicationPlatform Properties Flag Gets the PlatformFlags value for the current platform. public static PlatformFlags Flag { get; } Methods GetFlag(RuntimePlatform) Converts the value of a UnityEngine.RuntimePlatform argument into a corresponding PlatformFlags value. public static PlatformFlags GetFlag(this RuntimePlatform runtimePlatform) Parameters runtimePlatform RuntimePlatform The platform to convert into a flag. Returns PlatformFlags Returns a PlatformFlags value that corresponds to the runtimePlatform."
  },
  "api/Switchboard.ApplicationTicker.html": {
    "href": "api/Switchboard.ApplicationTicker.html",
    "title": "Class ApplicationTicker | Switchboard",
    "keywords": "Class ApplicationTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Provides a static root for lazy loaded object tickers that correspond to Update(), LateUpdate(), and FixedUpdate(). public static class ApplicationTicker Inheritance object ApplicationTicker Properties FixedTicker Gets a static FixedTicker instance, which is lazy loaded if necessary. public static FixedTicker FixedTicker { get; } Exceptions InvalidOperationException Thrown if the application is not playing or is quitting. LateTicker Gets a static LateTicker instance, which is lazy loaded if necessary. public static LateTicker LateTicker { get; } Exceptions InvalidOperationException Thrown if the application is not playing or is quitting. Ticker Gets a static Ticker instance, which is lazy loaded if necessary. public static Ticker Ticker { get; } Exceptions InvalidOperationException Thrown if the game is not playing or is quitting. Methods StartFixedTick(ActionWithInput<FrameOfTime>) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public static void StartFixedTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartFixedTick(ActionWithInput<FrameOfTime>, int) Adds an observer event handler to the FixedTick event, invoked once per fixed update. public static void StartFixedTick(ActionWithInput<FrameOfTime> handler, int priority) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartLateTick(ActionWithInput<FrameOfTime>) Adds an observer event handler to the LateTick event, invoked once per late update. public static void StartLateTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartLateTick(ActionWithInput<FrameOfTime>, int) Adds an observer event handler to the LateTick event, invoked once per late update. public static void StartLateTick(ActionWithInput<FrameOfTime> handler, int priority) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartTick(ActionWithInput<FrameOfTime>) Adds an observer event handler to the Tick event, invoked once per update. public static void StartTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StartTick(ActionWithInput<FrameOfTime>, int) Adds an observer event handler to the Tick event, invoked once per update. public static void StartTick(ActionWithInput<FrameOfTime> handler, int priority) Parameters handler ActionWithInput<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. InvalidOperationException Thrown if the application is not playing or is quitting. StopFixedTick(ActionWithInput<FrameOfTime>) Removes an observer event handler from the FixedTick event. public static void StopFixedTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopLateTick(ActionWithInput<FrameOfTime>) Removes an observer event handler from the LateTick event. public static void StopLateTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(ActionWithInput<FrameOfTime>) Removes an observer event handler from the Tick event. public static void StopTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.CompositionRoot.html": {
    "href": "api/Switchboard.CompositionRoot.html",
    "title": "Class CompositionRoot | Switchboard",
    "keywords": "Class CompositionRoot Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Loads the CompositionRootAsset and initializes the DependencyInjector. public static class CompositionRoot Inheritance object CompositionRoot"
  },
  "api/Switchboard.CompositionRootAsset.html": {
    "href": "api/Switchboard.CompositionRootAsset.html",
    "title": "Class CompositionRootAsset | Switchboard",
    "keywords": "Class CompositionRootAsset Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. [CreateAssetMenu(fileName = \"CompositionRoot\", menuName = \"Switchboard/Composition Root\", order = 1080)] public sealed class CompositionRootAsset : ScriptableObject Inheritance object Object ScriptableObject CompositionRootAsset Fields DependencyInjector [Space] [Tooltip(\"The DependencyInjector to initialize when the application starts.\")] public DependencyInjector DependencyInjector FileName The only relevant file name for a CompositionRootAsset. public const string FileName = \"CompositionRoot\" LogNullInjectorError [Tooltip(\"If true, and the DependencyInjector is null, an error will be logged when the application starts.\")] public bool LogNullInjectorError"
  },
  "api/Switchboard.DateTimeToTextConverter.html": {
    "href": "api/Switchboard.DateTimeToTextConverter.html",
    "title": "Class DateTimeToTextConverter | Switchboard",
    "keywords": "Class DateTimeToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts a DateTime value into a string of characters without allocating memory for garbage collection. public static class DateTimeToTextConverter Inheritance object DateTimeToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent a DateTime value. public const int MaxCharacterCount = 27 Methods ConvertToText(DateTime, Span<char>) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(DateTime, Span<char>, int) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result, int subSecondPrecision) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. subSecondPrecision int The number of digits to display for fractions of a second. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this DateTime value, T argument, ReadOnlySpanAction<char, T> action) Parameters value DateTime The DateTime to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>, int) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this DateTime value, T argument, ReadOnlySpanAction<char, T> action, int subSecondPrecision) Parameters value DateTime The DateTime to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. subSecondPrecision int The number of digits to display for fractions of a second. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null."
  },
  "api/Switchboard.DependencyInjector.html": {
    "href": "api/Switchboard.DependencyInjector.html",
    "title": "Class DependencyInjector | Switchboard",
    "keywords": "Class DependencyInjector Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides a base representation for a Unity asset that can activate, provide instances of types, then deactivate. public abstract class DependencyInjector : ScriptableObject, IInjector Inheritance object Object ScriptableObject DependencyInjector Implements IInjector Properties CurrentState The current state of this instance. public DependencyInjector.State CurrentState { get; } Methods Activate() Calls Activation() if the CurrentState is Inactive. public void Activate() Activation() Invoked when Activate() is called if the CurrentState is Inactive. protected abstract void Activation() Deactivate() Calls Deactivation() if the CurrentState is Active or ActiveWithException. This means that Deactivation() will be called even if an exception was thrown from Activation(). public void Deactivate() Deactivation() Invoked when Deactivate() is called if the CurrentState is Active or ActiveWithException. It may not be called at all if the application exits unexpectedly. protected abstract void Deactivation() Get<T>() Provides an instance of the requested type. public abstract T Get<T>() where T : class Returns T Returns a reference to the requested type, or null. Type Parameters T The type of object requested."
  },
  "api/Switchboard.DependencyInjector.State.html": {
    "href": "api/Switchboard.DependencyInjector.State.html",
    "title": "Enum DependencyInjector.State | Switchboard",
    "keywords": "Enum DependencyInjector.State Namespace Switchboard Assembly Switchboard.DependencyInjection.dll The various states that a DependencyInjector can have while activating and deactivating. public enum DependencyInjector.State Fields Inactive = 0 Activating = 1 Deactivating = 2 ActiveWithException = 3 Active = 4"
  },
  "api/Switchboard.Destructor.html": {
    "href": "api/Switchboard.Destructor.html",
    "title": "Class Destructor | Switchboard",
    "keywords": "Class Destructor Namespace Switchboard Assembly Switchboard.DependencyInjection.dll A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. [DefaultExecutionOrder(32000)] public class Destructor : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Destructor Events Destroyed The event invoked when OnDestroy() is called. public event Action Destroyed"
  },
  "api/Switchboard.DynamicQueue-1.html": {
    "href": "api/Switchboard.DynamicQueue-1.html",
    "title": "Class DynamicQueue<T> | Switchboard",
    "keywords": "Class DynamicQueue<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class DynamicQueue<T> where T : class Type Parameters T Inheritance object DynamicQueue<T> Properties Count Gets the number of objects currently stored in the queue. public int Count { get; } Methods Add(T) Adds an object to the queue. public void Add(T item) Parameters item T The object to add. Exceptions ArgumentNullException Thrown if item is null. InvalidOperationException Thrown if the Count is at MaxValue. Clear() Removes all items from the queue. public void Clear() Next() Gets the next object in the queue by removing it. public T Next() Returns T Returns the next object in the queue, or null if the queue is empty. Peek() Gets the next object in the queue without removing it. public T Peek() Returns T Returns the next object in the queue, or null if the queue is empty."
  },
  "api/Switchboard.ExpandableAttribute.html": {
    "href": "api/Switchboard.ExpandableAttribute.html",
    "title": "Class ExpandableAttribute | Switchboard",
    "keywords": "Class ExpandableAttribute Namespace Switchboard Assembly Switchboard.ExpandableAttribute.dll Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. public sealed class ExpandableAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute ExpandableAttribute"
  },
  "api/Switchboard.FileRemover.html": {
    "href": "api/Switchboard.FileRemover.html",
    "title": "Class FileRemover | Switchboard",
    "keywords": "Class FileRemover Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides methods for removing excess files from a directory. public static class FileRemover Inheritance object FileRemover Methods RemoveFilesBeyondLimit(int, string, string, string) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method. RemoveFilesBeyondLimit(int, string, string, string, bool) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method. RemoveFilesBeyondLimit(int, string, string, string, bool, Comparison<FileSystemInfo>) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted according to the sortComparison method. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile, Comparison<FileSystemInfo> sortComparison) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. sortComparison Comparison<FileSystemInfo> The comparison method to use for sorting files, before accumulating their file size. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, fileNameSuffix, or sortComparison> are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method."
  },
  "api/Switchboard.FixedTicker.html": {
    "href": "api/Switchboard.FixedTicker.html",
    "title": "Class FixedTicker | Switchboard",
    "keywords": "Class FixedTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per fixed update. public sealed class FixedTicker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase FixedTicker Implements ITicker Inherited Members TickerBase.StartTick(ActionWithInput<FrameOfTime>) TickerBase.StartTick(ActionWithInput<FrameOfTime>, int) TickerBase.StopTick(ActionWithInput<FrameOfTime>)"
  },
  "api/Switchboard.FloatFormatInfo.html": {
    "href": "api/Switchboard.FloatFormatInfo.html",
    "title": "Class FloatFormatInfo | Switchboard",
    "keywords": "Class FloatFormatInfo Namespace Switchboard Assembly Switchboard.TextConverter.dll Provides detailed info for formatting floating-point numbers. public sealed class FloatFormatInfo Inheritance object FloatFormatInfo Constructors FloatFormatInfo() Initializes a new instance of the class. public FloatFormatInfo() FloatFormatInfo(char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. Exceptions ArgumentNullException Thrown if the decimalPoint is null. FloatFormatInfo(char, char) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. Exceptions ArgumentNullException Thrown if the decimalPoint or digitGroupSeparator are null. FloatFormatInfo(char, char, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. Exceptions ArgumentNullException Thrown if the decimalPoint or digitGroupSeparator are null. FloatFormatInfo(char, char, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. Exceptions ArgumentNullException Thrown if the decimalPoint or digitGroupSeparator are null. FloatFormatInfo(char, char, bool, bool, bool) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. Exceptions ArgumentNullException Thrown if the decimalPoint or digitGroupSeparator are null. FloatFormatInfo(char, char, bool, bool, bool, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. Exceptions ArgumentNullException Thrown if the decimalPoint, digitGroupSeparator, or positiveInfinitySymbol are null. ArgumentException Thrown if the positiveInfinitySymbol is Empty. FloatFormatInfo(char, char, bool, bool, bool, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. Exceptions ArgumentNullException Thrown if the decimalPoint, digitGroupSeparator, positiveInfinitySymbol, or negativeInfinitySymbol are null. ArgumentException Thrown if the positiveInfinitySymbol or negativeInfinitySymbol are Empty. FloatFormatInfo(char, char, bool, bool, bool, string, string, string) Initializes a new instance of the class. public FloatFormatInfo(char decimalPoint, char digitGroupSeparator, bool showZeroExponent, bool padExponent, bool lowercaseE, string positiveInfinitySymbol, string negativeInfinitySymbol, string nanSymbol) Parameters decimalPoint char The character to use for the decimal point. digitGroupSeparator char The character to use for separating groups of integral digits. showZeroExponent bool Whether to display an exponent value for exponent zero. padExponent bool Whether to pad the exponent value with leading zeroes. lowercaseE bool Whether to display the exponent value as a lowercase 'e', or an uppercase 'E'. positiveInfinitySymbol string The characters used to represent positive infinity. negativeInfinitySymbol string The characters used to represent positive infinity. nanSymbol string The characters used to represent a value that is not a number. Exceptions ArgumentNullException Thrown if the decimalPoint, digitGroupSeparator, positiveInfinitySymbol, negativeInfinitySymbol, or nanSymbol are null. ArgumentException Thrown if the positiveInfinitySymbol, negativeInfinitySymbol, or nanSymbol are Empty. Fields DefaultDecimalPoint Gets the default decimal point character. public const char DefaultDecimalPoint = '.' DefaultDigitGroupSeparator Gets the default digit group separator character. public const char DefaultDigitGroupSeparator = ',' DefaultNaNSymbol Gets the default string of characters used to represent a value that is not a number. public const string DefaultNaNSymbol = \"NaN\" DefaultNegativeInfinitySymbol Gets the default string of characters used to represent a negative infinity value. public const string DefaultNegativeInfinitySymbol = \"-Infinity\" DefaultPositiveInfinitySymbol Gets the default string of characters used to represent a positive infinity value. public const string DefaultPositiveInfinitySymbol = \"Infinity\" Properties DecimalPoint Gets or sets the character to use for the decimal point, separating integral digits from fractional digits. public char DecimalPoint { get; set; } Exceptions ArgumentNullException Thrown if the value is null. DigitGroupSeparator Gets or sets the character to use for separating groups of integral digits. public char DigitGroupSeparator { get; set; } Exceptions ArgumentNullException Thrown if the value is null. LowercaseE Gets or sets whether to display the exponent value as a lowercase 'e' instead of the default uppercase 'E'. public bool LowercaseE { get; set; } NaNSymbol Gets or sets the string of characters to use for representing a value that is not a number. public string NaNSymbol { get; set; } Exceptions ArgumentNullException Thrown if the value is null. ArgumentException Thrown if the value is Empty. NegativeInfinitySymbol Gets or sets the string of characters to use for representing a negative infinity value. public string NegativeInfinitySymbol { get; set; } Exceptions ArgumentNullException Thrown if the value is null. ArgumentException Thrown if the value is Empty. PadExponent Gets or sets whether to pad the exponent value with leading zeroes, so that all exponent values use the same number of characters. public bool PadExponent { get; set; } PositiveInfinitySymbol Gets or sets the string of characters to use for representing a positive infinity value. public string PositiveInfinitySymbol { get; set; } Exceptions ArgumentNullException Thrown if the value is null. ArgumentException Thrown if the value is Empty. ShowZeroExponent Gets or sets whether to display an exponent value of zero in scientific notation. public bool ShowZeroExponent { get; set; } Methods SetDecimalPoint(char) Sets the character to use for the decimal point, separating integral digits from fractional digits. public void SetDecimalPoint(char decimalPoint) Parameters decimalPoint char The character to use for the decimal point. Exceptions ArgumentNullException Thrown if the decimalPoint is null. SetDigitGroupSeparator(char) Sets the character to use for separating groups of integral digits. public void SetDigitGroupSeparator(char digitGroupSeparator) Parameters digitGroupSeparator char The character to use for separating groups of integral digits. Exceptions ArgumentNullException Thrown if the digitGroupSeparator is null. SetNaNSymbol(string) Sets the characters used to represent a value that is not a number. public void SetNaNSymbol(string nanSymbol) Parameters nanSymbol string The characters used to represent a value that is not a number. Exceptions ArgumentNullException Thrown if the nanSymbol is null. ArgumentException Thrown if the nanSymbol is Empty. SetNegativeInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetNegativeInfinitySymbol(string negativeInfinitySymbol) Parameters negativeInfinitySymbol string The characters used to represent positive infinity. Exceptions ArgumentNullException Thrown if the negativeInfinitySymbol is null. ArgumentException Thrown if the negativeInfinitySymbol is Empty. SetPositiveInfinitySymbol(string) Sets the characters used to represent positive infinity. public void SetPositiveInfinitySymbol(string positiveInfinitySymbol) Parameters positiveInfinitySymbol string The characters used to represent positive infinity. Exceptions ArgumentNullException Thrown if the positiveInfinitySymbol is null. ArgumentException Thrown if the positiveInfinitySymbol is Empty."
  },
  "api/Switchboard.FloatToTextConverter.html": {
    "href": "api/Switchboard.FloatToTextConverter.html",
    "title": "Class FloatToTextConverter | Switchboard",
    "keywords": "Class FloatToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts floating-point numbers into strings of characters without allocating memory for garbage collection. public sealed class FloatToTextConverter Inheritance object FloatToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent the exact value of the longest double-precision floating-point number. public const int MaxCharacterCount = 1076 RoundTripDoublePrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a double into text, then back into a double, without changing the binary value of the double. public const int RoundTripDoublePrecision = 17 RoundTripFloatPrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a float into text, then back into a float, without changing the binary value of the float. public const int RoundTripFloatPrecision = 9 Properties ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static FloatToTextConverter ThreadStaticInstance { get; } Methods ConvertToText(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public int ConvertToText(double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public int ConvertToTextAsScientific(double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public void ConvertToTextAsScientific<T>(double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public void ConvertToTextAsScientific<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public void ConvertToTextAsScientific<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public void ConvertToTextAsScientific<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public int ConvertToTextWithDigitLimit(double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public void ConvertToTextWithDigitLimit<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public void ConvertToTextWithDigitLimit<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public void ConvertToTextWithDigitLimit<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin."
  },
  "api/Switchboard.FloatToTextExtensions.html": {
    "href": "api/Switchboard.FloatToTextExtensions.html",
    "title": "Class FloatToTextExtensions | Switchboard",
    "keywords": "Class FloatToTextExtensions Namespace Switchboard Assembly Switchboard.TextConverter.dll Adds extension methods to float and double for converting to strings of characters. public static class FloatToTextExtensions Inheritance object FloatToTextExtensions Methods ConvertToText(double, Span<char>) public static int ConvertToText(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this double value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this float value, Span<char> result, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(double, Span<char>, int, int, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this double value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns int Returns the number of characters in the result. Exceptions ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific(float, Span<char>, int, int, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation, without a negative sign. public static int ConvertToTextAsScientific(this float value, Span<char> result, int digitMax, int digitMin, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextAsScientific<T>(double, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this float value, T argument, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitMax) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextAsScientific<T>(float, T, ReadOnlySpanAction<char, T>, int, int, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters in scientific notation. public static void ConvertToTextAsScientific<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitMax, int digitMin, FloatFormatInfo format) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. ConvertToTextWithDigitLimit(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(double, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this double value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(float, Span<char>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit(float, Span<char>, int, bool, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits, without a negative sign. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static int ConvertToTextWithDigitLimit(this float value, Span<char> result, int digitLimit, bool groupDigits, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions ArgumentNullException Thrown if the format is null. IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(double, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToTextWithDigitLimit<T>(float, T, ReadOnlySpanAction<char, T>, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters with a limited number of digits. Results may be converted to scientific notation if the actual number of digits exceeds to the digitLimit. public static void ConvertToTextWithDigitLimit<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitLimit int The maximum number of digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action or format are null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin."
  },
  "api/Switchboard.FrameOfTime.html": {
    "href": "api/Switchboard.FrameOfTime.html",
    "title": "Struct FrameOfTime | Switchboard",
    "keywords": "Struct FrameOfTime Namespace Switchboard Assembly Switchboard.FrameOfTime.dll Represents information about the timing of a single frame in an update loop. public readonly struct FrameOfTime Constructors FrameOfTime(int, float, float, float, float) Initializes a new instance of the structure. public FrameOfTime(int frameCount, float time, float delta, float realTime, float realDelta) Parameters frameCount int The number of frames since the beginning of the loop. time float The number of seconds, potentially paused or scaled, since the beginning of the loop. delta float The number of seconds, potentially paused or scaled, since the last frame. realTime float The number of seconds, unpaused and unscaled, since the beginning of the loop. realDelta float The number of seconds, unpaused and unscaled, since the last frame. Properties Delta The number of seconds, potentially paused or scaled, since the last frame. public float Delta { get; } FrameCount The number of frames since the beginning of the loop. public int FrameCount { get; } RealDelta The number of seconds, unpaused and unscaled, since the last frame. public float RealDelta { get; } RealTime The number of seconds, unpaused and unscaled, since the beginning of the loop. public float RealTime { get; } Time The number of seconds, potentially paused or scaled, since the beginning of the loop. public float Time { get; }"
  },
  "api/Switchboard.html": {
    "href": "api/Switchboard.html",
    "title": "Namespace Switchboard | Switchboard",
    "keywords": "Namespace Switchboard Classes ApplicationEnd Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. ApplicationPlatform Provides helper methods for getting a PlatformFlags value for the current platform. ApplicationTicker Provides a static root for lazy loaded object tickers that correspond to Update(), LateUpdate(), and FixedUpdate(). CompositionRoot Loads the CompositionRootAsset and initializes the DependencyInjector. CompositionRootAsset Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. DateTimeToTextConverter Converts a DateTime value into a string of characters without allocating memory for garbage collection. DependencyInjector Provides a base representation for a Unity asset that can activate, provide instances of types, then deactivate. Destructor A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. DynamicQueue<T> Stores objects of a specific type in a queue. Objects are kept in the order of first in, first out. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. ExpandableAttribute Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. FileRemover Provides methods for removing excess files from a directory. FixedTicker Invokes an event once per fixed update. FloatFormatInfo Provides detailed info for formatting floating-point numbers. FloatToTextConverter Converts floating-point numbers into strings of characters without allocating memory for garbage collection. FloatToTextExtensions Adds extension methods to float and double for converting to strings of characters. ILoggerExtensions Provides extension methods for the ILogger interface that assign the LogLevel based on the method. InjectorLocator A static service locator that provides an IInjector. IntToTextConverter Converts integral numbers into strings of characters, without allocating memory for garbage collection. LateTicker Invokes an event once per late update. LogFileWriter Writes log entries to log files. LoggerRoot Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. ObjectArrayPool Stores object arrays of a specific length in a thread safe pool. ObjectPool<T> Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. PathUtility Provides utilities for working with file system paths. PreciseClock Provides DateTime values that have the precision of a Stopwatch. PriorityEvent<T> Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. SharedObjectArrayPool A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. StandardLogFormatter Provides a standard implementation of the ILogFormatter interface. StringMaker Represents a string of characters that can be modified without allocating memory for garbage collection. StringMakerILoggerExtensions Provides extension methods for the ILogger interface to accept StringMaker messages. StringMakerUnityExtensions Provides extension methods for StringMaker to append common Unity types. SwitchboardLogger Provides a single, static ILogger LoggerRoot that can send log output to multiple targets. SwitchboardMenuOrder Provides Switchboard's order in the asset creation menu. ThreadSafeObjectPool<T> Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. Ticker Invokes an event once per update. TickerBase Provides an abstract base class for invoking an event once per update. UnityLogHandler Provides a reference to the default Unity log handler. UnityLogHijacker Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. UnityLogger An implementation of ILogger that targets the UnityLogHandler. Structs FrameOfTime Represents information about the timing of a single frame in an update loop. StringMakerHandle Provides a readonly ref struct facade for StringMaker. Interfaces IInjector Provides a generic interface for getting an instance of a requested type. ILogFormatter Provides an interface for formatting log message and exceptions. ILogger Provides an interface for logging. ITicker Provides an interface for observing an event that is invoked every time a frame of the application is updated. Enums DependencyInjector.State The various states that a DependencyInjector can have while activating and deactivating. LogLevel Defines the levels of significance that may be assigned to a log entry. PlatformFlags Provides a FlagsAttribute enum comparable to UnityEngine.RuntimePlatform. Use the GetFlag(RuntimePlatform) method to convert a RuntimePlatform value into a flag value, or compare the current platform like so: PlatformFlagsVariable.HasFlag(Flag) Delegates ActionWithInput<T> Represents a type of delegate similar to Action<T>, but using an in parameter as a readonly reference. Because the parameter is an in parameter, the type argument must be invariant, it cannot be contravariant like Action<T>."
  },
  "api/Switchboard.IInjector.html": {
    "href": "api/Switchboard.IInjector.html",
    "title": "Interface IInjector | Switchboard",
    "keywords": "Interface IInjector Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides a generic interface for getting an instance of a requested type. public interface IInjector Methods Get<T>() Provides an instance of the requested type of dependency. T Get<T>() where T : class Returns T Returns a reference to the requested type, or null. Type Parameters T The type of instance requested."
  },
  "api/Switchboard.ILogFormatter.html": {
    "href": "api/Switchboard.ILogFormatter.html",
    "title": "Interface ILogFormatter | Switchboard",
    "keywords": "Interface ILogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides an interface for formatting log message and exceptions. public interface ILogFormatter Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.ILogger.html": {
    "href": "api/Switchboard.ILogger.html",
    "title": "Interface ILogger | Switchboard",
    "keywords": "Interface ILogger Namespace Switchboard Assembly Switchboard.ILogger.dll Provides an interface for logging. public interface ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.ILoggerExtensions.html": {
    "href": "api/Switchboard.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | Switchboard",
    "keywords": "Class ILoggerExtensions Namespace Switchboard Assembly Switchboard.ILogger.dll Provides extension methods for the ILogger interface that assign the LogLevel based on the method. public static class ILoggerExtensions Inheritance object ILoggerExtensions Methods Log(ILogger, LogLevel, Exception) Logs an exception. public static void Log(this ILogger logger, LogLevel logLevel, Exception exception) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. LogCritical(ILogger, Exception) Logs an exception with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogCritical(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, Exception) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogDebug(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, Exception) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogError(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogError(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, Exception) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogInformation(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogTrace(ILogger, Exception) Logs an exception with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogTrace(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, Exception) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogWarning(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.InjectorLocator.html": {
    "href": "api/Switchboard.InjectorLocator.html",
    "title": "Class InjectorLocator | Switchboard",
    "keywords": "Class InjectorLocator Namespace Switchboard Assembly Switchboard.InjectorLocator.dll A static service locator that provides an IInjector. public static class InjectorLocator Inheritance object InjectorLocator Methods AssignLocatorDelegate(Func<IInjector>) Assigns the delegate that provides the IInjector instance. public static void AssignLocatorDelegate(Func<IInjector> locatorDelegate) Parameters locatorDelegate Func<IInjector> The delegate to set as the IInjector locator. Exceptions ArgumentNullException Thrown if the locatorDelegate is null. InvalidOperationException Thrown if the locator delegate is already assigned. GetInjector() Provides an IInjector by invoking the locator delegate. public static IInjector GetInjector() Returns IInjector Returns the result of invoking the assigned IInjector locator delegate. RemoveLocatorDelegate(Func<IInjector>) Removes the current IInjector locator delegate if it matches the locatorDelegate argument. public static void RemoveLocatorDelegate(Func<IInjector> locatorDelegate) Parameters locatorDelegate Func<IInjector> The IInjector locator delegate to be removed. Exceptions ArgumentNullException Thrown if the locatorDelegate is null."
  },
  "api/Switchboard.IntToTextConverter.html": {
    "href": "api/Switchboard.IntToTextConverter.html",
    "title": "Class IntToTextConverter | Switchboard",
    "keywords": "Class IntToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts integral numbers into strings of characters, without allocating memory for garbage collection. public static class IntToTextConverter Inheritance object IntToTextConverter Fields MaxCharacterCount Gets the maximum number of characters that may be necessary to store the text representation of a number. public const int MaxCharacterCount = 71 Methods ConvertToText(byte, Span<char>) Converts a byte into a Span<T> of characters. public static int ConvertToText(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(short, Span<char>) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(short, Span<char>, char) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, char) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, char, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, char) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, char, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters. public static int ConvertToText(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(byte, Span<char>) Converts a byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(short, Span<char>) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(int, Span<char>) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(int, Span<char>, char) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(long, Span<char>) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this byte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this short value, T argument, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this short value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this int value, T argument, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this int value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this sbyte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex(byte, Span<char>) Converts a byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(short, Span<char>) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(int, Span<char>) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(int, Span<char>, char) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(long, Span<char>) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this byte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this short value, T argument, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this short value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this int value, T argument, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this int value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this sbyte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null."
  },
  "api/Switchboard.ITicker.html": {
    "href": "api/Switchboard.ITicker.html",
    "title": "Interface ITicker | Switchboard",
    "keywords": "Interface ITicker Namespace Switchboard Assembly Switchboard.ITicker.dll Provides an interface for observing an event that is invoked every time a frame of the application is updated. public interface ITicker Methods StartTick(ActionWithInput<FrameOfTime>) Adds an observer event handler to an event invoked once per update. void StartTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. StopTick(ActionWithInput<FrameOfTime>) Removes an observer event handler from the the event. void StopTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The event handler to be removed."
  },
  "api/Switchboard.LateTicker.html": {
    "href": "api/Switchboard.LateTicker.html",
    "title": "Class LateTicker | Switchboard",
    "keywords": "Class LateTicker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per late update. public sealed class LateTicker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase LateTicker Implements ITicker Inherited Members TickerBase.StartTick(ActionWithInput<FrameOfTime>) TickerBase.StartTick(ActionWithInput<FrameOfTime>, int) TickerBase.StopTick(ActionWithInput<FrameOfTime>)"
  },
  "api/Switchboard.LogFileWriter.html": {
    "href": "api/Switchboard.LogFileWriter.html",
    "title": "Class LogFileWriter | Switchboard",
    "keywords": "Class LogFileWriter Namespace Switchboard Assembly Switchboard.Logger.dll Writes log entries to log files. public sealed class LogFileWriter : ILogger, IDisposable Inheritance object LogFileWriter Implements ILogger IDisposable Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Constructors LogFileWriter(string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. Exceptions ArgumentNullException Thrown if directory or fileNamePrefix are null. ArgumentException Thrown if directory or fileNamePrefix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix contains invalid file name characters for the current platform. LogFileWriter(string, string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. LogFileWriter(string, string, string, int) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. LogFileWriter(string, string, string, int, ILogFormatter) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension, int fileSizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. formatter ILogFormatter The formatter to use for formatting log entries. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Fields DefaultFileExtension Gets the default file name extension for log files. public const string DefaultFileExtension = \".log\" DefaultFileSizeLimit Gets the default file size limit in bytes. public const int DefaultFileSizeLimit = 10000000 MaxBytesPerLog Gets the maximum number of bytes that may be necessary to write a single log entry to the log file. public const int MaxBytesPerLog = 82944 Properties Directory Gets the path to the directory for the current log file. public string Directory { get; } DisplayCallerInfo Gets or sets whether information about the caller of the log method should be displayed. public bool DisplayCallerInfo { get; set; } FileExtension Gets the file extension for the current log file. public string FileExtension { get; } FileNamePrefix Gets file name prefix for the current log file. public string FileNamePrefix { get; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than MaxBytesPerLog. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } Methods Close() Closes the FileStream for the current log file. Closing the FileStream does not automatically FlushLogs(). public void Close() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or FlushLogs(). FlushLogs() Flushes queued log entries so that they are written to the log file. If necessary, a new log file will be created, and the FileStream will be opened. It should be called regularly to prevent too many logs from accumulating in the queue. public void FlushLogs() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or Close(). SecurityException A new file needs to be created, and the caller does not have the required permission. DirectoryNotFoundException A new file needs to be created, and the specified path is invalid. UnauthorizedAccessException A new file needs to be created, and write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException A new file needs to be created, and the specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. Log(LogLevel, Exception, ReadOnlySpan<char>) Queues an exception to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the exception, the formatting exception, the message, and original exception will be queued without formatting. No exception will be thrown. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Queues a message to be written to the log file. The character limit is equal to MaxCapacity. If the Formatter throws an exception when formatting the message, the message will be queued without formatting. Then, the formatting exception will be re-thrown. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentException Thrown if message is empty. Open() Opens a FileStream for the current log file. If there is no current log file a new one will be created. public void Open() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Close(), or FlushLogs(). FileNotFoundException The file cannot be found. SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. OpenNewFile() Opens a FileStream for a new log file. The file name will start with the file name prefix, followed by a time stamp and the file name extension. public void OpenNewFile() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as Open(), Close(), or FlushLogs(). SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. SetFileSizeLimit(int) Sets the maximum log file size in bytes. When a log file reaches the size limit, a new file will be created. public void SetFileSizeLimit(int fileSizeLimit) Parameters fileSizeLimit int The maximum file size in bytes. Exceptions ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MaxBytesPerLog. Events FileClosed Occurs when the FileStream for the current log file is closed. Provides an opportunity to clean up old log files. public event Action<LogFileWriter> FileClosed"
  },
  "api/Switchboard.LoggerRoot.html": {
    "href": "api/Switchboard.LoggerRoot.html",
    "title": "Class LoggerRoot | Switchboard",
    "keywords": "Class LoggerRoot Namespace Switchboard Assembly Switchboard.Logger.dll Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. public sealed class LoggerRoot : ILogger Inheritance object LoggerRoot Implements ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties LogLevel Gets or sets the overall LogLevel for all log targets within the LoggerRoot. If the LogLevel of a message or exception is less significant, it will not be sent to any log targets. The value may not be immediately accurate across all threads. public LogLevel LogLevel { get; set; } Methods Add(ILogger) Adds an implementation of ILogger to the LoggerRoot as a log target. public bool Add(ILogger logTarget) Parameters logTarget ILogger The logger to add. Returns bool Returns false if the logTarget has already been added to the LoggerRoot, otherwise returns true. Exceptions ArgumentNullException Thrown if the logTarget is null. ArgumentException Thrown if the logTarget is a LoggerRoot. Contains(ILogger) Determines whether a log target has been added. public bool Contains(ILogger logTarget) Parameters logTarget ILogger The logger to search for. Returns bool Returns true if the logTarget is contained within, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. Log(LogLevel, Exception, ReadOnlySpan<char>) Writes an exception to the log. Log targets should never attempt to throw an exception when logging an exception. If a log target throws an exception during the method, it is silently consumed. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Writes a message to the log. If a log target throws an exception, it will be captured until all log targets have had a chance to log, then re-thrown. If multiple exceptions are thrown, they will all be re-thrown as one AggregateException. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentException Thrown if message is empty. Remove(ILogger) Removes a log target. public bool Remove(ILogger logTarget) Parameters logTarget ILogger The logger to remove. Returns bool Returns true if the logTarget was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. RemoveAllTargets() Removes all loggers from the log target list. public void RemoveAllTargets()"
  },
  "api/Switchboard.LogLevel.html": {
    "href": "api/Switchboard.LogLevel.html",
    "title": "Enum LogLevel | Switchboard",
    "keywords": "Enum LogLevel Namespace Switchboard Assembly Switchboard.ILogger.dll Defines the levels of significance that may be assigned to a log entry. public enum LogLevel Fields Trace = 0 Debug = 1 Information = 2 Warning = 3 Error = 4 Critical = 5 None = 6"
  },
  "api/Switchboard.ObjectArrayPool.html": {
    "href": "api/Switchboard.ObjectArrayPool.html",
    "title": "Class ObjectArrayPool | Switchboard",
    "keywords": "Class ObjectArrayPool Namespace Switchboard Assembly Switchboard.Collections.dll Stores object arrays of a specific length in a thread safe pool. public sealed class ObjectArrayPool Inheritance object ObjectArrayPool Constructors ObjectArrayPool(int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength) Parameters arrayLength int The length of the object arrays to be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength. ObjectArrayPool(int, int) Initializes a new instance of the class. public ObjectArrayPool(int arrayLength, int maxCount) Parameters arrayLength int The length of the object arrays to be stored in the pool. maxCount int The maximum number of object arrays that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown when arrayLength is less than MinArrayLength, or when maxCount is less than zero. Fields MinArrayLength Represents the smallest possible length of object arrays that can be stored in any ObjectArrayPool. public const int MinArrayLength = 15 Properties ArrayLength Gets the length of the object arrays stored in the pool. public int ArrayLength { get; } Count Gets the current number of object arrays stored in the pool. The value may not be accurate as other threads add and remove arrays from the pool. public int Count { get; } MaxCount Gets the maximum number of object arrays that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } Methods Add(object[]) Adds an object array to the pool, unless the pool is at max capacity. public bool Add(object[] array) Parameters array object[] The object array to add to the pool. Returns bool Returns true if the object array was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the array is null. ArgumentException Thrown if the length of the array does not equal ArrayLength, or if the exact type of the array is not an object array. Clear() Removes all object arrays from the pool. public void Clear() GetArray() Provides an object array with a length equal to the value of ArrayLength. If the pool is empty, a new array is instantiated. Otherwise, an array is provided by removing it from the pool. public object[] GetArray() Returns object[] An object array with a length equal to the value of ArrayLength. SetMaxCount(int) Sets the maximum number of object arrays that can be stored in the pool. The value cannot be set to less than the current Count, unless the value is set to zero. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of object arrays that can be stored in the pool. Exceptions InvalidOperationException Thrown if the maxCount is less than the current Count, and not equal to zero."
  },
  "api/Switchboard.ObjectPool-1.html": {
    "href": "api/Switchboard.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | Switchboard",
    "keywords": "Class ObjectPool<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a pool. The order is not guaranteed. Removing a specific object swaps it with the last object in the pool before removal. The MaxCount can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. An Action<T> may be applied to each object in the pool with the ForEach(Action<T>) method. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ObjectPool<T> Constructors ObjectPool() Initializes a new instance of the class. public ObjectPool() ObjectPool(int) Initializes a new instance of the class. public ObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } Shared Gets a ThreadStaticAttribute instance of the class for the specific type T. public static ObjectPool<T> Shared { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. Clear() Removes all objects from the pool. public void Clear() Contains(T) Returns true if the item's Equals(object) method returns true for an object in the pool. public bool Contains(T item) Parameters item T The object to search for in the pool. Returns bool Returns true if the pool contains the object, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. ForEach(Action<T>) Applies an Action<T> to each object in the pool. public void ForEach(Action<T> action) Parameters action Action<T> The Action<T> to apply to each object. Exceptions ArgumentNullException Thrown if the action is null. InvalidOperationException Thrown if the collection is modified during the ForEach operation. AggregateException Thrown if multiple exceptions occur during the course of this method. Remove(T) Removes a specific object from the pool. Removing an object changes the order of the objects in the pool. If the item's Equals(object) method returns true for an object in the pool, that object is removed. public bool Remove(T item) Parameters item T The object to remove from the pool. Returns bool Returns true if the object was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the item is null. SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity. TryGet() Provides an object from the pool, if one is available. public T TryGet() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. TryGet(out T) Provides an object from the pool, if one is available. public bool TryGet(out T item) Parameters item T The object returned from the pool if available, otherwise null. Returns bool Returns true if the object is not null."
  },
  "api/Switchboard.PathUtility.html": {
    "href": "api/Switchboard.PathUtility.html",
    "title": "Class PathUtility | Switchboard",
    "keywords": "Class PathUtility Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides utilities for working with file system paths. public static class PathUtility Inheritance object PathUtility Properties DirectorySeparator Gets the standard directory separator character for the platform, either Windows '\\', or non-Windows '/'. public static char DirectorySeparator { get; } Methods CombinePaths(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePaths(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForNonWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForNonWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. GetFileName(string) Uses a static Dictionary<TKey, TValue> to cache file names parsed from a given path string. The method is thread safe. It calls GetFileName(string) and stores the result. So, if the same filePath is evaluated multiple times, the value is simply retrieved from the cache. public static string GetFileName(string filePath) Parameters filePath string The file path to parse for a file name. Returns string The file name. Exceptions ArgumentNullException Thrown if the filePath is null. ArgumentException Thrown if the filePath is Empty. GetFileNameAndExtension(string, out string, out string) Gets the file name and extension of a given path string. public static int GetFileNameAndExtension(string path, out string fileName, out string extension) Parameters path string The path string to parse. fileName string The file name parsed from the path, or null if not found. extension string The extension parsed from the path, or null if not found. Returns int The index of the last directory separator, or -1 if not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for the platform, or ends with a period on Windows. GetFileNameAndExtensionForNonWindows(string, out string, out string) public static int GetFileNameAndExtensionForNonWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they are not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or if the file name contains an invalid character for non-Windows platforms. GetFileNameAndExtensionForWindows(string, out string, out string) public static int GetFileNameAndExtensionForWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they arenot found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for Windows, or ends with a period. IsDirectorySeparator(char) Determines whether a character is any type of directory separator character. public static bool IsDirectorySeparator(char character) Parameters character char The character to evalute. Returns bool Returns true if the character is a directory separator character, otherwise false. NormalizePath(string) Converts directory separator characters within a path string into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePath(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForNonWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForNonWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidateFileNameCharacters(string) Throws exceptions if any characters in the fileName are invalid file name characters for the current platform. public static void ValidateFileNameCharacters(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForNonWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for a non-Windows platform. public static void ValidateFileNameCharactersForNonWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for the Windows platform. public static void ValidateFileNameCharactersForWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidatePathCharacters(string) Throws exceptions if any characters in the path are invalid path characters for the current platform. public static void ValidatePathCharacters(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForNonWindows(string) Throws exceptions if any characters in the path are invalid path characters for a non-Windows platform. public static void ValidatePathCharactersForNonWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForWindows(string) Throws exceptions if any characters in the path are invalid path characters for the Windows platform. public static void ValidatePathCharactersForWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character."
  },
  "api/Switchboard.PlatformFlags.html": {
    "href": "api/Switchboard.PlatformFlags.html",
    "title": "Enum PlatformFlags | Switchboard",
    "keywords": "Enum PlatformFlags Namespace Switchboard Assembly Switchboard.PlatformFlags.dll Provides a FlagsAttribute enum comparable to UnityEngine.RuntimePlatform. Use the GetFlag(RuntimePlatform) method to convert a RuntimePlatform value into a flag value, or compare the current platform like so: PlatformFlagsVariable.HasFlag(Flag) [Flags] public enum PlatformFlags Fields OSXEditor = 1 OSXPlayer = 2 WindowsPlayer = 4 WindowsEditor = 8 IPhonePlayer = 16 Android = 32 LinuxPlayer = 64 LinuxEditor = 128 WebGLPlayer = 256 WSAPlayerX86 = 512 WSAPlayerX64 = 1024 WSAPlayerARM = 2048 PS4 = 4096 XboxOne = 8192 tvOS = 16384 Switch = 32768 Lumin = 65536 Stadia = 131072 CloudRendering = 262144 GameCoreXboxSeries = 524288 GameCoreXboxOne = 1048576 PS5 = 2097152 EmbeddedLinuxArm64 = 4194304 EmbeddedLinuxArm32 = 8388608 EmbeddedLinuxX64 = 16777216 EmbeddedLinuxX86 = 33554432 LinuxServer = 67108864 WindowsServer = 134217728 OSXServer = 268435456"
  },
  "api/Switchboard.PreciseClock.html": {
    "href": "api/Switchboard.PreciseClock.html",
    "title": "Class PreciseClock | Switchboard",
    "keywords": "Class PreciseClock Namespace Switchboard Assembly Switchboard.PreciseClock.dll Provides DateTime values that have the precision of a Stopwatch. public static class PreciseClock Inheritance object PreciseClock Properties Now Gets the last synchronized Now value, plus the Elapsed time since synchronization. public static DateTime Now { get; } UtcNow Gets the last synchronized UtcNow value, plus the Elapsed time since synchronization. public static DateTime UtcNow { get; } Methods SynchronizeWithSystemClock() Synchronizes the UtcNow and Now properties with the system clock. If the difference between the old time and the new time is less than one second, the time will not be changed. public static void SynchronizeWithSystemClock()"
  },
  "api/Switchboard.PriorityEvent-1.html": {
    "href": "api/Switchboard.PriorityEvent-1.html",
    "title": "Class PriorityEvent<T> | Switchboard",
    "keywords": "Class PriorityEvent<T> Namespace Switchboard Assembly Switchboard.Events.dll Represents an event to be invoked. Observer delegates can be added with a priority value to specify invocation order. public sealed class PriorityEvent<T> Type Parameters T The type of event data that will be passed to observers when the event is invoked. Inheritance object PriorityEvent<T> Constructors PriorityEvent() Initializes a new instance of the class. public PriorityEvent() PriorityEvent(int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity) Parameters handlerCapacity int The initial capacity for observers. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity is less than zero or greater than 1,073,741,824. PriorityEvent(int, int) Initializes a new instance of the class. public PriorityEvent(int handlerCapacity, int priorityCapacity) Parameters handlerCapacity int The initial capacity for observers. priorityCapacity int The initial capacity for priority values. Exceptions ArgumentOutOfRangeException Thrown when handlerCapacity or priorityCapacity are less than zero or greater than 1,073,741,824. Methods Add(ActionWithInput<T>) Adds an observer event handler to the event with the default priority value of zero. Duplicate event handlers are never added. public void Add(ActionWithInput<T> handler) Parameters handler ActionWithInput<T> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. Add(ActionWithInput<T>, int) Adds an observer event handler to the event with the specified priority value. Duplicate event handlers are never added. public void Add(ActionWithInput<T> handler, int priority) Parameters handler ActionWithInput<T> The observer event handler to add. priority int The order in which the event handler will be called. Event handlers with lower priority are called before those with higher priority. Exceptions ArgumentNullException Thrown if the handler is null. Invoke(in T) Invokes the event. public void Invoke(in T parameters) Parameters parameters T The event data that will passed to observer event handlers. Exceptions InvalidOperationException Thrown if the event is invoked while the previous invocation is still in progress. AggregateException Thrown if multiple exceptions occur during the course of this method. Remove(ActionWithInput<T>) Removes a specific observer event handler from invocation. public void Remove(ActionWithInput<T> handler) Parameters handler ActionWithInput<T> The observer event handler to remove. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.SharedObjectArrayPool.html": {
    "href": "api/Switchboard.SharedObjectArrayPool.html",
    "title": "Class SharedObjectArrayPool | Switchboard",
    "keywords": "Class SharedObjectArrayPool Namespace Switchboard Assembly Switchboard.Collections.dll A static collection of ObjectArrayPool instances that store object arrays of length 32, 64, 128, 256. public static class SharedObjectArrayPool Inheritance object SharedObjectArrayPool Methods GetPoolForLength(int) Provides a static ObjectArrayPool instance that stores object arrays of the requested length. The only recognized length values are 32, 64, 128, 256. public static ObjectArrayPool GetPoolForLength(int arrayLength) Parameters arrayLength int The length of the arrays stored in the requested ObjectArrayPool. Returns ObjectArrayPool A static ObjectArrayPool instance that stores object arrays of the specified arrayLength. Exceptions ArgumentException Thrown if the arrayLength value is anything other than 32, 64, 128, 256."
  },
  "api/Switchboard.StandardLogFormatter.html": {
    "href": "api/Switchboard.StandardLogFormatter.html",
    "title": "Class StandardLogFormatter | Switchboard",
    "keywords": "Class StandardLogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides a standard implementation of the ILogFormatter interface. public sealed class StandardLogFormatter : ILogFormatter Inheritance object StandardLogFormatter Implements ILogFormatter Properties Default Gets a static instance of the class. public static StandardLogFormatter Default { get; } Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. public void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.StringMaker.html": {
    "href": "api/Switchboard.StringMaker.html",
    "title": "Class StringMaker | Switchboard",
    "keywords": "Class StringMaker Namespace Switchboard Assembly Switchboard.StringMaker.dll Represents a string of characters that can be modified without allocating memory for garbage collection. public sealed class StringMaker Inheritance object StringMaker Extension Methods StringMakerUnityExtensions.Append(StringMaker, Bounds) StringMakerUnityExtensions.Append(StringMaker, BoundsInt) StringMakerUnityExtensions.Append(StringMaker, Color) StringMakerUnityExtensions.Append(StringMaker, Rect) StringMakerUnityExtensions.Append(StringMaker, RectInt) StringMakerUnityExtensions.Append(StringMaker, Vector2) StringMakerUnityExtensions.Append(StringMaker, Vector2Int) StringMakerUnityExtensions.Append(StringMaker, Vector3) StringMakerUnityExtensions.Append(StringMaker, Vector3Int) StringMakerUnityExtensions.Append(StringMaker, Vector4) Fields CharacterArrayPool Gets the static ThreadSafeObjectPool<T> of character arrays used as memory pages by all StringMaker instances. The pool is made public to simplify memory management, such as setting the MaxCount. Adding or removing character arrays from the pool for other reasons is not recommended. Character arrays from the pool are not cleared before use, only after, and if their length is not PageLength they are discarded for garbage collection. public static ThreadSafeObjectPool<char[]> CharacterArrayPool MaxCapacity Gets the maximum number of characters that can be stored per StringMaker instance. The value is the result of MaxPages * PageLength. Converting characters, which occupy two bytes, into a UTF-8 byte array can require up to three bytes per character. The character limit ensures that the maximum necessary size of a UTF-8 byte array is under 85kB, avoiding the large object heap. public const int MaxCapacity = 27648 MaxPages Gets the maximum number of pages that can be allocated per StringMaker instance. public const int MaxPages = 27 PageLength Gets the number of characters that can be stored per page of internal memory. Memory is allocated internally as character arrays of the specified fixed size, referred to as pages. public const int PageLength = 1024 Properties AppendAction Gets the static ReadOnlySpanAction<T, TArg> instance used to append a character Span<T> to a StringMaker. public static ReadOnlySpanAction<char, StringMaker> AppendAction { get; } Capacity Gets the current Length of characters that can be set without borrowing or allocating new memory. public int Capacity { get; } CopyAction Gets the static SpanAction<T, TArg> instance used to copy the contents of a StringMaker to a character Span<T>. public static SpanAction<char, StringMaker> CopyAction { get; } this[int] Gets or sets the character at a specific index. public char this[int index] { get; set; } Parameters index int The character index. Exceptions IndexOutOfRangeException Thrown if index is less than zero, or greater than or equal to Capacity. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than zero or greater than MaxCapacity Shared Gets a ThreadStaticAttribute instance of the class. public static StringMaker Shared { get; } Methods Append(bool) Appends a boolean value. public StringMaker Append(bool value) Parameters value bool The boolean value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(char) Appends a character. public StringMaker Append(char value) Parameters value char The character to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(char, int) Appends a repeating character. public StringMaker Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(DateTime) Appends a DateTime. public StringMaker Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(DateTime, int) Appends a DateTime. public StringMaker Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double) Appends a double-precision floating-point number. public StringMaker Append(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double, int, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(long) Appends a long integer. public StringMaker Append(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(long, char) Appends a long integer. public StringMaker Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMaker Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ulong) Appends an unsinged long integer. public StringMaker Append(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ulong, char) Appends an unsinged long integer. public StringMaker Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(byte) Appends a byte as a binary value. public StringMaker AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(short) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMaker AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The numberto append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(int) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMaker AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(long) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMaker AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMaker AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMaker AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMaker AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMaker AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMaker AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMaker AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMaker AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMaker AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMaker AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(uint) Appends an unsigned integer. public StringMaker AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMaker AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. AppendLine() Appends the NewLine character(s). public StringMaker AppendLine() Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMaker AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if the format is null. Clear() Sets the Length to zero. public StringMaker Clear() Returns StringMaker Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. Exceptions ArgumentException Thrown if the target length is not enough to hold the encoded data. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> The target char Span<T> to which the contents of this StringMaker will be copied. Exceptions ArgumentException Thrown if the target length is less than this StringMaker Length. EnsureCapacity(int) Allocates enough internal memory to store the specified number of characters. public int EnsureCapacity(int capacity) Parameters capacity int The total number of characters for which to ensure capacity. Returns int The actual allocated character capacity, may be more than requested. Exceptions ArgumentOutOfRangeException Thrown if capacity is less than zero or greater than MaxCapacity Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of char up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. TrimExcess() Releases excess memory pages to the CharacterArrayPool, and clears characters by setting to '\\0' from the Length index to the end of the page. public StringMaker TrimExcess() Returns StringMaker Returns the instance, enabling a fluent interface. Operators operator +(StringMaker, bool) Appends a value. public static StringMaker operator +(StringMaker stringMaker, bool value) Parameters stringMaker StringMaker The StringMaker to append. value bool The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, char) Appends a value. public static StringMaker operator +(StringMaker stringMaker, char value) Parameters stringMaker StringMaker The StringMaker to append. value char The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, DateTime) Appends a value. public static StringMaker operator +(StringMaker stringMaker, DateTime value) Parameters stringMaker StringMaker The StringMaker to append. value DateTime The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, double) Appends a value. public static StringMaker operator +(StringMaker stringMaker, double value) Parameters stringMaker StringMaker The StringMaker to append. value double The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, long) Appends a value. public static StringMaker operator +(StringMaker stringMaker, long value) Parameters stringMaker StringMaker The StringMaker to append. value long The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, ReadOnlySpan<char>) Appends a value. public static StringMaker operator +(StringMaker stringMaker, ReadOnlySpan<char> value) Parameters stringMaker StringMaker The StringMaker to append. value ReadOnlySpan<char> The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMaker, ulong) Appends a value. public static StringMaker operator +(StringMaker stringMaker, ulong value) Parameters stringMaker StringMaker The StringMaker to append. value ulong The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity."
  },
  "api/Switchboard.StringMakerHandle.html": {
    "href": "api/Switchboard.StringMakerHandle.html",
    "title": "Struct StringMakerHandle | Switchboard",
    "keywords": "Struct StringMakerHandle Namespace Switchboard Assembly Switchboard.StringMaker.dll Provides a readonly ref struct facade for StringMaker. public readonly ref struct StringMakerHandle Constructors StringMakerHandle(StringMaker) Initializes a new instance with the stringMaker as the internal reference. public StringMakerHandle(StringMaker stringMaker) Parameters stringMaker StringMaker The StringMaker to contain within the StringMakerHandle. Properties Capacity Gets the current Length of characters that can be set without borrowing or allocating new memory. public int Capacity { get; } this[int] Gets or sets the character at a specific index. public char this[int index] { get; set; } Parameters index int The character index. Exceptions IndexOutOfRangeException Thrown if index is less than zero, or greater than or equal to Capacity. Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than zero or greater than MaxCapacity Methods Append(bool) Appends a boolean value. public StringMakerHandle Append(bool value) Parameters value bool The boolean value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(char) Appends a character. public StringMakerHandle Append(char value) Parameters value char The character to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(char, int) Appends a repeating character. public StringMakerHandle Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(DateTime) Appends a DateTime. public StringMakerHandle Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(DateTime, int) Appends a DateTime. public StringMakerHandle Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double) Appends a double-precision floating-point number. public StringMakerHandle Append(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(double, int, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int fractionalMax, int fractionalMin, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. fractionalMax int The maximum number of fractional digits to display. fractionalMin int The minimum number of fractional digits to display. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if the format is null. ArgumentOutOfRangeException Thrown if fractionalMax is greater than zero and less than fractionalMin. Append(long) Appends a long integer. public StringMakerHandle Append(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(long, char) Appends a long integer. public StringMakerHandle Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMakerHandle Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ulong) Appends an unsinged long integer. public StringMakerHandle Append(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(ulong, char) Appends an unsinged long integer. public StringMakerHandle Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(byte) Appends a byte as a binary value. public StringMakerHandle AppendAsBinary(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(short) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(short, char) Appends a short integer as a binary value. public StringMakerHandle AppendAsBinary(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(int) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(int, char) Appends an integer as a binary value. public StringMakerHandle AppendAsBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(long) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(long, char) Appends a long integer as a binary value. public StringMakerHandle AppendAsBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(sbyte) Appends a signed byte as a binary value. public StringMakerHandle AppendAsBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ushort) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendAsBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(uint) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(uint, char) Appends an unsigned integer as a binary value. public StringMakerHandle AppendAsBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ulong) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendAsBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(byte) Appends a byte as a hexadecimal value. public StringMakerHandle AppendAsHex(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(short) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(short, char) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(int) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(int, char) Appends an integer as a hexadecimal value. public StringMakerHandle AppendAsHex(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(long) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(long, char) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(sbyte) Appends a signed byte as a hexadecimal value. public StringMakerHandle AppendAsHex(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(uint) Appends an unsigned integer. public StringMakerHandle AppendAsHex(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMakerHandle AppendAsHex(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsHex(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendAsHex(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax) Parameters value double The number to append. digitMax int The maximum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendAsScientific(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. AppendAsScientific(double, int, int, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendAsScientific(double value, int digitMax, int digitMin, FloatFormatInfo format) Parameters value double The number to append. digitMax int The maximum number of digits to display. digitMin int The minimum number of digits to display. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if format is null. ArgumentOutOfRangeException Thrown if digitMax is greater than zero and less than digitMin. AppendLine() Appends the NewLine character(s). public StringMakerHandle AppendLine() Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendLine(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters, followed by the NewLine character(s). public StringMakerHandle AppendLine(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int, bool) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. AppendWithDigitLimit(double, int, bool, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle AppendWithDigitLimit(double value, int digitLimit, bool groupDigits, FloatFormatInfo format) Parameters value double The number to append. digitLimit int The maximum number of digits to display. Results may be converted to scientific notation. groupDigits bool Set true if three-digit groups should be separated by a DigitGroupSeparator. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. ArgumentNullException Thrown if the format is null. Clear() Sets the Length to zero. public StringMakerHandle Clear() Returns StringMakerHandle Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. Exceptions ArgumentException Thrown if the target length is not enough to hold the encoded data. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> Exceptions ArgumentException Thrown if the target length is less than this StringMaker Length. EnsureCapacity(int) Allocates enough internal memory to store the specified number of characters. public int EnsureCapacity(int capacity) Parameters capacity int The total number of characters for which to ensure capacity. Returns int The actual allocated character capacity, may be more than requested. Exceptions ArgumentOutOfRangeException Thrown if capacity is less than zero or greater than MaxCapacity Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(StringMakerHandle) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMakerHandle stringMakerHandle) Parameters stringMakerHandle StringMakerHandle The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of char up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. TrimExcess() Releases excess memory pages to the CharacterArrayPool, and clears characters by setting to '\\0' from the Length index to the end of the page. public StringMakerHandle TrimExcess() Returns StringMakerHandle Returns the instance, enabling a fluent interface. Operators operator +(StringMakerHandle, bool) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, bool value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value bool The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, char) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, char value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value char The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, DateTime) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, DateTime value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value DateTime The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, double) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, double value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value double The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, long) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, long value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value long The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, ReadOnlySpan<char>) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, ReadOnlySpan<char> value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value ReadOnlySpan<char> The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. operator +(StringMakerHandle, ulong) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, ulong value) Parameters stringMakerHandle StringMakerHandle The StringMaker to append. value ulong The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity."
  },
  "api/Switchboard.StringMakerILoggerExtensions.html": {
    "href": "api/Switchboard.StringMakerILoggerExtensions.html",
    "title": "Class StringMakerILoggerExtensions | Switchboard",
    "keywords": "Class StringMakerILoggerExtensions Namespace Switchboard Assembly Switchboard.StringMakerILogger.dll Provides extension methods for the ILogger interface to accept StringMaker messages. public static class StringMakerILoggerExtensions Inheritance object StringMakerILoggerExtensions Methods Log(ILogger, LogLevel, StringMaker, string, string, int) Logs a StringMaker message. public static void Log(this ILogger logger, LogLevel logLevel, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the message. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentNullException Thrown if logger or message are null. ArgumentException Thrown if message is empty. LogCritical(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogTrace(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.StringMakerUnityExtensions.html": {
    "href": "api/Switchboard.StringMakerUnityExtensions.html",
    "title": "Class StringMakerUnityExtensions | Switchboard",
    "keywords": "Class StringMakerUnityExtensions Namespace Switchboard Assembly Switchboard.StringMakerUnity.dll Provides extension methods for StringMaker to append common Unity types. public static class StringMakerUnityExtensions Inheritance object StringMakerUnityExtensions Methods Append(StringMaker, Bounds) Appends a Bounds value. public static StringMaker Append(this StringMaker stringMaker, Bounds value) Parameters stringMaker StringMaker The StringMaker. value Bounds The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, BoundsInt) Appends a BoundsInt value. public static StringMaker Append(this StringMaker stringMaker, BoundsInt value) Parameters stringMaker StringMaker The StringMaker. value BoundsInt The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Color) Appends a Color value. public static StringMaker Append(this StringMaker stringMaker, Color value) Parameters stringMaker StringMaker The StringMaker. value Color The color to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Rect) Appends a Rect value. public static StringMaker Append(this StringMaker stringMaker, Rect value) Parameters stringMaker StringMaker The StringMaker. value Rect The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, RectInt) Appends a RectInt value. public static StringMaker Append(this StringMaker stringMaker, RectInt value) Parameters stringMaker StringMaker The StringMaker. value RectInt The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Vector2) Appends a Vector2 value. public static StringMaker Append(this StringMaker stringMaker, Vector2 value) Parameters stringMaker StringMaker The StringMaker. value Vector2 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Vector2Int) Appends a Vector2Int value. public static StringMaker Append(this StringMaker stringMaker, Vector2Int value) Parameters stringMaker StringMaker The StringMaker. value Vector2Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Vector3) Appends a Vector3 value. public static StringMaker Append(this StringMaker stringMaker, Vector3 value) Parameters stringMaker StringMaker The StringMaker. value Vector3 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Vector3Int) Appends a Vector3Int value. public static StringMaker Append(this StringMaker stringMaker, Vector3Int value) Parameters stringMaker StringMaker The StringMaker. value Vector3Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity. Append(StringMaker, Vector4) Appends a Vector4 value. public static StringMaker Append(this StringMaker stringMaker, Vector4 value) Parameters stringMaker StringMaker The StringMaker. value Vector4 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions FormatException Thrown when the new Length would exceed MaxCapacity."
  },
  "api/Switchboard.SwitchboardLogger.html": {
    "href": "api/Switchboard.SwitchboardLogger.html",
    "title": "Class SwitchboardLogger | Switchboard",
    "keywords": "Class SwitchboardLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a single, static ILogger LoggerRoot that can send log output to multiple targets. public static class SwitchboardLogger Inheritance object SwitchboardLogger Properties Root Gets the static logger root instance. public static LoggerRoot Root { get; } Methods AddDefaultUnityLogger() Sends Root log output to Unity's default logger. public static void AddDefaultUnityLogger() HijackDebugLogHandler() Sends calls to Unity's Debug.Log method to the logger Root. public static void HijackDebugLogHandler() RemoveDefaultUnityLogger() Stops sending Root log output to Unity's default logger. public static void RemoveDefaultUnityLogger() RestoreDebugLogHandler() Sends calls to Unity's Debug.Log method straight to Unity's default logger. public static void RestoreDebugLogHandler()"
  },
  "api/Switchboard.SwitchboardMenuOrder.html": {
    "href": "api/Switchboard.SwitchboardMenuOrder.html",
    "title": "Class SwitchboardMenuOrder | Switchboard",
    "keywords": "Class SwitchboardMenuOrder Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides Switchboard's order in the asset creation menu. public static class SwitchboardMenuOrder Inheritance object SwitchboardMenuOrder Fields Value Gets Switchboard's order in the asset creation menu. public const int Value = 1080"
  },
  "api/Switchboard.ThreadSafeObjectPool-1.html": {
    "href": "api/Switchboard.ThreadSafeObjectPool-1.html",
    "title": "Class ThreadSafeObjectPool<T> | Switchboard",
    "keywords": "Class ThreadSafeObjectPool<T> Namespace Switchboard Assembly Switchboard.Collections.dll Stores objects of a specific type in a thread safe pool. Objects are kept in the order of last in, first out. The MaxCount value can be specified to limit the number of objects that may be stored. The Add(T) method will return false if the pool is at max capacity. The internal memory used to store these objects grows and shrinks automatically as objects are added and removed. Unused memory is returned to the SharedObjectArrayPool, so no garbage collection is necessary. public sealed class ThreadSafeObjectPool<T> where T : class Type Parameters T The type of objects that may be stored in the pool. Inheritance object ThreadSafeObjectPool<T> Constructors ThreadSafeObjectPool() Initializes a new instance of the class. public ThreadSafeObjectPool() ThreadSafeObjectPool(int) Initializes a new instance of the class. public ThreadSafeObjectPool(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity. Fields MaxCapacity Gets the maximum number of objects that can be stored in any ThreadSafeObjectPool<T>, which is 65536. public const int MaxCapacity = 65536 Properties Count Gets the current number of objects in the pool. The value may not be accurate as other threads add and remove objects. public int Count { get; } MaxCount Gets the maximum number of objects that may be stored in the pool. The value can be set with the SetMaxCount(int) method. public int MaxCount { get; } Shared Gets a static instance of the class for the specific type T. public static ThreadSafeObjectPool<T> Shared { get; } Methods Add(T) Adds an object to the pool, unless the pool is at max capacity. public bool Add(T item) Parameters item T The object to add to the pool. Returns bool Returns true if the object was added to the pool, otherwise false. Exceptions ArgumentNullException Thrown if item is null. Clear() Removes all objects from the pool. public void Clear() SetMaxCount(int) Sets the maximum number of objects that may be stored in the pool. The method is thread safe, but may be slow if many objects are stored in the pool when the value is reduced. It could cause other threads to become locked if they are also attempting to operate on the pool. public void SetMaxCount(int maxCount) Parameters maxCount int The maximum number of objects that may be stored in the pool. Exceptions ArgumentOutOfRangeException Thrown if the value of maxCount is less than zero, or greater than MaxCapacity. TryGet() Provides an object from the pool, if one is available. public T TryGet() Returns T Returns an object, removed from the pool, if one is available. Otherwise, returns null. TryGet(out T) Provides an object from the pool, if one is available. public bool TryGet(out T item) Parameters item T The object returned from the pool if available, otherwise null. Returns bool Returns true if the object is not null."
  },
  "api/Switchboard.Ticker.html": {
    "href": "api/Switchboard.Ticker.html",
    "title": "Class Ticker | Switchboard",
    "keywords": "Class Ticker Namespace Switchboard Assembly Switchboard.Ticker.dll Invokes an event once per update. public sealed class Ticker : TickerBase, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase Ticker Implements ITicker Inherited Members TickerBase.StartTick(ActionWithInput<FrameOfTime>) TickerBase.StartTick(ActionWithInput<FrameOfTime>, int) TickerBase.StopTick(ActionWithInput<FrameOfTime>)"
  },
  "api/Switchboard.TickerBase.html": {
    "href": "api/Switchboard.TickerBase.html",
    "title": "Class TickerBase | Switchboard",
    "keywords": "Class TickerBase Namespace Switchboard Assembly Switchboard.Ticker.dll Provides an abstract base class for invoking an event once per update. public abstract class TickerBase : MonoBehaviour, ITicker Inheritance object Object Component Behaviour MonoBehaviour TickerBase Implements ITicker Derived FixedTicker LateTicker Ticker Methods OnTick() Invokes the tick event. protected void OnTick() StartTick(ActionWithInput<FrameOfTime>) Adds an observer event handler to an event invoked once per update. public void StartTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The observer event handler to add. Exceptions ArgumentNullException Thrown if the handler is null. StartTick(ActionWithInput<FrameOfTime>, int) Adds an observer event handler to an event invoked once per update. public void StartTick(ActionWithInput<FrameOfTime> handler, int priority) Parameters handler ActionWithInput<FrameOfTime> The event handler to add. priority int The order in which the event handler will be called. Exceptions ArgumentNullException Thrown if the handler is null. StopTick(ActionWithInput<FrameOfTime>) Removes an observer event handler from the the event. public void StopTick(ActionWithInput<FrameOfTime> handler) Parameters handler ActionWithInput<FrameOfTime> The event handler to be removed. Exceptions ArgumentNullException Thrown if the handler is null."
  },
  "api/Switchboard.UnityLogger.html": {
    "href": "api/Switchboard.UnityLogger.html",
    "title": "Class UnityLogger | Switchboard",
    "keywords": "Class UnityLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll An implementation of ILogger that targets the UnityLogHandler. public sealed class UnityLogger : ILogger Inheritance object UnityLogger Implements ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) Properties Default Gets a static instance of the class. public static UnityLogger Default { get; } DisplayCallerInfo Gets or sets whether information about the caller of the log method should be displayed. public bool DisplayCallerInfo { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Exceptions ArgumentException Thrown if message is empty."
  },
  "api/Switchboard.UnityLogHandler.html": {
    "href": "api/Switchboard.UnityLogHandler.html",
    "title": "Class UnityLogHandler | Switchboard",
    "keywords": "Class UnityLogHandler Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a reference to the default Unity log handler. public static class UnityLogHandler Inheritance object UnityLogHandler Properties Default Gets the default Unity log handler. public static ILogHandler Default { get; }"
  },
  "api/Switchboard.UnityLogHijacker.html": {
    "href": "api/Switchboard.UnityLogHijacker.html",
    "title": "Class UnityLogHijacker | Switchboard",
    "keywords": "Class UnityLogHijacker Namespace Switchboard Assembly Switchboard.UnityLogger.dll Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. public sealed class UnityLogHijacker : ILogHandler Inheritance object UnityLogHijacker Implements ILogHandler Constructors UnityLogHijacker(ILogger) Initializes a new instance of the class. public UnityLogHijacker(ILogger logger) Parameters logger ILogger The logger to be used instead of the Unity logger. Exceptions ArgumentNullException Thrown if logger is null. Methods LogException(Exception, Object) Logs an exception message. public void LogException(Exception exception, Object context) Parameters exception Exception Runtime Exception. context Object The UnityEngine.Object to which the exception applies. LogFormat(LogType, Object, string, params object[]) Logs a formatted message. public void LogFormat(LogType logType, Object context, string format, params object[] args) Parameters logType LogType The type of log message. context Object The UnityEngine.Object to which the message applies. format string A composite format string. args object[] Format arguments."
  },
  "index.html": {
    "href": "index.html",
    "title": "Switchboard | Switchboard",
    "keywords": "Switchboard Switchboard is a dependency injection framework for the Unity game engine, and more. It provides a composition root where you can add code that runs when you play, in any scene. From there, you can initialize objects that MonoBehaviours get when they awake. Getting a dependency as an interface creates loose coupling, enabling modular design. You don't need to create singletons, or service locators, or load certain scenes before others. The composition root can be changed easily in the editor, perfect for testing and experimentation. An innovative design pattern allows Switchboard to completely avoid the costly reflection and code generation that other frameworks use. Switchboard is highly compatible with other projects and plugins. Your MonoBehaviours don't need to inherit from a certain base class or implement an interface. There are no framework specific attributes or methods to add to your code base. Domain reload and scene reload can be disabled, so you can enter play mode instantly. The performance is beyond compare. Dependencies resolve in milliseconds, and there is no code generation necessary when making changes. Switchboard also provides high performance log files. Log files can be used in debug or release builds with almost no impact on performance, and zero memory allocated for garbage collection. The StringMaker class is a direct replacement for StringBuilder. It allows you to append number variables to strings without allocating garbage memory, which is not possible with StringBuilder in Unity. StringMaker can also render accurate floating-point numbers that standard C# can not. The standard C# methods for displaying floating-point numbers always round the real value to a limited number of digits, even in the debugger! StringMaker can reveal the true value of a floating-point number, formatted to your liking. These, and the other core modules work in any C# application, not just Unity. Applying Switchboard to your project is sure to improve the quality of your application. Download Switchboard from the Unity Asset Store today. Unity Specific Features Dependency Injection Composition Root Update Any Object S.O.L.I.D. Code, Loose Coupling Universal C# Features High Performance Log Files Zero-Garbage Strings Accurate Floating-Point Values"
  },
  "manual/collections.html": {
    "href": "manual/collections.html",
    "title": "Collections | Switchboard",
    "keywords": "Collections Switchboard Collections resize their internal arrays, both growing and shrinking automatically, without allocating garbage memory. Unused internal arrays are returned back to a memory pool. All collections use the same memory pool of object arrays, regardless of the Type of objects stored in the collection. The ObjectArrayPool can store an infinite amount of object arrays without ever allocating any additional memory, as long as the arrays are the same length. This class serves as the basis for pooling all of the underlying memory arrays that serve the other collections. ObjectArrayPools are thread safe. The SharedObjectArrayPool is a static class that holds four ObjectArrayPool instances. Each ObjectArrayPool holds object arrays of a certain length. The four lengths used are 32, 64, 128, and 256. When an ObjectPool, ThreadSafeObjectPool, or DynamicQueue needs to resize its internal memory, it borrows or returns object arrays from the SharedObjectArrayPool. You can set a max count on any ObjectArrayPool, ObjectPool, or ThreadSafeObjectPool. If they fill to the max count, any excess will be subject to garbage collection as usual."
  },
  "manual/dependency-injection.html": {
    "href": "manual/dependency-injection.html",
    "title": "What is Dependency Injection? | Switchboard",
    "keywords": "What is Dependency Injection? When you instantiate a new object by calling the class contructor and provide a constructor argument, you have just performed dependency injection. In fact, that is the ideal, and most common form of dependency injection. Constructor injection should be preferred whenever and wherever possible. Objects that instantiate other objects should provide dependencies to their child objects. Dependencies should be passed down through the application hierarchy, starting from the composition root. In a standard C# application, the composition root is the Main(string[] args) method that runs when the executable runs, but Unity has no composition root by default. With dependency injection, the dependent object does not seek out its own dependency, like when using a static reference. When an object contains a direct reference to a type that it depends on, those types become tightly coupled. You cannot separate the implementation of the dependent object from the object upon which it depends. This can lead to an unnecessary amount of strong dependencies throughout your code base over time, eventually leading to spaghetti code, where all of your classes are tangled together. They can't be separated from one another without causing compilation errors. When many classes have these types of strong dependencies it can feel like every file in the project has a chain of dependencies that ultimately references every other file in the project. This makes it very difficult to separate your modules along clean conceptual boundaries. So, what is the alternative? When you have a well defined separation of concerns between the responsibilities of various classes and modules, those modules can be loosely coupled together via abstract interfaces. An interface provides a minimal surface for object interaction, only the required methods, properties, and events, without requiring the full implementation. This allows your types to depend on simple interfaces, rather than needing the particular implementation of a certain class. When an object depends on an interface, it becomes trivial to swap the actual implementation behind that interface. And, the dependent object is more portable, as it only requires the interface. This allows code modules to be transferred more easily between projects. Programming objects to depend on interfaces encourages S.O.L.I.D. programming principles and clean code architecture. More accurately, S.O.L.I.D. code actually requires interface injection. When a type depends on an interface, the concrete implementation of that interface must be injected in from the outside. You can't just make reference to a static interface. So, dependency injection is a fundamental and necessary component of a truly modular code base. Singletons, Service Locators, and Static Classes Unity programmers are quite familiar with using singletons, service locators, and static classes. However, when one type depends on a static reference to another type, it becomes tightly coupled to it. It cannot compile without the other. So, why use static references if they always result in tight coupling? In fact, there are many who say that you should never use them. However, there are circumstances where tight coupling is acceptable. And, there are even circumstances where a static reference is the best option, in my opinion. This is indeed the case in an environment like Unity. In Unity, your scripts commonly derive from the MonoBehaviour class, and are instantiated automatically by the Unity runtime. By the time your MonoBehaviour methods execute, the constructor has already been called. So, constructor injection is not an option. We could use method injection, or inject values directly into properties, but without knowing the new object has been instantiated, how is injection triggered? Most frameworks only concern themselves with injecting objects that are already saved into scene files. They usually require additional components to be added to your scenes, and may require you to load certain scenes and components first. If they even support injecting dynamically instantiated game objects, like dropping a prefab into a scene while play testing, they usually do so with a service locator. Often these service locators are bloated with dependencies that run deep into the framework. The Unity Environment Unity does not allow you to directly instantiate new instances of MonoBehaviour derived scripts using a constructor. Constructors are called by the Unity runtime. There is no event invoked when a new MonoBehaviour is created. There is no way to register a factory to inject new MonoBehaviours. Therefore, your scripts have no choice but to directly reference some static dependency. Objects can be added directly to a scene from the editor while playing, and there is no way for you to inject them. The consensus wisdom around dependency injection and static references is not always applicable, due to these environmental differences. The Service Locator pattern is relevant here. A service locator is a singleton or static class that provides dependencies to other objects upon request. It is a service that provides other services. This pattern comes with all of the concerns associated with any other static reference, like tightly coupling your code to that particular implementation. In most other programming environments, where constructor injection is not restricted, this is an anti-pattern, to be avoided. But, when constructor injection is not available, a service locator may be unavoidable. However, when the implementation is sufficiently abstract, even a service locator can work like an interface. This is the inspiration for the Injector Locator pattern. The Injector Locator Pattern When object instantiation is out of your control, and constructor injection is impossible, it may be necessary to use a static reference to satisfy certain dependencies. That is why Unity dependency injection frameworks, if they even support injecting editor insantiated objects, use a service locator of some kind to do it. However, the service locator should not be fully implemented. If abstract, the service locator can function much like an interface. For that purpose, the InjectorLocator was created. It serves as a static reference point with a single responsibility, to provide an IInjector interface. The IInjector has a generic method that can then provide an instance of any type. One concern with static references is that they are globally accessible. Global values can be altered from anywhere, potentially corrupting the state of the application. The IInjector assigned to the InjectorLocator could be removed while the application is running. However, C# delegates provide a way of setting a global value, and keeping access private for the setter. Delegates can refer to private or protected methods, enabling classes to hide public access to a method delegate. If a global value is actually a delegate that returns the desired value, a private method delegate can be assigned. Global access to remove the assigned delegate can then be restricted, unless the matching delegate is provided. Therefore, even though the static value is global, if the assigned delegate is private, it cannot be removed by an external agent. The Switchboard implementation of this pattern is free and open source under the MIT license. It is publicly available on the Switchboard GitHub repository located at https://github.com/swipetrack/switchboard/tree/main/interface/InjectorLocator. The entire Switchboard framework is designed for loose coupling to your application. Therefore, the only real dependency you need is on this simple, open source pattern. Technically, the actual Switchboard framework can be removed from your project at any time without causing an error. The IInjector Interface The IInjector interface is the fundamental interface for dependency injection. It consists of a single, generic method. The generic type argument specifies the type of object requested from the IInjector. The IInjector can return an instance of that type, but it may return null if it cannot fulfill the request. Once you have an IInjector instance, you can request any type of object from it, and it is all done via loose coupling. Composition Root & Dependency Injector The CompositionRoot is the entry point for initializing the application at run time. This happens when you press play in the editor, or launch the application. On the CompositionRootAsset in the Switchboard settings menu there is a Dependency Injector field. There, you can assign a DependencyInjector asset. The DependencyInjector class implements the IInjector interface, and the CompositionRoot passes it through as the result of the InjectorLocator.GetInjector() method. This allows MonoBehaviours to indirectly reference the DependencyInjector as an IInjector. They only need to directly reference the InjectorLocator. First, the CompositionRoot loads the CompositionRootAsset. Then, it invokes Activation() on the assigned DependencyInjector. The DependencyInjector assigned to the CompositionRoot is saved when play begins, so changing the value at run time has no practical effect. In the MonoBehaviour.Awake() method, MonoBehaviours can call InjectorLocator.GetInjector() to get the DependencyInjector as an IInjector. Then, the IInjector.Get() method can return any Type of dependency from the DependencyInjector. Deactivation() is invoked when the Destructor hidden in Unity's persistent DontDestroyOnLoad scene is destroyed. A DependencyInjector is a ScriptableObject, so it exists as an asset in your project, not in the scene hierarchy. The DependencyInjector is where you can bind assets and other objects to the root of your application. Tight coupling occurs in the DependencyInjector, to the root objects bound within it, so that everything else beyond the root can remain modular, using injected references to each other. Serialized Unity objects with the Expandable attribute can be expanded in the editor, so you don't have to select a nested object to modify its properties. Everything nested within the CompositionRoot can be modified in one place. You can instantiate pure C# classes and pass the properties assigned to the DependencyInjector as arguments to class constructors. Thus, you can compose the business logic of your application at the composition root, using plain old C# classes and constructor injection. You can derive various implementations of DependencyInjector, and save multiple instances in the editor. The injector can be swapped out easily to completely change the root behavior of your application. You can create a mock dependency injector and swap to it for unit testing. Any properties that you change in the DependencyInjector asset are live at run time, and persist after you stop playing. This makes testing, tweaking, and experimenting simple and intuitive. Comparison to Other Frameworks You may be wondering how Switchboard compares to other dependency injection frameworks. Most other frameworks rely on reflection. Reflection in C# allows you to access information, methods, and properties of a type or instance, even if they are not public. Reflection operations are relatively costly in terms of performance. Reflection should be avoided at run time, especially in the context of video games, where performance is a top priority. Most dependency injection frameworks have you assign framework specific attributes to your class members. At some point, hopefully not at run time, the dependent objects undergo reflection. All of their members are examined for those attributes, and dependencies are injected accordingly. If not at run time, code or content gets generated by a reflection baking process that happens earlier, to improve performance. The problem with reflection is that it is notoriously slow. The performance penalty is either added to your game at run time, or it is added to your development process in dev time. Whenever changes are made, the reflection baking process has to happen again. Relying on reflection can also result in problems caused by code stripping. Code stripping automatically removes unused code from your build, and Unity does not understand reflection based relationships in your code. Switchboard has none of those issues. No reflection occurs at design time, compile time, or run time. It is avoided entirely, and the performance is nearly instantaneous. Switchboard is fully compatible with disabled domain reload and scene reload. You can press play and begin working nearly instantly. You can drop a prefab game object into a scene, and it will automatically get its dependencies without affecting performance. Properties at the composition root can be updated in real time, and the changes persist when you stop play mode, unlike changes in the scene hierarchy, which are reverted. All dependencies can be altered with a single reference, and you're ready to play immediately. Some solutions also struggle with execution order. Getting your composition root to load first, and persist until all MonoBehaviours have been destroyed, is a genuine problem. Many plugins have elaborate requirements for you to deal with. You may be required to add framework specific objects to your scenes or project. You may have to load a certain scene before you can load others. Switchboard has all of the execution order issues resolved for you. The CompositionRoot activates the DependencyInjector when you press play, or when starting the application. When it activates, the first scene is already loaded, but no MonoBehaviour Awake(), OnEnable(), or Start() methods have been called. You can instantiate objects, including game objects, before any other scripts execute. If a class doesn't need to exist in a scene, it can just exist at the composition root. You will be able to write more of your code as pure C# classes that activate when you play. The DependencyInjector automatically deactivates after all other MonoBehaviours have been destroyed. Eliminating an explicit reference to another class does not necessarily mean that you have eliminated tight coupling. If your code base is littered with framework specific attributes, that is a type of dependency. Some frameworks require your MonoBehaviours to derive from a specific base class, or implement a particular interface, or add framework specific components. To inject objects that are instantiated via the editor, other frameworks also use a static service locator, just like Switchboard. This service locator may be buried in some other component that your code does not directly reference, but their service locator is still a requirement. Switchboard is the only framework that embraces that fact, and abstracts the service locator into an open source pattern. Other frameworks require you to make use their concrete service locator implementation with excessive, framework specific dependencies. That is, if they even support editor instantiated object injection at all. With other frameworks, even if some of your dependencies are loosely coupled, the rest of the project still becomes tightly coupled to the framework. It really negates the overall purpose of dependency injection. When using Switchboard, you only depend on the open source Injector Locator pattern, and you only reference it on one line per class. Technically, Switchboard can be fully removed from the project and replaced with another solution without changing a single line of code, or modifying your scenes or other objects in any way. Other plugins are often too feature rich. A plethora of features may seem enticing. More is better right? But, when the features get too specific they constitute tight coupling to a unique pattern. If no other framework could even theoretically align with that logical interface, then your project is tightly coupled to that framework. With Switchboard, if there are any features that you don't want, they can be removed without affecting the others. Switchboard was designed from the ground up to minimize inter-assembly dependencies within the framework itself. If you only want dependency injection, for example, you can simply remove the other features. More features means more documentation, and more for you to learn. Switchboard aims to be simple and elegant. The goal is to get out of your way, so you can develop clean, stable code quickly, without disruption from a plugin."
  },
  "manual/feedback.html": {
    "href": "manual/feedback.html",
    "title": "Unity Forum | Switchboard",
    "keywords": "Unity Forum Here is the official Unity Forum thread for Switchboard. Choose the Watch Thread option to receive updates: https://forum.unity.com/threads/switchboard-dependency-injection-log-files-zero-gc-strings.1509374/ Discussion Forum If you would like to discuss any topic please do so at: https://github.com/swipetrack/switchboard/discussions Report an Issue If you find a bug, want to request a feature, or have any other issue please post it here: https://github.com/swipetrack/switchboard/issues Direct Message If you would like to send a direct message concerning Switchboard, please send an email to switchboard@swipetrack.com. Review Please consider leaving a positive review on the Unity Asset Store. It will be greatly appreciated!"
  },
  "manual/interface.html": {
    "href": "manual/interface.html",
    "title": "The Interface | Switchboard",
    "keywords": "The Interface The following represents the interface on which your software may depend, without tightly coupling to Switchboard. If your code depends only on these references, then Switchboard can be removed without error, and with minimal effort. The entire framework is designed for loose coupling, so you never commit to more than you need. The source code for these interfaces is publicly available under the MIT open source license here: https://github.com/swipetrack/switchboard/tree/main/interface Injector Locator The InjectorLocator provides the IInjector instance. Though technically not an interface, this class represents a novel design pattern in itself. It consists of fewer than thirty lines of code. It is so simple that it needs no testing. Although it is global, it cannot be globally modified. This negates the common criticisms of the service locator pattern, when constructor injection is unavailable. If you're willing to couple one line of code to this simple, open source pattern, reflection-free dependency injection becomes a reality. See the Dependency Injection section for more details. public static class InjectorLocator { private static Func<IInjector> LocatorDelegate; public static IInjector GetInjector() => LocatorDelegate?.Invoke(); public static void AssignLocatorDelegate(Func<IInjector> locatorDelegate) { if(locatorDelegate == null) throw new ArgumentNullException(nameof(locatorDelegate)); if(LocatorDelegate != null) throw new InvalidOperationException(\"The locator delegate is already assigned.\"); LocatorDelegate = locatorDelegate; } public static void RemoveLocatorDelegate(Func<IInjector> locatorDelegate) { if(locatorDelegate == null) throw new ArgumentNullException(nameof(locatorDelegate)); if(LocatorDelegate == locatorDelegate) LocatorDelegate = null; } } IInjector The IInjector interface can provide an instance of any type of class upon request. public interface IInjector { T Get<T>() where T : class; } ILogger The ILogger interface is mostly identical to the typical .NET ILogger interface in the way it is used. However, the Switchboard.ILogger interface accepts a ReadOnlySpan of characters, which supports both string and char[] arguments, as well as StringMaker (by extension method) for zero-garbage logging. Also, it is able to automatically include the file name, line number, and method where the log originated, with essentially no impact on performance. ITicker ITicker is the interface that can bind a method from any class to Unity's Update() method. The interface is intentionally limited, with only support for Update() ticks. All games have an update loop. Defining the interface further for LateUpdate() or FixedUpdate() could represent tight coupling to Unity specific logic. LateUpdate() and FixedUpdate() events are available via direct reference to the ApplicationTicker class. ActionWithInput The ActionWithInput delegate is similar to a .NET Action which accepts a single argument, except the argument is passed using the \"in\" keyword, which makes it a readonly reference parameter. This should have essentially no effect on passing class arguments, but it allows for efficient passing of readonly struct arguments. That means new event data can be instantiated on the stack as a local readonly struct, then passed into the event via readonly reference. That way, no garbage memory is ever allocated for new event arguments. FrameOfTime FrameOfTime is a readonly struct that represents the event data passed to event handlers when ticker events are invoked. StringMaker Although using StringMaker creates a tightly coupled dependency, it deserves an honorable mention here because it shares a syntactic interface with the standard .NET StringBuilder class. They have compatible duck typing, sharing most of the same methods and properties. Therefore, replacing instances of StringBuilder with StringMaker, or vice versa, should be mostly a find and replace operation."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "User Manual | Switchboard",
    "keywords": "User Manual Welcome to the Switchboard user manual. Please use the table of contents to navigate to other pages. Switchboard Switchboard is a dependency injection framework for the Unity game engine, and more. It provides a composition root where you can add code that runs when you play, in any scene. From there, you can initialize objects that MonoBehaviours get when they awake. Getting a dependency as an interface creates loose coupling, enabling modular design. You don't need to create singletons, or service locators, or load certain scenes before others. The composition root can be changed easily in the editor, perfect for testing and experimentation. An innovative design pattern allows Switchboard to completely avoid the costly reflection and code generation that other frameworks use. Switchboard is highly compatible with other projects and plugins. Your MonoBehaviours don't need to inherit from a certain base class or implement an interface. There are no framework specific attributes or methods to add to your code base. Domain reload and scene reload can be disabled, so you can enter play mode instantly. The performance is beyond compare. Dependencies resolve in milliseconds, and there is no code generation necessary when making changes. Switchboard also provides high performance log files. Log files can be used in debug or release builds with almost no impact on performance, and zero memory allocated for garbage collection. The StringMaker class is a direct replacement for StringBuilder. It allows you to append number variables to strings without allocating garbage memory, which is not possible with StringBuilder in Unity. StringMaker can also render accurate floating-point numbers that standard C# can not. The standard C# methods for displaying floating-point numbers always round the real value to a limited number of digits, even in the debugger! StringMaker can reveal the true value of a floating-point number, formatted to your liking. These, and the other core modules work in any C# application, not just Unity. Applying Switchboard to your project is sure to improve the quality of your application. Download Switchboard from the Unity Asset Store today."
  },
  "manual/logger.html": {
    "href": "manual/logger.html",
    "title": "Core Logger | Switchboard",
    "keywords": "Core Logger Switchboard includes a logging framework that writes persistent log files to disk, on any hardware platform, with minimal performance impact. With Switchboard you can record log files without allocating a single byte of memory for garbage collection. Most of the logger module is in the Core library, which has no dependencies on Unity. Switchboard's ILogger interface and LogFileWriter can be used in any C# application. Switchboard implements an ILogger interface that is meant to be essentially interchangeable with the standard .NET ILogger interface. The main implementation of the ILogger interface is the LoggerRoot, which maintains an array of other ILogger implementations, and calls the appropriate log method on each one. These are referred to as log targets, but they have no special definition because they are just other ILogger implementations. Typically, the main ILogger instance that gets injected is a LoggerRoot with a LogFileWriter, and potentially other log targets. Custom log targets can be added to the LoggerRoot, so that logs are sent to multiple targets. Setting the LogLevel on an ILogger implementation, like the LoggerRoot or LogFileWriter, restricts which log entries are recorded. If a log entry's LogLevel is lower than the target, then it is not recorded. Log formatting can be customized by implementing the ILogFormatter interface. The LogFileWriter will use the implementation that you pass to its constructor for each new log entry, before it's added to the queue. Custom formatting can be applied based on the log level, the file path, line number, and method that logged the entry, or any other data available to your custom formatter. If LogFileWriter.DisplayCallerInfo is true, the Format method with caller information will be called, instead of the basic Format method. Append the desired log output to the empty StringMakerHandle result, and it will be written to the log file. One caveat of the LogFileWriter is that it's designed for a loop based system, as is the case in game development. When a log entry is sent to the LogFileWriter, it is formatted and added to a queue of entries that will be flushed to disk later. This design decouples the log call from the more costly process of opening a FileStream and flushing the appropriate bytes to the disk. Therefore, LogFileWriter.FlushLogs() must be invoked periodically. In Switchboard's standard use case, this method is called at the end of each frame. In your application, you may call this method wherever it seems most appropriate. However, if logs are not flushed regularly, it becomes possible for many logs to build up in the queue, which could cause flushing to take longer. Opening the FileStream is a costly operation. By default, Switchboard opens the FileStream and keeps it open for the duration of the application. The LogFileWriter OpenNewFile() or Open() methods will open the FileStream, creating a new file if necessary, and keep it open until Close() is called. Flushing logs will also open the FileStream if it is not already open. Unity Logger Switchboard includes an ILogger implementation that writes to Unity's default logger. When you use the ILogger interface provided by the BasicInjector, log entries are sent to SwitchboardLogger.Root. SwitchboardLogger.Root is the static LoggerRoot in Unity. It has the UnityLogger target assigned by default, which sends log entries to Unity's default logger. So, ILogger log entries will still be sent to the default Console logs. The BasicInjector disables the UnityLogger in built applications, outside of the Unity editor, if a Switchboard log file is created. Unity also has an ILogger interface, but it is mostly unused by anyone for anything. So, when using Switchboard.ILogger and UnityEngine, you will have to define the following alias with your using statements: using ILogger = Switchboard.ILogger. That will make it clear that ILogger refers to the Switchboard.ILogger interface. The SwitchboardLogger can override the default UnityLogHandler with a UnityLogHijacker that routes Debug.Log calls to the SwitchboardLogger.Root instead. The LoggerRoot still sends the hijacked Debug.Log calls to the UnityLogger, but they can also be sent to any other log target as well, like the LogFileWriter and your own custom log targets. So, even Debug.Log calls get routed to Switchboard log files. The static SwitchboardLogger has helper methods for hijacking or restoring the default UnityLogHandler for Debug.Log calls, and for disabling or enabling the UnityLogger target on the Root logger. The FileLogger component simplifies LogFileWriter operations in Unity. When a FileLogger component is created, it will disable itself on Awake by default. That allows you to create a FileLogger from script and configure its properties before enabling it. When the FileLogger is enabled it will attempt to open a log file. If it fails to open a log file, it will automatically disable. An enabled FileLogger has an open log file on disk. It implements the ILogger interface, so accessing it as an ILogger reference gives you all of the expected functionality. It can be assigned to the Root logger as a target, or referenced directly if you prefer. Configuration Here is how the BasicInjector enables log files. using System; using UnityEngine; namespace Switchboard { [CreateAssetMenu(fileName = nameof(BasicInjector), menuName = \"Switchboard/Basic Injector\", order = SwitchboardMenuOrder.Value)] public class BasicInjector : DependencyInjector { [Tooltip(\"Sets the log level at activation.\")] public LogLevel LogLevel; [Tooltip(\"Sets whether the log should display caller info.\")] public bool DisplayCallerInfo; [Tooltip(\"Gets or sets the hardware platforms where log files will be enabled.\")] public PlatformFlags LogFilePlatforms = (PlatformFlags)532680447; protected override void Activation() { // Configure Switchboard logger. SwitchboardLogger.Root.LogLevel = LogLevel; UnityLogger.Default.DisplayCallerInfo = DisplayCallerInfo; // Activate log files. if(LogFilePlatforms.HasFlag(ApplicationPlatform.Flag)) { GameObject logFileObject = new GameObject(nameof(FileLogger)); DontDestroyOnLoad(logFileObject); logFileObject.hideFlags = HideFlags.HideInHierarchy; // Configure log files. FileLogger logFiles = logFileObject.AddComponent<FileLogger>(); // Default Values: //logFiles.Directory = Application.persistentDataPath; //logFiles.FileNamePrefix = Application.productName.Replace(\" \", \"\"); //logFiles.FileExtension = LogFileWriter.DefaultFileExtension; //logFiles.FileSizeLimit = LogFileWriter.DefaultFileSizeLimit; //logFiles.DirectorySizeLimit = FileLogger.DefaultDirectorySizeLimit; //logFiles.Formatter = StandardLogFormatter.Default; logFiles.LogLevel = LogLevel; logFiles.DisplayCallerInfo = DisplayCallerInfo; logFiles.enabled = true; if(logFiles.enabled) { // Add log files to the root logger. SwitchboardLogger.Root.Add(logFiles); logFiles.Destroyed += static (ILogger logger) => SwitchboardLogger.Root.Remove(logger); // Send Debug.Log calls to the root logger, not directly to Unity's default logger. // The root logger still sends the messages to Unity's default logger, but they pass through the root first. SwitchboardLogger.HijackDebugLogHandler(); if(!Application.isEditor) { // Remove Unity's default logger from the root logger, disabling Unity's log files outside of the editor. SwitchboardLogger.RemoveDefaultUnityLogger(); logFiles.Destroyed += static (ILogger logger) => SwitchboardLogger.AddDefaultUnityLogger(); } // Add hardware platform information directly to the log file. logFiles.LogInformation(PlatformStatLog.GetStatLog()); } else Destroy(logFileObject); } } protected override void Deactivation() { // Send Debug.Log calls directly to Unity's default logger. SwitchboardLogger.RestoreDebugLogHandler(); } public override T Get<T>() { Type type = typeof(T); if(type == typeof(ILogger)) return SwitchboardLogger.Root as T; return null; } } } FileLogger Here is the FileLogger, showing how a LogFileWriter is used. using System; using System.Runtime.CompilerServices; using UnityEngine; namespace Switchboard { // Provides a helpful utility for using LogFileWriter objects in Unity. [DefaultExecutionOrder(31999)] public sealed class FileLogger : MonoBehaviour, ILogger { private LogFileWriter LogFileWriter; public string Path => LogFileWriter?.Path; [Tooltip(\"The component will automatically disable on Awake if this is true. Allows components created in script to set properties before enabling.\")] [SerializeField] private bool DisableOnAwake = true; // The directory where log files will be created. Setting a new value disables the component. public string Directory { get => _Directory; set { _Directory = value; enabled = false; } } private string _Directory; [Tooltip(\"Log file names begin with this, but a timestamp will be added to ensure file names are different. Setting a new value disables the component.\")] public string FileNamePrefix { get => _FileNamePrefix; set { _FileNamePrefix = value; enabled = false; } } [SerializeField][Delayed] private string _FileNamePrefix; [Tooltip(\"The file extension applied to the file name. Setting a new value disables the component.\")] public string FileExtension { get => _FileExtension; set { _FileExtension = value; enabled = false; } } [SerializeField][Delayed] private string _FileExtension = LogFileWriter.DefaultFileExtension; [Tooltip(\"The maximum size of log files, in bytes. When a log file reaches the size limit a new file will be created.\")] public int FileSizeLimit { get => _FileSizeLimit; set { if(LogFileWriter != null) LogFileWriter.FileSizeLimit = value; _FileSizeLimit = value; } } [SerializeField][Delayed][Min(LogFileWriter.MaxBytesPerLog)] private int _FileSizeLimit = LogFileWriter.DefaultFileSizeLimit; [Tooltip(\"The total number of bytes allowed for all log files in the log directory from this source. The newest file will not be removed.\")] public int DirectorySizeLimit { get => _DirectorySizeLimit; set => _DirectorySizeLimit = value; } [SerializeField][Delayed] private int _DirectorySizeLimit = DefaultDirectorySizeLimit; public const int DefaultDirectorySizeLimit = 50_000_000; [Tooltip(\"The minimum log level for a log entry to be written.\")] public LogLevel LogLevel { get => _LogLevel; set { if(LogFileWriter != null) LogFileWriter.LogLevel = value; _LogLevel = value; } } [SerializeField] private LogLevel _LogLevel; [Tooltip(\"Whether information about the caller of a log method should be displayed.\")] public bool DisplayCallerInfo { get => _DisplayCallerInfo; set { if(LogFileWriter != null) LogFileWriter.DisplayCallerInfo = value; _DisplayCallerInfo = value; } } [SerializeField] private bool _DisplayCallerInfo; [Tooltip(\"How often to synchronize with the system clock, in seconds. This affects the time stamps in the standard log formatter.\")] public float ClockSyncFrequency { get => _ClockSyncFrequency; set => _ClockSyncFrequency = value; } [SerializeField][Delayed][Min(0.0f)] private float _ClockSyncFrequency = DefaultClockSyncFrequency; public const float DefaultClockSyncFrequency = 2.0f; private float ClockSyncTimer; // The formatter to use for formatting log entries. public ILogFormatter Formatter { get => _Formatter; set { if(LogFileWriter != null) LogFileWriter.Formatter = value; _Formatter = value; } } private ILogFormatter _Formatter = StandardLogFormatter.Default; public event Action<ILogger> Destroyed; public void Log(LogLevel logLevel, ReadOnlySpan<char> message, [CallerMemberName] string memberName = null, [CallerFilePath] string filePath = null, [CallerLineNumber] int lineNumber = 0) { LogFileWriter?.Log(logLevel, message, memberName, filePath, lineNumber); } public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) { LogFileWriter?.Log(logLevel, exception, message); } private void OnValidate() { InitializePathProperties(); } private void Awake() { InitializePathProperties(); if(DisableOnAwake) enabled = false; } private void InitializePathProperties() { if(string.IsNullOrEmpty(_Directory)) _Directory = Application.persistentDataPath; if(string.IsNullOrEmpty(_FileNamePrefix)) _FileNamePrefix = Application.productName.Replace(\" \", \"\"); } private void OnEnable() { // Setting LogFileWriter.FileSizeLimit can throw an exception if the value is set too low, below LogFileWriter.MaxBytesPerLog. FileSizeLimit = Math.Max(FileSizeLimit, LogFileWriter.MaxBytesPerLog); // If the path has changed, flush any remaining log entries, then close the file. Set the LogFileWriter null so we can make a new one. if(LogFileWriter != null) { bool pathChanged = LogFileWriter.Directory != Directory; pathChanged |= LogFileWriter.FileNamePrefix != FileNamePrefix; pathChanged |= LogFileWriter.FileExtension != FileExtension; if(pathChanged) { FlushAndCloseLogFile(); LogFileWriter = null; } } // Create a new LogFileWriter object. If it succeeds, the path arguments contain valid characters. Disable on failure. if(LogFileWriter == null) { try { LogFileWriter = new LogFileWriter(Directory, FileNamePrefix, FileExtension, FileSizeLimit, Formatter); LogFileWriter.FileClosed += RemoveExcessLogFiles; } catch(Exception exception) { Debug.LogException(exception); enabled = false; } } // Ensure the LogFileWriter has the latest properties. Try to open the file. Disable on failure. if(LogFileWriter != null) { LogFileWriter.LogLevel = LogLevel; LogFileWriter.DisplayCallerInfo = DisplayCallerInfo; LogFileWriter.Formatter = Formatter; try { LogFileWriter.FileSizeLimit = FileSizeLimit; LogFileWriter.Open(); } catch(Exception exception) { Debug.LogException(exception); enabled = false; } } } private void Update() { FileSizeLimit = Math.Max(FileSizeLimit, LogFileWriter.MaxBytesPerLog); // Synchronize the PreciseClock used by the StandardLogFormatter for timestamps with the system clock. ClockSyncTimer += Time.unscaledDeltaTime; ClockSyncFrequency = Math.Max(ClockSyncFrequency, 0.0f); if(ClockSyncTimer < -ClockSyncFrequency) ClockSyncTimer = 0.0f; if(ClockSyncTimer >= ClockSyncFrequency) { PreciseClock.SynchronizeWithSystemClock(); ClockSyncTimer -= ClockSyncFrequency; if(ClockSyncTimer >= ClockSyncFrequency) ClockSyncTimer = 0.0f; } // Ensure that the LogFileWriter has the latest property values. Disable if the path has changed. if(LogFileWriter != null) { bool pathChanged = LogFileWriter.Directory != Directory; pathChanged |= LogFileWriter.FileNamePrefix != FileNamePrefix; pathChanged |= LogFileWriter.FileExtension != FileExtension; if(!pathChanged) { LogFileWriter.LogLevel = LogLevel; LogFileWriter.DisplayCallerInfo = DisplayCallerInfo; LogFileWriter.Formatter = Formatter; LogFileWriter.FileSizeLimit = FileSizeLimit; } else enabled = false; } } private void LateUpdate() { FlushLogs(); } public void FlushLogs() { LogFileWriter?.FlushLogs(); } private void OnDisable() { FlushAndCloseLogFile(); } private void FlushAndCloseLogFile() { if(LogFileWriter != null) { try { LogFileWriter.FlushLogs(); } catch(Exception exception) { Debug.LogException(exception); } try { LogFileWriter.Close(); } catch(Exception exception) { Debug.LogException(exception); } } } private void OnDestroy() { LogFileWriter = null; Destroyed?.Invoke(this); } public void RemoveExcessLogFiles() { RemoveLogFilesBeyondLimit(LogFileWriter, DirectorySizeLimit); } public void RemoveLogFilesBeyondLimit(int byteLimit) { RemoveLogFilesBeyondLimit(LogFileWriter, byteLimit); } private void RemoveExcessLogFiles(LogFileWriter logFileWriter) { RemoveLogFilesBeyondLimit(logFileWriter, DirectorySizeLimit); } private void RemoveLogFilesBeyondLimit(LogFileWriter logFileWriter, int byteLimit) { if(logFileWriter != null) { try { FileRemover.RemoveFilesBeyondLimit(byteLimit, logFileWriter.Directory, logFileWriter.FileNamePrefix, logFileWriter.FileExtension, true); } catch(Exception exception) { Debug.LogException(exception); } } } } } Example Logs Here is an example log file, which allocates no memory for garbage collection, and performs much faster than Unity's default logs methods."
  },
  "manual/memory-management.html": {
    "href": "manual/memory-management.html",
    "title": "Memory Management | Switchboard",
    "keywords": "Memory Management Switchboard uses memory pooling to avoid garbage collection. A potential negative side effects of pooling memory is that you can effectively simulate a memory leak by pooling too much and never releasing it. Most of of the pooled memory can be controlled by setting the MaxCount value on the four ObjectArrayPool instances held by the SharedObjectArrayPool. Instead of pooling various types of arrays, Switchboard's generic collections all use object arrays internally. SharedObjectArray is the static class that holds four ObjectArrayPool instances for object arrays of lengths 32, 64, 128, and 256. Limiting the MaxCount of those pools will help ensure that your application does not reserve too much memory. When the MaxCount is exceeded, the excess will be discarded for garbage collection as usual. StringMaker also pools character arrays. All StringMaker instances share a public, static CharacterArrayPool. Each character array is 1,024 characters. Each StringMaker can hold 27 of those arrays. The CharacterArrayPool can store up to 65,536 arrays. Set the MaxCount to prevent pooling of too many character arrays. When you want to return the internal character arrays of a StringMaker, set the desired Length and call the TrimExcess method, or just call the Clear method. That will return the unused character arrays to the static CharacterArrayPool."
  },
  "manual/miscellaneous.html": {
    "href": "manual/miscellaneous.html",
    "title": "Expandable Objects | Switchboard",
    "keywords": "Expandable Objects Switchboard uses an Expandable attribute on the DependencyInjector in the CompositionRootAsset. This allows you to assign the DependencyInjector and modify its properties in one place, without having to change the selected object. The Expandable attribute can be applied to any serialized object to add a foldout menu that displays its properties. Expandable object fields can be nested, and there is no depth limit on nested objects. However, if an object has already been expanded once, it will not be displayed again in the same hierarchy. This avoids infinite recursion from circular references. Platform Flags The PlatformFlags enum provides a dropdown menu in Unity for selecting multiple hardware platforms that can be compared against the current platform, for platform dependent conditions. Precise Clock The PreciseClock is a static class that provides DateTime values with the precision of a Stopwatch. File Utilties The File Utilties module provides a PathUtility for operations like validating and combining file paths, and a FileRemover for removing old log files when the directory reaches its limit."
  },
  "manual/roadmap.html": {
    "href": "manual/roadmap.html",
    "title": "Configuration Files | Switchboard",
    "keywords": "Configuration Files A Configuration service is planned, using an IConfiguration interface and custom configuration sources, including an .ini file implementation. This would be a nice fit for the framework as it would allow easy configuration of the logger, so log level and other properties could be customized in built apps. Also, configurable app settings that can be customized after distribution are a common feature that any app might need. Serializable Interfaces A custom property drawer for serializing fields in the editor by interface would lend well to dependency injection, and make concrete DependencyInjector implementations more flexible. Garbage Free Events The planned implementation of a Configuration module would be event based, with observers subscribing to the configuration properties they want to receive. However, standard C# events allocate garbage memory when adding and removing observers. I would like to develop a garbage-free alternative. Memory Pool Management I want to add a more user friendly way of profiling and configuring the memory pools that Switchboard uses to eliminate garbage collection. Every object pool in Switchboard has a Count property that can be used to track current allocations, but it's simple and somewhat hidden. You can set a MaxCount property on memory pools, so they never grow too large, but the MaxCount is not set by default. There should be an easier way to profile and set those values, like using the editor. .NET Host LoggerProvider Adding a LoggerProvider implementation to integrate easily with the standard .NET Host would make it easy for users to integrate Switchboard log files outside of Unity."
  },
  "manual/setup.html": {
    "href": "manual/setup.html",
    "title": "Installation & Basic Setup | Switchboard",
    "keywords": "Installation & Basic Setup Switchboard is available for download through the Unity Asset Store at https://assetstore.unity.com/packages/tools/utilities/switchboard-250879. After importing Switchboard, open the Switchboard menu in the Project Settings window. This will automatically create a CompositionRootAsset at Switchboard/Resources/CompositionRoot.asset. This asset is required by Switchboard at run time. The name of the file cannot be changed, but it can be relocated to any Resources directory. Assign a DependencyInjector asset to the composition root, or you can disable the \"Log Null Injector Error\" option to ignore dependency injection. An example DependencyInjector can be found in the Switchboard/Example/Assets/ directory. If using dependency injection, ensure that the script execution order of the Destructor component is set to the highest value possible so that the DependencyInjector.Deactivation method occurs after all other MonoBehaviours have been destroyed. You can do this by expanding the Switchboard.DependencyInjection.dll and dragging the Destructor class to the Script Execution Order menu in the Project Settings window. Example Note: Example assets are located in the Switchboard/Example/Assets/ directory. Open the SwitchboardExample scene. Assign the example DependencyInjector asset to the Dependency Injector field of the CompositionRootAsset, in the Switchboard Project Settings menu. Press play. See how the color and position of the example object are injected automatically from the model data assigned to the DependencyInjector. Change the color and properties of the model assigned to the DependencyInjector. See how the color and motion of the example object change in real time. Assign the other model asset to the DependencyInjector. If ModelA is assigned, assign ModelB, or vice versa. Drag the ExamplePrefab to the scene hierarchy. See how the color of the new object matches the color of the assigned model, but the object doesn't move. This is intended to demonstrate a potential issue. The DependencyInjector began updating the original model object when the application started playing. The new model was never made to update in the Activation method. The new model is still injected into objects that request it, and the new color is provided, but the model is not functioning as expected. Be aware of this when creating your own DependencyInjector. You may want to save a private reference to original values assigned to the DependencyInjector when it activates, if the values should not change at run time. Stop play. Notice that the changes made to the DependencyInjector and model assets while playing are still there. Changes made while play testing are not lost, unlike scene changes. With the second model assigned, press play. See how the second model creates a totally different behavior in the rendered prefab. You can model the business logic of your application to initialize from the DependencyInjector at the CompositionRoot, while using Unity scenes and components to render the view of the modeled application. Some model logic in scenes may be necessary, depending on the nature of your application. But, in any case, you will have much more control over separating application layers when initializing the app from the CompositionRoot. Open the UnityEngine.Application.persistentDataPath directory for your project to view the generated log files. Create a Custom Dependency Injector The ExampleInjector class can be used as a template for creating your own DependencyInjector. Create a new C# script, or copy the ExampleInjector to create a new DependencyInjector class. Open the script and ensure the class derives from BasicInjector or DependencyInjector. The BasicInjector class includes built-in log file functionality. Derive directly from the DependencyInjector class if you want to customize your DependencyInjector from scratch, with no pre-existing base class features. Add a CreateAssetMenu attribute to the class, similar to the ExampleInjector, so that an instance can be created in the project. If you want the create option to be in the Switchboard section of the Create Menu, use the attribute arguments (menuName = \"Switchboard/Your Injector Name Here\", order = SwitchboardMenuOrder.Value). Override the Activation, Deactivation, and Get methods. If deriving from from BasicInjector, these methods should include a call to the base method. Activation should call base.Activation at the start of the method, but Deactivation and Get should call their base methods at the end. If the Get method of your DependencyInjector derived class does not return an instance of Type T, it should return base.Get. The Activation method will run when the application starts playing, before Awake, OnEnable, or Start methods are called on MonoBehaviours. You can instantiate game objects, components, or prefabs, and they will be added to the first scene before MonoBehaviours activate. However, the composition root enables you to use more pure C# classes that are injected out to scenes only if necessary. Objects that instantiate from the composition root may not need to be MonoBehaviours at all if they don't interact directly with scene components. The Deactivation method will run when the application is ending, but don't assume it is guaranteed. Deactivation may not run in all cases. If the application closes suddenly, it is possible that this method may not be invoked. However, this method is where everything that was initialized during Activation can also be shut down gracefully when play is stopped in the editor. The Get method provides an instance of the requested Type of object, if the DependencyInjector has been activated. This method will not be invoked until Activation has occurred, prior to Deactivation. You can use the typeof(T) operator to compare the request to a certain typeof(IInterface) and return an appropriate object as T. [CreateAssetMenu(fileName = nameof(ExampleInjector), menuName = \"Switchboard/Example Injector\", order = SwitchboardMenuOrder.Value)] public class ExampleInjector : BasicInjector { // Add properties. protected override void Activation() { base.Activation(); // Activate your application. } protected override void Deactivation() { // Deactivate your application. base.Deactivation(); } // Provide dependencies via IInjector.Get<T>(). public override T Get<T>() { Type type = typeof(T); if(type == typeof(IService)) return Service as T; return base.Get<T>(); } } Get Dependencies in MonoBehaviours Call the InjectorLocator.GetInjector method to get the DependencyInjector as an IInjector. If the IInjector instance is not null, use the IInjector.Get method to request dependencies using the generic type argument. If a dependency is required for the MonoBehaviour to function properly, attempt to get the dependency in the OnEnable method. If it is unavailable, set enabled = false. public class ExampleMonoBehaviour : MonoBehaviour { private ILogger Logger; private IService RequiredDependency; private void OnEnable() { IInjector injector = InjectorLocator.GetInjector(); // Get Logger Logger ??= injector?.Get<ILogger>(); // Get Required Dependency RequiredDependency ??= injector?.Get<IService>(); if(RequiredDependency == null) { enabled = false; Logger?.LogError(\"A required dependency was not provided!\"); return; } } private void OnDisable() { // If you release the reference OnDisable, a new instance can be injected OnEnable. RequiredDependency = null; } private void Start() { Logger?.LogInformation(\"Hello world! I definitely have my required dependencies!\"); } } TextMeshPro Integration A TextMeshProExtensions class is included so that you can assign text to TextMesh Pro components with zero GC allocations. The extension methods enable easy assignment of a StringMaker to a TextMesh Pro text component. The methods first check whether the text has actually changed, to avoid re-calculating geometry. Using a StringMaker to assign the text generates zero memory allocations for garbage collection. The script is included with references to TextMesh Pro commented out, so Switchboard does not have an explicit dependency on TextMesh Pro. Uncomment the included script to integrate StringMaker with TextMesh Pro."
  },
  "manual/stringmaker.html": {
    "href": "manual/stringmaker.html",
    "title": "StringMaker | Switchboard",
    "keywords": "StringMaker Modifying a string in C# allocates a new string object every time. Eventually, the garbage collector sweeps up old strings and releases their memory for reuse, but garbage collection is a costly operation. The garbage collector could cause your frame rate to stutter. If possible, it's better not to allocate garbage memory in the first place. Using a StringBuilder can help, but in Unity 2021 and 2022, StringBuilder allocates a new string every time it appends a number variable. Appending number variables to strings is crucial when building dynamic text output. Using a StringBuilder does not eliminate garbage memory, at least not in Unity. (Newer versions of StringBuilder, available outside of Unity, no longer allocate garbage memory when appending number variables.) StringMaker is a direct replacement for StringBuilder that never allocates garbage memory. Neither StringBuilder, nor StringMaker are referenced via interface. They are both tightly coupled dependencies, no matter which one you use. However, I designed StringMaker with method signatures that match StringBuilder methods. So, you can easily find and replace StringBuilder with StringMaker. Most methods should work just as expected. However, there are some StringBuilder methods I did not replicate in StringMaker because I view them as costly or unnecessary. Also, StringMaker includes some additional methods that StringBuilder does not. StringMaker can convert its contents directly into a UTF-8 byte array for easy, garbage-free transmission into a human readable text file. StringMaker is built for Unity. It supports appending Unity specific types, like Vector3, and it integrates with TextMesh Pro. Uncomment the TextMeshProExtensions class to add StringMaker extension methods to TextMesh Pro components. Then you can call the SetText method on a TextMesh Pro component and pass a StringMaker argument to assign text without allocating garbage memory."
  },
  "manual/text-converter.html": {
    "href": "manual/text-converter.html",
    "title": "Text Converter | Switchboard",
    "keywords": "Text Converter The StringMaker class uses the Text Converter module to convert number variables into characters without allocating garbage memory. Numbers can be appended to a StringMaker using all of the methods available via the Text Converter. There are many floating-point numbers that standard C# methods cannot render accurately. Methods like object.ToString() are not capable of rendering more than nine significant digits of a float variable. That includes when inspecting variables in the debugger! So, if your software has floating-point numbers that need to be displayed accurately, FloatToTextConverter can display them. Otherwise, you could be seeing only an approximatation of the actual value that is stored in memory. You can also render integral types, like int variables, with the IntToTextConverter, including as binary or hexadecimal, without allocating garbage. You can use the BitConverter SingleToInt32Bits(float) and DoubleToInt64Bits(double) methods to convert floating-point numbers to integral types, and render them as binary or hexadecimal as well. There is also a DateTimeToTextConverter that can render a DateTime value without allocating garbage. However, the format is limited to the ISO 8601 standard."
  },
  "manual/ticker.html": {
    "href": "manual/ticker.html",
    "title": "Ticker | Switchboard",
    "keywords": "Ticker Switchboard provides a Ticker service, which allows any method to bind to Unity's Update(), LateUpdate(), or FixedUpdate() methods. ApplicationTicker is the static class that lazy loads singleton instances of Ticker, LateTicker, or FixedTicker as needed. These tickers are hidden, persistent MonoBehaviours that invoke an event from the corresponding update method. Ticker performance is equivalent to using Unity's built-in update methods. When adding a delegate to a ticker, the priority parameter allows you to specify the order that observer should receive the event. Each of the three ticker Types can also have their script execution order specified in the Project Settings menu. If an exception is thrown from a ticker delegate, the exception will be logged, but the ticker will continue to update the rest of the observers."
  },
  "release-notes/v1.0.0.html": {
    "href": "release-notes/v1.0.0.html",
    "title": "Version 1.0.0 | Switchboard",
    "keywords": "Version 1.0.0 Initial release."
  },
  "release-notes/v1.1.0.html": {
    "href": "release-notes/v1.1.0.html",
    "title": "Version 1.1.0 | Switchboard",
    "keywords": "Version 1.1.0 Simplified the InjectorLocator pattern. Removed the IInjectable interface. Changed the IInjector method signature from bool Inject (out T) to T Get (). Changed the InjectorLocator to simply provide an IInjector reference via GetInjector() method, and to no longer allow assigning multiple delegates to an event. Rather, only a single delegate can be assigned or removed. This is to discourage attempts at nesting dependency containers via the functionality of InjectorLocator. If a dependency nesting solution is desired, it should be provided at a higher layer of the protocol with a custom DependencyInjector implementation at the CompositionRoot. InjectorLocator throws exceptions directly, not via helper method to help with inlining, because the exceptions are thrown from the AssignLocatorDelegate and RemoveLocatorDelegate methods, so they occur infrequently. DependencyInjector no longer logs a warning if it fails to provide an instance of a type. That is better left to be handled by the derived DependencyInjector, or the dependent client code. DependencyInjector now just makes IInjector.Get () an abstract method to be overloaded directly in derived classes. This helps make the IInjector implementation less mysterious. DependencyInjector removed InvalidOperationException from Get () method. The expected use case is that the CompositionRoot will always have activated the one DependencyInjector instance using it. Removing the exception can only be beneficial for performance. If inactive, it will not invoke the Get method, but it will not throw an exception either. DependencyInjector now uses a State enum to control Activation() and Deactivation(). CompositionRoot avoids the overloaded Unity null equality comparison on the DependencyInjector when deactivating. This allows Deactivation() to still be called, even if the dependency injector asset is deleted from the project while playing. SwitchboardLogger.RootInstance changed to SwitchboardLogger.Root. Changed the name of the ActionIn delegate to ActionWithInput . Changed PlatformStats to PlatformStatsLog, since it's an odd class and I don't want to cause name collisions with other assemblies. Made it more obvious that the CompositionRootAsset in the Switchboard settings menu is readonly. Moved the Expandable attribute assembly from the Interface directory to the Unity directory. Moved StringMakerILoggerExtensions to its own assembly. Moved PlatformStats to the LogFileManager assembly."
  },
  "release-notes/v1.2.0.html": {
    "href": "release-notes/v1.2.0.html",
    "title": "Version 1.2.0 | Switchboard",
    "keywords": "Version 1.2.0 It is now easier to use log files directly without dependencies on any other assemblies. For instance, if you don't want to use dependency injection, or the ticker module, they can be deleted without losing any of the log file functionality provided by the new FileLogger component. Bug Fixes CompositionRoot now always sets its DependencyInjector to null and removes itself from the InjectorLocator when it begins activation, to prevent corrupted state between play sessions in the editor. It will only assign itself to the InjectorLocator if the DependencyInjector state is truly active, with no exceptions. Now, it always saves a reference to the assigned dependency injector BEFORE it attempts to activate it. So, if activating the DependencyInjector throws an exception, it will still deactivate it when play stops. A log file is now opened immediately when the BasicInjector activates. LogFileWriter no longer throws an AggregateException every time it fails to open a new file, only if an exception also occurred when closing the old file. StandardLogFormatter and UnityLogger are now more resilient to caller info that has been manually set to null or empty. Changes Converted LogFileManager into a MonoBehaviour named FileLogger, and added it to the readable Scripts directory. Removed the LogFileManager and ClockSynchronizer assemblies. Changed StringMaker.Clear method to just set Length = 0, just as StringBuilder does. Before, it was releasing its internal memory back to the shared CharacterArrayPool. But, you can achieve that same behavior by manually calling StringMaker.Clear().TrimExcess(). Having StringMaker.Clear() helps enable fluent interface operations, and its more performant and consistent with StringBuilder for it to just set Length = 0. Overloaded the + operator to append basic types to StringMaker. Renamed StringMaker.ThreadStaticInstance, ObjectPool.ThreadStaticInstance, and ThreadSafeObjectPool.StaticInstance properties to Shared. Renamed the ObjectPool and ThreadSafeObjectPool RequestItem methods to TryGet. Updated example code. Simplified example injection code. FloatExample demonstrates usage of StringMaker + operator. Improved formatting of platform stats at the beginning of log files created by the BasicInjector. StandardLogFormatter moved the caller info to come right after the time stamp. Added ILogger extension methods that allow for logging an exception without having to provide a message argument. UnityLogHandler.Initialize method is now private."
  }
}