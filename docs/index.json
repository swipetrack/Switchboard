{
  "api/Switchboard.ApplicationEnd.html": {
    "href": "api/Switchboard.ApplicationEnd.html",
    "title": "Class ApplicationEnd | Switchboard",
    "keywords": "Class ApplicationEnd Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. public static class ApplicationEnd Inheritance object ApplicationEnd Methods Add(Action) Adds an observer Action to an event that is invoked near the very end of the application. public static void Add(Action handler) Parameters handler Action The Action to add to the event. Exceptions ArgumentNullException Thrown if handler is null. InvalidOperationException Thrown if the application is not playing. Remove(Action) Removes an observer Action from the application end event. public static void Remove(Action handler) Parameters handler Action The Action to remove from the event. Exceptions ArgumentNullException Thrown if handler is null."
  },
  "api/Switchboard.CompositionRoot.html": {
    "href": "api/Switchboard.CompositionRoot.html",
    "title": "Class CompositionRoot | Switchboard",
    "keywords": "Class CompositionRoot Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Loads the CompositionRootAsset and initializes the DependencyInjector. public static class CompositionRoot Inheritance object CompositionRoot"
  },
  "api/Switchboard.CompositionRootAsset.html": {
    "href": "api/Switchboard.CompositionRootAsset.html",
    "title": "Class CompositionRootAsset | Switchboard",
    "keywords": "Class CompositionRootAsset Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. [CreateAssetMenu(fileName = \"CompositionRoot\", menuName = \"Switchboard/Composition Root\", order = 1080)] public sealed class CompositionRootAsset : ScriptableObject Inheritance object Object ScriptableObject CompositionRootAsset Fields DependencyInjector The DependencyInjector to initialize when the application starts. [Space] [Expandable(true)] [Tooltip(\"The DependencyInjector to initialize when the application starts.\")] public DependencyInjector DependencyInjector FileName The only relevant file name for a CompositionRootAsset. public const string FileName = \"CompositionRoot\" LogNullInjectorError If true, and the DependencyInjector is null, an error will be logged when the application starts. [Tooltip(\"If true, and the DependencyInjector is null, an error will be logged when the application starts.\")] public bool LogNullInjectorError"
  },
  "api/Switchboard.DateTimeToTextConverter.html": {
    "href": "api/Switchboard.DateTimeToTextConverter.html",
    "title": "Class DateTimeToTextConverter | Switchboard",
    "keywords": "Class DateTimeToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts a DateTime value into a string of characters without allocating memory for garbage collection. public static class DateTimeToTextConverter Inheritance object DateTimeToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent a DateTime value. public const int MaxCharacterCount = 27 Methods ConvertToText(DateTime, Span<char>) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(DateTime, Span<char>, int) Converts a DateTime value into a Span<T> of characters. public static int ConvertToText(this DateTime value, Span<char> result, int subSecondPrecision) Parameters value DateTime The DateTime to convert. result Span<char> The target to contain the result of the conversion. subSecondPrecision int The number of digits to display for fractions of a second. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this DateTime value, T argument, ReadOnlySpanAction<char, T> action) Parameters value DateTime The DateTime to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(DateTime, T, ReadOnlySpanAction<char, T>, int) Converts a DateTime value into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this DateTime value, T argument, ReadOnlySpanAction<char, T> action, int subSecondPrecision) Parameters value DateTime The DateTime to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. subSecondPrecision int The number of digits to display for fractions of a second. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null."
  },
  "api/Switchboard.DependencyInjector.html": {
    "href": "api/Switchboard.DependencyInjector.html",
    "title": "Class DependencyInjector | Switchboard",
    "keywords": "Class DependencyInjector Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides a base representation for a Unity asset that can activate, provide instances of types, then deactivate. public abstract class DependencyInjector : ScriptableObject, IInjector Inheritance object Object ScriptableObject DependencyInjector Implements IInjector Extension Methods IInjectorExtensions.TryGet<T>(IInjector, out T) Properties CurrentState The current state of this instance. public DependencyInjector.State CurrentState { get; } Methods Activate() Calls Activation() if the CurrentState is Inactive. public void Activate() Activation() Invoked when Activate() is called if the CurrentState is Inactive. protected abstract void Activation() Deactivate() Calls Deactivation() if the CurrentState is Active or ActiveWithException. This means that Deactivation() will be called even if an exception was thrown from Activation(). public void Deactivate() Deactivation() Invoked when Deactivate() is called if the CurrentState is Active or ActiveWithException. It may not be called at all if the application exits unexpectedly. protected abstract void Deactivation() Get<T>() Provides an instance of the requested type. public abstract T Get<T>() where T : class Returns T Returns a reference to the requested type, or null. Type Parameters T The type of object requested."
  },
  "api/Switchboard.DependencyInjector.State.html": {
    "href": "api/Switchboard.DependencyInjector.State.html",
    "title": "Enum DependencyInjector.State | Switchboard",
    "keywords": "Enum DependencyInjector.State Namespace Switchboard Assembly Switchboard.DependencyInjection.dll The various states that a DependencyInjector can have while activating and deactivating. public enum DependencyInjector.State Fields Inactive = 0 Activating = 1 Deactivating = 2 ActiveWithException = 3 Active = 4"
  },
  "api/Switchboard.Destructor.html": {
    "href": "api/Switchboard.Destructor.html",
    "title": "Class Destructor | Switchboard",
    "keywords": "Class Destructor Namespace Switchboard Assembly Switchboard.DependencyInjection.dll A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. [DefaultExecutionOrder(32000)] public sealed class Destructor : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Destructor Events Destroyed The event invoked when OnDestroy() is called. public event Action Destroyed"
  },
  "api/Switchboard.ExpandableAttribute.html": {
    "href": "api/Switchboard.ExpandableAttribute.html",
    "title": "Class ExpandableAttribute | Switchboard",
    "keywords": "Class ExpandableAttribute Namespace Switchboard Assembly Switchboard.ExpandableAttribute.dll Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. public sealed class ExpandableAttribute : PropertyAttribute Inheritance object Attribute PropertyAttribute ExpandableAttribute Constructors ExpandableAttribute() The default constructor. public ExpandableAttribute() ExpandableAttribute(bool) A constructor with a runtime read-only argument. public ExpandableAttribute(bool runtimeReadonly) Parameters runtimeReadonly bool Properties RuntimeReadonly Whether the attribute specifies that the object property should be read-only at runtime. public bool RuntimeReadonly { get; set; }"
  },
  "api/Switchboard.FileRemover.html": {
    "href": "api/Switchboard.FileRemover.html",
    "title": "Class FileRemover | Switchboard",
    "keywords": "Class FileRemover Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides methods for removing excess files from a directory. public static class FileRemover Inheritance object FileRemover Methods RemoveFilesBeyondLimit(int, string, string, string) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method. RemoveFilesBeyondLimit(int, string, string, string, bool) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted by CreationTimeUtc. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, or fileNameSuffix are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method. RemoveFilesBeyondLimit(int, string, string, string, bool, Comparison<FileSystemInfo>) Removes excess files from a directory. All files that start with fileNamePrefix and end with fileNameSuffix are sorted according to the sortComparison method. If the fileNamePrefix and fileNameSuffix are both empty, all files in the directory will be considered. Then, the size of each file is added to a cumulative sum. When adding a file's size causes the sum to exceed the byteLimit, that file and all remaining files will be removed from the directory. public static void RemoveFilesBeyondLimit(int byteLimit, string directory, string fileNamePrefix, string fileNameSuffix, bool leaveOneFile, Comparison<FileSystemInfo> sortComparison) Parameters byteLimit int The maximum total size in bytes allowed for all files that match the file name pattern. directory string The directory to search for excess files. fileNamePrefix string The start of the file name pattern, which may be empty. fileNameSuffix string The end of the file name pattern. For example, the file name extension, which may be empty. leaveOneFile bool If true, the first sorted file will not be removed, even if it exceeds the byteLimit. sortComparison Comparison<FileSystemInfo> The comparison method to use for sorting files, before accumulating their file size. Exceptions ArgumentNullException Thrown if the directory, fileNamePrefix, fileNameSuffix, or sortComparison> are null. ArgumentException Thrown if directory, fileNamePrefix, or fileNameSuffix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileNameSuffix contain invalid file name characters, for the current platform. \\ OR \\ Thrown if the platform is Windows, and the fileNameSuffix ends with a period or space character. SecurityException The caller does not have the required permission to access the directory or files. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException The caller does not have the required permission to delete a file. PathTooLongException The specified path exceeds the system-defined maximum length. IOException A file to be deleted is in use. AggregateException Thrown if multiple exceptions occur during the course of this method."
  },
  "api/Switchboard.FloatFormatInfo.html": {
    "href": "api/Switchboard.FloatFormatInfo.html",
    "title": "Class FloatFormatInfo | Switchboard",
    "keywords": "Class FloatFormatInfo Namespace Switchboard Assembly Switchboard.TextConverter.dll Provides detailed options for formatting floating-point numbers. public sealed class FloatFormatInfo Inheritance object FloatFormatInfo Fields DefaultDecimalPoint Gets the default decimal point character. public const char DefaultDecimalPoint = '.' DefaultDigitGroupSeparator Gets the default digit group separator character. public const char DefaultDigitGroupSeparator = ',' DefaultNaNSymbol Gets the default string of characters used to represent a value that is not a number. public const string DefaultNaNSymbol = \"NaN\" DefaultNegativeInfinitySymbol Gets the default string of characters used to represent a negative infinity value. public const string DefaultNegativeInfinitySymbol = \"-Infinity\" DefaultPositiveInfinitySymbol Gets the default string of characters used to represent a positive infinity value. public const string DefaultPositiveInfinitySymbol = \"Infinity\" DefaultScientificNotationCharacter Gets the default character used to represent \"x10 to the power of\" in scientific notation. public const char DefaultScientificNotationCharacter = 'E' Properties DecimalPoint Gets or sets the character to use for the decimal point, separating integral digits from fractional digits. public char DecimalPoint { get; set; } Exceptions ArgumentNullException Thrown if the set value is the null '\\0' character. DigitGroupSeparator Gets or sets the character to use for separating groups of integral digits. public char DigitGroupSeparator { get; set; } Exceptions ArgumentNullException Thrown if the set value is the null '\\0' character. GroupDigits Gets or sets whether to digit groups of three should be separated by the digit group separator. public bool GroupDigits { get; set; } HidePositiveExponentSign Gets or sets whether to hide the positive sign for exponent values in scientific notation. public bool HidePositiveExponentSign { get; set; } MaxDigits Gets or sets the maximum number of digits to display. Scientific notation will be used if necessary. Defaults to MaxValue. public int MaxDigits { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than 1 + MinFractionalDigits. MaxFractionalDigits Gets or sets the maximum number of fractional digits to display. Results will be rounded if necessary. Defaults to MaxValue. public int MaxFractionalDigits { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than MinFractionalDigits. MinExponentDigits Gets or sets the minimum number of digits to display for exponent values in scientific notation. public int MinExponentDigits { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than 0, or greater than 3. MinFractionalDigits Gets or sets the minimum number of fractional digits to display. Will append trailing zeroes if necessary. public int MinFractionalDigits { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than zero, greater than MaxFractionalDigits, or greater than or equal to MaxDigits. NaNSymbol Gets or sets the string of characters to use for representing a value that is not a number. public string NaNSymbol { get; set; } Exceptions ArgumentNullException Thrown if the set value is null. ArgumentException Thrown if the set value is Empty. NegativeInfinitySymbol Gets or sets the string of characters to use for representing a negative infinity value. public string NegativeInfinitySymbol { get; set; } Exceptions ArgumentNullException Thrown if the set value is null. ArgumentException Thrown if the set value is Empty. PositiveInfinitySymbol Gets or sets the string of characters to use for representing a positive infinity value. public string PositiveInfinitySymbol { get; set; } Exceptions ArgumentNullException Thrown if the value is null. ArgumentException Thrown if the value is Empty. ScientificNotationCharacter Gets or sets the character used to represent \"x10 to the power of\" in scientific notation. public char ScientificNotationCharacter { get; set; } Exceptions ArgumentNullException Thrown if the set value is the null '\\0' character. UseScientificNotation Gets or sets whether to display all numbers using scientific notation. public bool UseScientificNotation { get; set; } Methods DotNetRoundTripDoubleFormat() Creates a new FloatFormatInfo instance that matches the standard .NET behavior for the \"G17\" format specifier, with 17 MaxDigits and 2 MinExponentDigits. public static FloatFormatInfo DotNetRoundTripDoubleFormat() Returns FloatFormatInfo Returns the new FloatFormatInfo instance. DotNetRoundTripFloatFormat() Creates a new FloatFormatInfo instance that matches the standard .NET behavior for the \"G9\" format specifier, with 9 MaxDigits and 2 MinExponentDigits. public static FloatFormatInfo DotNetRoundTripFloatFormat() Returns FloatFormatInfo Returns the new FloatFormatInfo instance. DotNetScientificFormat() Creates a new FloatFormatInfo instance that matches the standard .NET behavior for the \"E\" format specifier, with UseScientificNotation enabled, 7 MaxDigits, 6 MinFractionalDigits, and 3 MinExponentDigits. public static FloatFormatInfo DotNetScientificFormat() Returns FloatFormatInfo Returns the new FloatFormatInfo instance. DotNetToStringDoubleFormat() Creates a new FloatFormatInfo instance that matches the standard .NET behavior of double.ToString(), with 15 MaxDigits and 2 MinExponentDigits. public static FloatFormatInfo DotNetToStringDoubleFormat() Returns FloatFormatInfo Returns the new FloatFormatInfo instance. DotNetToStringFloatFormat() Creates a new FloatFormatInfo instance that matches the standard .NET behavior of float.ToString(), with 7 MaxDigits and 2 MinExponentDigits. public static FloatFormatInfo DotNetToStringFloatFormat() Returns FloatFormatInfo Returns the new FloatFormatInfo instance. SetMinAndMaxFractionalDigits(int, int) Allows you to set the min and max fractional digits in a single operation. public void SetMinAndMaxFractionalDigits(int minFractionalDigits, int maxFractionalDigits) Parameters minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits, or minFractionalDigits is greater than or equal to MaxDigits."
  },
  "api/Switchboard.FloatToTextConverter.html": {
    "href": "api/Switchboard.FloatToTextConverter.html",
    "title": "Class FloatToTextConverter | Switchboard",
    "keywords": "Class FloatToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts floating-point numbers into strings of characters without allocating memory for garbage collection. public sealed class FloatToTextConverter Inheritance object FloatToTextConverter Fields MaxCharacterCount Gets the maximum number of characters necessary to represent the exact value of the longest double-precision floating-point number. public const int MaxCharacterCount = 1077 RoundTripDoublePrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a double into text, then back into a double, without changing the binary value of the double. public const int RoundTripDoublePrecision = 17 RoundTripFloatPrecision Gets the maximum number of significant digits that may be necessary to represent the value as text for a round trip conversion from a float into text, then back into a float, without changing the binary value of the float. public const int RoundTripFloatPrecision = 9 Properties ThreadStaticInstance Gets a ThreadStaticAttribute instance of the class. public static FloatToTextConverter ThreadStaticInstance { get; } Methods ConvertToText(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Information used to the format of the result. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public int ConvertToText(double value, Span<char> result, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Information used to the format of the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int minFractionalDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public int ConvertToText(double value, Span<char> result, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. format FloatFormatInfo Information used to the format of the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public void ConvertToText<T>(double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits."
  },
  "api/Switchboard.FloatToTextExtensions.html": {
    "href": "api/Switchboard.FloatToTextExtensions.html",
    "title": "Class FloatToTextExtensions | Switchboard",
    "keywords": "Class FloatToTextExtensions Namespace Switchboard Assembly Switchboard.TextConverter.dll Adds extension methods to float and double for converting to strings of characters. public static class FloatToTextExtensions Inheritance object FloatToTextExtensions Methods ConvertToText(double, Span<char>) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, FloatFormatInfo format) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, FloatFormatInfo, out bool) Converts a double-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this double value, Span<char> result, FloatFormatInfo format, out bool valueIsNegative) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(double, Span<char>, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int minFractionalDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText(double, Span<char>, int, int) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText(double, Span<char>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this double value, Span<char> result, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText(float, Span<char>) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, FloatFormatInfo format) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Detailed settings for formatting the result. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, FloatFormatInfo, out bool) Converts a single-precision floating-point number into a Span<T> of characters, without a negative sign. public static int ConvertToText(this float value, Span<char> result, FloatFormatInfo format, out bool valueIsNegative) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. format FloatFormatInfo Detailed settings for formatting the result. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(float, Span<char>, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int minFractionalDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText(float, Span<char>, int, int) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int minFractionalDigits, int maxFractionalDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText(float, Span<char>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters. public static int ConvertToText(this float value, Span<char> result, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value float The number to convert. result Span<char> The target to contain the result of the conversion. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, FloatFormatInfo) Converts a double-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, FloatFormatInfo format) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(double, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a double-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this double value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, FloatFormatInfo) Converts a single-precision floating-point number into a Span<T> of characters. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, FloatFormatInfo format) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. format FloatFormatInfo Detailed settings for formatting the result. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int) Converts a single-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int) Converts a single-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. ConvertToText<T>(float, T, ReadOnlySpanAction<char, T>, int, int, bool) Converts a single-precision floating-point number into a Span<T> of characters, then passes the ReadOnlySpan<T> to the provided action, along with the argument. public static void ConvertToText<T>(this float value, T argument, ReadOnlySpanAction<char, T> action, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value float The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if action is null. ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits."
  },
  "api/Switchboard.html": {
    "href": "api/Switchboard.html",
    "title": "Namespace Switchboard | Switchboard",
    "keywords": "Namespace Switchboard Classes ApplicationEnd Provides an event that is invoked near the very end of the application, after Application.quitting and OnDestroy() of MonoBehaviours. Any scripts that are ordered to execute later than Destructor will have OnDestroy() called after this event. CompositionRoot Loads the CompositionRootAsset and initializes the DependencyInjector. CompositionRootAsset Represents a single, root asset file that can be loaded when the application starts, in order to enable dependency injection. DateTimeToTextConverter Converts a DateTime value into a string of characters without allocating memory for garbage collection. DependencyInjector Provides a base representation for a Unity asset that can activate, provide instances of types, then deactivate. Destructor A MonoBehaviour that invokes a Destroyed event when OnDestroy() is called. ExpandableAttribute Indicates that a serialized UnityEngine.Object field should be displayed with an expandable toggle that displays the object's properties. FileRemover Provides methods for removing excess files from a directory. FloatFormatInfo Provides detailed options for formatting floating-point numbers. FloatToTextConverter Converts floating-point numbers into strings of characters without allocating memory for garbage collection. FloatToTextExtensions Adds extension methods to float and double for converting to strings of characters. IInjectorExtensions Provides extension methods for the IInjector interface. ILoggerExtensions Provides extension methods for the ILogger interface that assign the LogLevel based on the method. InjectorLocator A static service locator that provides an IInjector. IntToTextConverter Converts integral numbers into strings of characters, without allocating memory for garbage collection. LogFileWriter Writes log entries to log files. LoggerRoot Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. PathUtility Provides utilities for working with file system paths. PreciseClock Provides DateTime values that have the precision of a Stopwatch. StandardLogFormatter Provides a standard implementation of the ILogFormatter interface. StringMaker Represents a string of characters that can be modified without allocating memory for garbage collection. StringMakerILoggerExtensions Provides extension methods for the ILogger interface to accept StringMaker messages. StringMakerUnityExtensions Provides extension methods for StringMaker to append common Unity types. SwitchboardLogger Provides a single, static LoggerRoot ILogger that can send log output to multiple targets. SwitchboardMenuOrder Provides Switchboard's order in the asset creation menu. UnityLogHandler Provides a reference to the default Unity log handler. UnityLogHijacker Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. UnityLogger An implementation of ILogger that targets the UnityLogHandler. Structs StringMakerHandle Provides a readonly ref struct facade for StringMaker. Interfaces IInjector Provides a generic interface for getting an instance of a requested type. ILogFormatter Provides an interface for formatting log message and exceptions. ILogger Provides an interface for logging. Enums DependencyInjector.State The various states that a DependencyInjector can have while activating and deactivating. LogLevel Defines the levels of significance that may be assigned to a log entry. Delegates StringMaker.ForEachArrayAction<TArg> Encapsulates a method that receives a state object of type TArg, a read-only span of characters in the current array, and boolean indicating if it is the final array."
  },
  "api/Switchboard.IInjector.html": {
    "href": "api/Switchboard.IInjector.html",
    "title": "Interface IInjector | Switchboard",
    "keywords": "Interface IInjector Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides a generic interface for getting an instance of a requested type. public interface IInjector Extension Methods IInjectorExtensions.TryGet<T>(IInjector, out T) Methods Get<T>() Provides an instance of the requested type of dependency. T Get<T>() where T : class Returns T Returns a reference to the requested type, or null. Type Parameters T The type of instance requested."
  },
  "api/Switchboard.IInjectorExtensions.html": {
    "href": "api/Switchboard.IInjectorExtensions.html",
    "title": "Class IInjectorExtensions | Switchboard",
    "keywords": "Class IInjectorExtensions Namespace Switchboard Assembly Switchboard.InjectorLocator.dll Provides extension methods for the IInjector interface. public static class IInjectorExtensions Inheritance object IInjectorExtensions Methods TryGet<T>(IInjector, out T) Attempts to get a type of dependency from an IInjector. public static bool TryGet<T>(this IInjector injector, out T dependency) where T : class Parameters injector IInjector The IInjector from which to get a dependency. dependency T The dependency instance provided. Returns bool Returns true if the output dependency does not equal null. Type Parameters T The type of dependency to get."
  },
  "api/Switchboard.ILogFormatter.html": {
    "href": "api/Switchboard.ILogFormatter.html",
    "title": "Interface ILogFormatter | Switchboard",
    "keywords": "Interface ILogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides an interface for formatting log message and exceptions. public interface ILogFormatter Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.ILogger.html": {
    "href": "api/Switchboard.ILogger.html",
    "title": "Interface ILogger | Switchboard",
    "keywords": "Interface ILogger Namespace Switchboard Assembly Switchboard.ILogger.dll Provides an interface for logging. public interface ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, Exception, StringMaker) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, Exception, StringMaker) Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.ILoggerExtensions.html": {
    "href": "api/Switchboard.ILoggerExtensions.html",
    "title": "Class ILoggerExtensions | Switchboard",
    "keywords": "Class ILoggerExtensions Namespace Switchboard Assembly Switchboard.ILogger.dll Provides extension methods for the ILogger interface that assign the LogLevel based on the method. public static class ILoggerExtensions Inheritance object ILoggerExtensions Methods Log(ILogger, LogLevel, Exception) Logs an exception. public static void Log(this ILogger logger, LogLevel logLevel, Exception exception) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. LogCritical(ILogger, Exception) Logs an exception with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogCritical(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, Exception) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogDebug(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, Exception) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogError(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogError(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, Exception) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogInformation(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogTrace(ILogger, Exception) Logs an exception with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogTrace(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, Exception) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception) Parameters logger ILogger The logger. exception Exception The exception to log. LogWarning(ILogger, Exception, ReadOnlySpan<char>) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception, ReadOnlySpan<char> message) Parameters logger ILogger The logger. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.InjectorLocator.html": {
    "href": "api/Switchboard.InjectorLocator.html",
    "title": "Class InjectorLocator | Switchboard",
    "keywords": "Class InjectorLocator Namespace Switchboard Assembly Switchboard.InjectorLocator.dll A static service locator that provides an IInjector. public static class InjectorLocator Inheritance object InjectorLocator Methods AssignLocatorDelegate(Func<IInjector>) Assigns the delegate that provides the IInjector instance. public static void AssignLocatorDelegate(Func<IInjector> locatorDelegate) Parameters locatorDelegate Func<IInjector> The delegate to set as the IInjector locator. Exceptions ArgumentNullException Thrown if the locatorDelegate is null. InvalidOperationException Thrown if the locator delegate is already assigned. GetInjector() Provides an IInjector by invoking the locator delegate. public static IInjector GetInjector() Returns IInjector Returns the result of invoking the assigned IInjector locator delegate. RemoveLocatorDelegate(Func<IInjector>) Removes the current IInjector locator delegate if it matches the locatorDelegate argument. public static void RemoveLocatorDelegate(Func<IInjector> locatorDelegate) Parameters locatorDelegate Func<IInjector> The IInjector locator delegate to be removed. Exceptions ArgumentNullException Thrown if the locatorDelegate is null."
  },
  "api/Switchboard.IntToTextConverter.html": {
    "href": "api/Switchboard.IntToTextConverter.html",
    "title": "Class IntToTextConverter | Switchboard",
    "keywords": "Class IntToTextConverter Namespace Switchboard Assembly Switchboard.TextConverter.dll Converts integral numbers into strings of characters, without allocating memory for garbage collection. public static class IntToTextConverter Inheritance object IntToTextConverter Fields MaxCharacterCount Gets the maximum number of characters that may be necessary to store the text representation of a number. public const int MaxCharacterCount = 71 Methods ConvertToText(byte, Span<char>) Converts a byte into a Span<T> of characters. public static int ConvertToText(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(short, Span<char>) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(short, Span<char>, char) Converts a short integer into a Span<T> of characters. public static int ConvertToText(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, char) Converts an integer into a Span<T> of characters. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(int, Span<char>, char, out bool) Converts an integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this int value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, char) Converts a long integer into a Span<T> of characters. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(long, Span<char>, char, out bool) Converts a long integer into a Span<T> of characters, without a negative sign. public static int ConvertToText(this long value, Span<char> result, char digitGroupSeparator, out bool valueIsNegative) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. valueIsNegative bool The value will be true if the value is a negative number. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters. public static int ConvertToText(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters. public static int ConvertToText(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters. public static int ConvertToText(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToText(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters. public static int ConvertToText(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(byte, Span<char>) Converts a byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(short, Span<char>) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(int, Span<char>) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(int, Span<char>, char) Converts an integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(long, Span<char>) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a binary value. public static int ConvertToTextAsBinary(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsBinary<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this byte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this short value, T argument, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this short value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this int value, T argument, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this int value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this sbyte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsBinary<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a binary value, then passes that and the argument into the action. public static void ConvertToTextAsBinary<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex(byte, Span<char>) Converts a byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this byte value, Span<char> result) Parameters value byte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(short, Span<char>) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. ConvertToTextAsHex(short, Span<char>, char) Converts a short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this short value, Span<char> result, char digitGroupSeparator) Parameters value short The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(int, Span<char>) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(int, Span<char>, char) Converts an integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this int value, Span<char> result, char digitGroupSeparator) Parameters value int The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(long, Span<char>) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(long, Span<char>, char) Converts a long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this long value, Span<char> result, char digitGroupSeparator) Parameters value long The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(sbyte, Span<char>) Converts a signed byte into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this sbyte value, Span<char> result) Parameters value sbyte The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ushort, Span<char>) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ushort, Span<char>, char) Converts an unsigned short integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ushort value, Span<char> result, char digitGroupSeparator) Parameters value ushort The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(uint, Span<char>) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(uint, Span<char>, char) Converts an unsigned integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this uint value, Span<char> result, char digitGroupSeparator) Parameters value uint The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ulong, Span<char>) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex(ulong, Span<char>, char) Converts an unsigned long integer into a Span<T> of characters as a hexadecimal value. public static int ConvertToTextAsHex(this ulong value, Span<char> result, char digitGroupSeparator) Parameters value ulong The number to convert. result Span<char> The target to contain the result of the conversion. digitGroupSeparator char The character to use for separating groups of digits. Returns int Returns the number of characters in the result. Exceptions IndexOutOfRangeException Thrown if result is not long enough to hold the value. ConvertToTextAsHex<T>(byte, T, ReadOnlySpanAction<char, T>) Converts a byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this byte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value byte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this short value, T argument, ReadOnlySpanAction<char, T> action) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(short, T, ReadOnlySpanAction<char, T>, char) Converts a short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this short value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value short The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this int value, T argument, ReadOnlySpanAction<char, T> action) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(int, T, ReadOnlySpanAction<char, T>, char) Converts an integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this int value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value int The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(sbyte, T, ReadOnlySpanAction<char, T>) Converts a signed byte into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this sbyte value, T argument, ReadOnlySpanAction<char, T> action) Parameters value sbyte The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ushort, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned short integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ushort value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ushort The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToTextAsHex<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters as a hexadecimal value, then passes that and the argument into the action. public static void ConvertToTextAsHex<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this long value, T argument, ReadOnlySpanAction<char, T> action) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(long, T, ReadOnlySpanAction<char, T>, char) Converts a long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this long value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value long The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(uint, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this uint value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value uint The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null. ConvertToText<T>(ulong, T, ReadOnlySpanAction<char, T>, char) Converts an unsigned long integer into a ReadOnlySpan<T> of characters, then passes that and the argument into the action. public static void ConvertToText<T>(this ulong value, T argument, ReadOnlySpanAction<char, T> action, char digitGroupSeparator) Parameters value ulong The number to convert. argument T The argument to pass into the action. action ReadOnlySpanAction<char, T> The action to perform with the resulting ReadOnlySpan<T> of characters. digitGroupSeparator char The character to use for separating groups of digits. Type Parameters T The type of argument to pass into the action. Exceptions ArgumentNullException Thrown if the action is null."
  },
  "api/Switchboard.LogFileWriter.html": {
    "href": "api/Switchboard.LogFileWriter.html",
    "title": "Class LogFileWriter | Switchboard",
    "keywords": "Class LogFileWriter Namespace Switchboard Assembly Switchboard.Logger.dll Writes log entries to log files. public sealed class LogFileWriter : ILogger, IDisposable Inheritance object LogFileWriter Implements ILogger IDisposable Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, Exception, StringMaker) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, Exception, StringMaker) Constructors LogFileWriter(string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the extension. Exceptions ArgumentNullException Thrown if directory or fileNamePrefix are null. ArgumentException Thrown if directory or fileNamePrefix are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix contains invalid file name characters for the current platform. LogFileWriter(string, string, string) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. LogFileWriter(string, string, string, int) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension, int fileSizeLimit) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MinFileSize. LogFileWriter(string, string, string, int, ILogFormatter) Initializes a new instance of the class. public LogFileWriter(string directory, string fileNamePrefix, string fileExtension, int fileSizeLimit, ILogFormatter formatter) Parameters directory string The path to the directory where log files will be written. fileNamePrefix string The first part of the file name. A time stamp will be added to each file name, after the prefix, before the fileExtension. fileExtension string The file name extension to use. fileSizeLimit int The maximum file size in bytes for log files. When a log file reaches the size limit, a new file will be created. formatter ILogFormatter The formatter to use for formatting log entries. Exceptions ArgumentNullException Thrown if directory, fileNamePrefix, or fileExtension are null. ArgumentException Thrown if directory, fileNamePrefix, or fileExtension are Empty. \\ OR \\ Thrown if directory contains invalid path characters. \\ OR \\ Thrown if fileNamePrefix or fileExtension contain invalid file name characters for the current platform. ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MinFileSize. Fields DefaultFileExtension Gets the default file name extension for log files. public const string DefaultFileExtension = \".log\" DefaultFileSizeLimit Gets the default file size limit in bytes. public const int DefaultFileSizeLimit = 10000000 MinFileSize Gets the minimum number of bytes required for each log file. public const int MinFileSize = 3072 Properties Directory Gets the path to the directory for the current log file. public string Directory { get; } FileExtension Gets the file extension for the current log file. public string FileExtension { get; } FileIsOpen Indicates whether there is a log file with an open FileStream. public bool FileIsOpen { get; } FileNamePrefix Gets file name prefix for the current log file, the part before the time stamp. public string FileNamePrefix { get; } FileSizeLimit Gets or sets the maximum size of log files in bytes. When a log file reaches the size limit, a new file will be created. public int FileSizeLimit { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than MinFileSize. Formatter Gets or sets the formatter to use for formatting log entries. public ILogFormatter Formatter { get; set; } LogCallerInfo Gets or sets whether information about the caller of the log method should be displayed. public bool LogCallerInfo { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Path Gets the file path for the current log file. public string Path { get; } StringMakerPoolCount Gets the number of StringMakers stored in the shared pool. May not be perfectly accurate while other threads are modifying the pool. public static int StringMakerPoolCount { get; } StringMakerPoolMaxCount Gets the maximum number of StringMakers that can be stored in the shared pool. public static int StringMakerPoolMaxCount { get; } Methods Close() Closes the FileStream for the current log file. Closing the FileStream does not automatically FlushLogs(). public void Close() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or FlushLogs(). FlushLogs() Flushes queued log entries so that they are written to the log file. If necessary, a new log file will be created, and the FileStream will be opened. It should be called regularly to prevent too many logs from accumulating in the queue. public void FlushLogs() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Open(), or Close(). SecurityException A new file needs to be created, and the caller does not have the required permission. DirectoryNotFoundException A new file needs to be created, and the specified path is invalid. UnauthorizedAccessException A new file needs to be created, and write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException A new file needs to be created, and the specified path exceeds the system-defined maximum length. Log(LogLevel, Exception, ReadOnlySpan<char>) Queues an exception to be written to the log file. If the Formatter throws an exception when formatting the exception, the formatting exception, the message, and original exception will be queued without formatting. No exception will be thrown. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Queues a message to be written to the log file. If the Formatter throws an exception when formatting the message, the message will be queued without formatting. Then, the formatting exception will be re-thrown. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Open() Opens a FileStream for the current log file. If there is no current log file a new one will be created. public void Open() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as OpenNewFile(), Close(), or FlushLogs(). FileNotFoundException The file cannot be found. SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. OpenNewFile() Opens a FileStream for a new log file. The file name will start with the file name prefix, followed by a time stamp and the file name extension. public void OpenNewFile() Exceptions InvalidOperationException Thrown if another file operation is in progress, such as Open(), Close(), or FlushLogs(). SecurityException The caller does not have the required permission. DirectoryNotFoundException The specified path is invalid. UnauthorizedAccessException Write access is not permitted by the operating system for the specified path, such as when the file or directory is set for read-only access. PathTooLongException The specified path exceeds the system-defined maximum length. AggregateException Thrown if multiple exceptions occur during the course of the method. SetFileSizeLimit(int) Sets the maximum log file size in bytes. When a log file reaches the size limit, a new file will be created. public void SetFileSizeLimit(int fileSizeLimit) Parameters fileSizeLimit int The maximum file size in bytes. Exceptions ArgumentOutOfRangeException Thrown if the fileSizeLimit is less than MinFileSize. SetStringMakerPoolMaxCount(int) Sets the maximum number of StringMakers that can be stored in the shared pool. public static void SetStringMakerPoolMaxCount(int maxCount) Parameters maxCount int The maximum number of StringMakers that can be stored. Exceptions ArgumentOutOfRangeException Thrown if maxCount is less than zero. Events FileClosed Occurs when the FileStream for the current log file is closed. Provides an opportunity to clean up old log files. public event Action<LogFileWriter> FileClosed"
  },
  "api/Switchboard.LoggerRoot.html": {
    "href": "api/Switchboard.LoggerRoot.html",
    "title": "Class LoggerRoot | Switchboard",
    "keywords": "Class LoggerRoot Namespace Switchboard Assembly Switchboard.Logger.dll Represents a logger composed of other ILogger implementations, which serve as the actual targets for log output. A LoggerRoot cannot have another LoggerRoot added as a log target. Adding and removing targets are thread safe operations, but changes may not be immediate across threads. Thread safety of logging operations are left up to the target implementations of the ILogger interface. public sealed class LoggerRoot : ILogger Inheritance object LoggerRoot Implements ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, Exception, StringMaker) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, Exception, StringMaker) Properties LogLevel Gets or sets the overall LogLevel for all log targets within the LoggerRoot. If the LogLevel of a message or exception is less significant, it will not be sent to any log targets. The value may not be immediately accurate across all threads. public LogLevel LogLevel { get; set; } Methods Add(ILogger) Adds an implementation of ILogger to the LoggerRoot as a log target. public bool Add(ILogger logTarget) Parameters logTarget ILogger The logger to add. Returns bool Returns false if the logTarget has already been added to the LoggerRoot, otherwise returns true. Exceptions ArgumentNullException Thrown if the logTarget is null. ArgumentException Thrown if the logTarget is a LoggerRoot. Contains(ILogger) Determines whether a log target has been added. public bool Contains(ILogger logTarget) Parameters logTarget ILogger The logger to search for. Returns bool Returns true if the logTarget is contained within, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. Log(LogLevel, Exception, ReadOnlySpan<char>) Writes an exception to the log. Log targets should never attempt to throw an exception when logging an exception. If a log target throws an exception during the method, it is silently consumed. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if the exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Writes a message to the log. If a log target throws an exception, it will be captured until all log targets have had a chance to log, then re-thrown. If multiple exceptions are thrown, they will all be re-thrown as one AggregateException. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Remove(ILogger) Removes a log target. public bool Remove(ILogger logTarget) Parameters logTarget ILogger The logger to remove. Returns bool Returns true if the logTarget was found and removed, otherwise false. Exceptions ArgumentNullException Thrown if the logTarget is null. RemoveAllTargets() Removes all loggers from the log target list. public void RemoveAllTargets()"
  },
  "api/Switchboard.LogLevel.html": {
    "href": "api/Switchboard.LogLevel.html",
    "title": "Enum LogLevel | Switchboard",
    "keywords": "Enum LogLevel Namespace Switchboard Assembly Switchboard.ILogger.dll Defines the levels of significance that may be assigned to a log entry. public enum LogLevel Fields Trace = 0 Debug = 1 Information = 2 Warning = 3 Error = 4 Critical = 5 None = 6"
  },
  "api/Switchboard.PathUtility.html": {
    "href": "api/Switchboard.PathUtility.html",
    "title": "Class PathUtility | Switchboard",
    "keywords": "Class PathUtility Namespace Switchboard Assembly Switchboard.FileUtilities.dll Provides utilities for working with file system paths. public static class PathUtility Inheritance object PathUtility Properties DirectorySeparator Gets the standard directory separator character for the platform, either Windows '\\', or non-Windows '/'. public static char DirectorySeparator { get; } Methods CombinePaths(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePaths(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForNonWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForNonWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. CombinePathsForWindows(string, string) Combines two path strings into one, and converts directory separator characters into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string CombinePathsForWindows(string path1, string path2) Parameters path1 string The start of the combined path string. path2 string The end of the combined path string. Returns string A new string combining path1 and path2. Exceptions ArgumentNullException Thrown if path1 of path2 is null. ArgumentException Thrown if path1 of path2 is Empty, or contains an invalid path character. GetFileName(string) Uses a static Dictionary<TKey, TValue> to cache file names parsed from a given path string. So, if the same filePath is evaluated multiple times, the value is simply retrieved from the cache. public static string GetFileName(string filePath) Parameters filePath string The file path to parse for a file name. Returns string The file name. Exceptions ArgumentNullException Thrown if the filePath is null. ArgumentException Thrown if the filePath is Empty. GetFileNameAndExtension(string, out string, out string) Gets the file name and extension of a given path string. public static int GetFileNameAndExtension(string path, out string fileName, out string extension) Parameters path string The path string to parse. fileName string The file name parsed from the path, or null if not found. extension string The extension parsed from the path, or null if not found. Returns int The index of the last directory separator, or -1 if not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for the platform, or ends with a period on Windows. GetFileNameAndExtensionForNonWindows(string, out string, out string) public static int GetFileNameAndExtensionForNonWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they are not found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or if the file name contains an invalid character for non-Windows platforms. GetFileNameAndExtensionForWindows(string, out string, out string) public static int GetFileNameAndExtensionForWindows(string path, out string fileName, out string extension) Parameters path string fileName string extension string Returns int Returns the index of the last directory separator, or -1 if not found. File name and extension will be null if they arenot found. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, if the file name contains an invalid character for Windows, or ends with a period. IsDirectorySeparator(char) Determines whether a character is any type of directory separator character. public static bool IsDirectorySeparator(char character) Parameters character char The character to evalute. Returns bool Returns true if the character is a directory separator character, otherwise false. NormalizePath(string) Converts directory separator characters within a path string into a single, standard directory separator for the platform. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePath(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForNonWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for non-Windows '/'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForNonWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. NormalizePathForWindows(string) Converts directory separator characters within a path string into a single, standard directory separator for Windows '\\'. Two consecutive directory separator characters are allowed at the start of the path. public static string NormalizePathForWindows(string path) Parameters path string The path string to normalize. Returns string A new path string with normalized directory separator characters. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidateFileNameCharacters(string) Throws exceptions if any characters in the fileName are invalid file name characters for the current platform. public static void ValidateFileNameCharacters(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForNonWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for a non-Windows platform. public static void ValidateFileNameCharactersForNonWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidateFileNameCharactersForWindows(string) Throws exceptions if any characters in the fileName are invalid file name characters for the Windows platform. public static void ValidateFileNameCharactersForWindows(string fileName) Parameters fileName string The file name to evaluate. Exceptions ArgumentNullException Thrown if the fileName is null. ArgumentException Thrown if the fileName is Empty, or contains an invalid file name character. ValidatePathCharacters(string) Throws exceptions if any characters in the path are invalid path characters for the current platform. public static void ValidatePathCharacters(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForNonWindows(string) Throws exceptions if any characters in the path are invalid path characters for a non-Windows platform. public static void ValidatePathCharactersForNonWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character. ValidatePathCharactersForWindows(string) Throws exceptions if any characters in the path are invalid path characters for the Windows platform. public static void ValidatePathCharactersForWindows(string path) Parameters path string The path to evaluate. Exceptions ArgumentNullException Thrown if the path is null. ArgumentException Thrown if the path is Empty, or contains an invalid path character."
  },
  "api/Switchboard.PreciseClock.html": {
    "href": "api/Switchboard.PreciseClock.html",
    "title": "Class PreciseClock | Switchboard",
    "keywords": "Class PreciseClock Namespace Switchboard Assembly Switchboard.PreciseClock.dll Provides DateTime values that have the precision of a Stopwatch. public static class PreciseClock Inheritance object PreciseClock Properties Now Gets the last synchronized Now value, plus the Elapsed time since synchronization. public static DateTime Now { get; } UtcNow Gets the last synchronized UtcNow value, plus the Elapsed time since synchronization. public static DateTime UtcNow { get; } Methods SynchronizeWithSystemClock() Synchronizes the UtcNow and Now properties with the system clock. If the difference between the old time and the new time is less than one second, the time will not be changed. public static void SynchronizeWithSystemClock()"
  },
  "api/Switchboard.StandardLogFormatter.html": {
    "href": "api/Switchboard.StandardLogFormatter.html",
    "title": "Class StandardLogFormatter | Switchboard",
    "keywords": "Class StandardLogFormatter Namespace Switchboard Assembly Switchboard.Logger.dll Provides a standard implementation of the ILogFormatter interface. public sealed class StandardLogFormatter : ILogFormatter Inheritance object StandardLogFormatter Implements ILogFormatter Properties Default Gets a static instance of the class. public static StandardLogFormatter Default { get; } Methods Format(LogLevel, Exception, ReadOnlySpan<char>, StringMakerHandle) Formats an exception, and optional message, by appending the formatted output to the result. public void Format(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the exception. exception Exception The exception to be formatted. message ReadOnlySpan<char> The optional message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, StringMakerHandle) Formats a message by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. result StringMakerHandle The formatted result is appended here. Format(LogLevel, ReadOnlySpan<char>, string, string, int, StringMakerHandle) Formats a message, including the memberName, filePath, and lineNumber that logged the message, by appending the formatted output to the result. public void Format(LogLevel logLevel, ReadOnlySpan<char> message, string memberName, string filePath, int lineNumber, StringMakerHandle result) Parameters logLevel LogLevel The level of significance of the message. message ReadOnlySpan<char> The message to be formatted. memberName string The name of the method or member that logged the message. filePath string The name of the file that logged the message. lineNumber int The line number that logged the message. result StringMakerHandle The formatted result is appended here."
  },
  "api/Switchboard.StringMaker.ForEachArrayAction-1.html": {
    "href": "api/Switchboard.StringMaker.ForEachArrayAction-1.html",
    "title": "Delegate StringMaker.ForEachArrayAction<TArg> | Switchboard",
    "keywords": "Delegate StringMaker.ForEachArrayAction<TArg> Namespace Switchboard Assembly Switchboard.StringMaker.dll Encapsulates a method that receives a state object of type TArg, a read-only span of characters in the current array, and boolean indicating if it is the final array. public delegate void StringMaker.ForEachArrayAction<in TArg>(TArg arg, ReadOnlySpan<char> charSpan, bool finalArray) Parameters arg TArg A state object of type StringMaker.ForEachArrayAction<TArg>. charSpan ReadOnlySpan<char> A read-only span of characters in the current array. finalArray bool A boolean indicating if this is the final array. Type Parameters TArg The type of the object that represents the state."
  },
  "api/Switchboard.StringMaker.html": {
    "href": "api/Switchboard.StringMaker.html",
    "title": "Class StringMaker | Switchboard",
    "keywords": "Class StringMaker Namespace Switchboard Assembly Switchboard.StringMaker.dll Represents a string of characters that can be modified without allocating memory for garbage collection. public sealed class StringMaker Inheritance object StringMaker Extension Methods StringMakerUnityExtensions.Append(StringMaker, Bounds) StringMakerUnityExtensions.Append(StringMaker, BoundsInt) StringMakerUnityExtensions.Append(StringMaker, Color) StringMakerUnityExtensions.Append(StringMaker, Rect) StringMakerUnityExtensions.Append(StringMaker, RectInt) StringMakerUnityExtensions.Append(StringMaker, Vector2) StringMakerUnityExtensions.Append(StringMaker, Vector2Int) StringMakerUnityExtensions.Append(StringMaker, Vector3) StringMakerUnityExtensions.Append(StringMaker, Vector3Int) StringMakerUnityExtensions.Append(StringMaker, Vector4) Fields ArrayLength Gets the number of characters that can be stored in each character array that StringMaker links together in internal memory. Memory is allocated and pooled internally as character arrays of this length. public const int ArrayLength = 1024 Properties AppendAction Gets the static ReadOnlySpanAction<T, TArg> instance used to append a character Span<T> to a StringMaker. public static ReadOnlySpanAction<char, StringMaker> AppendAction { get; } ArrayPoolCount Gets the number of character arrays stored in the shared pool. May not be perfectly accurate while other threads are modifying the pool. public static int ArrayPoolCount { get; } ArrayPoolMaxCount Gets the maximum number of character arrays that can be stored in the shared pool. public static int ArrayPoolMaxCount { get; } CopyAction Gets the static SpanAction<T, TArg> instance used to copy the contents of a StringMaker to a character Span<T>. public static SpanAction<char, StringMaker> CopyAction { get; } Length Gets or sets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than zero. NumberFormat Gets or sets the FloatFormatInfo used to format number values. public FloatFormatInfo NumberFormat { get; set; } Shared Gets a ThreadStaticAttribute instance of the class. public static StringMaker Shared { get; } Methods Append(bool) Appends a boolean value. public StringMaker Append(bool value) Parameters value bool The boolean value to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMaker Append(char value) Parameters value char The character to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMaker Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMaker Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMaker Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMaker Append(double value) Parameters value double The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, FloatFormatInfo) Appends a double-precision floating-point number. public StringMaker Append(double value, FloatFormatInfo format) Parameters value double The number to append. format FloatFormatInfo Detailed settings for formatting the result. Returns StringMaker Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int minFractionalDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. Append(double, int, int) Appends a double-precision floating-point number. public StringMaker Append(double value, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMaker Append(double value, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Returns StringMaker Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. Append(long) Appends a long integer. public StringMaker Append(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMaker Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMaker Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMaker Append(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMaker Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(byte) Appends a byte as a binary value. public StringMaker AppendBinary(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(short) Appends a short integer as a binary value. public StringMaker AppendBinary(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(short, char) Appends a short integer as a binary value. public StringMaker AppendBinary(short value, char digitGroupSeparator) Parameters value short The numberto append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(int) Appends an integer as a binary value. public StringMaker AppendBinary(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(int, char) Appends an integer as a binary value. public StringMaker AppendBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(long) Appends a long integer as a binary value. public StringMaker AppendBinary(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(long, char) Appends a long integer as a binary value. public StringMaker AppendBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(sbyte) Appends a signed byte as a binary value. public StringMaker AppendBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(ushort) Appends an unsigned short integer as a binary value. public StringMaker AppendBinary(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMaker AppendBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(uint) Appends an unsigned integer as a binary value. public StringMaker AppendBinary(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(uint, char) Appends an unsigned integer as a binary value. public StringMaker AppendBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(ulong) Appends an unsigned long integer as a binary value. public StringMaker AppendBinary(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMaker AppendBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(byte) Appends a byte as a hexadecimal value. public StringMaker AppendHexadecimal(byte value) Parameters value byte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(short) Appends a short integer as a hexadecimal value. public StringMaker AppendHexadecimal(short value) Parameters value short The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(short, char) Appends a short integer as a hexadecimal value. public StringMaker AppendHexadecimal(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(int) Appends an integer as a hexadecimal value. public StringMaker AppendHexadecimal(int value) Parameters value int The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(int, char) Appends an integer as a hexadecimal value. public StringMaker AppendHexadecimal(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(long) Appends a long integer as a hexadecimal value. public StringMaker AppendHexadecimal(long value) Parameters value long The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(long, char) Appends a long integer as a hexadecimal value. public StringMaker AppendHexadecimal(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(sbyte) Appends a signed byte as a hexadecimal value. public StringMaker AppendHexadecimal(sbyte value) Parameters value sbyte The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendHexadecimal(ushort value) Parameters value ushort The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMaker AppendHexadecimal(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(uint) Appends an unsigned integer. public StringMaker AppendHexadecimal(uint value) Parameters value uint The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMaker AppendHexadecimal(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendHexadecimal(ulong value) Parameters value ulong The number to append. Returns StringMaker Returns the instance, enabling a fluent interface. AppendHexadecimal(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMaker AppendHexadecimal(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating groups of digits. Returns StringMaker Returns the instance, enabling a fluent interface. Clear() Sets the Length to zero. public StringMaker Clear() Returns StringMaker Returns the instance, enabling a fluent interface. Clear(FloatFormatInfo) Sets the Length to zero, and sets the NumberFormat. public StringMaker Clear(FloatFormatInfo numberFormat) Parameters numberFormat FloatFormatInfo Returns StringMaker Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. Exceptions ArgumentException Thrown if the target length is less than the StringMaker Length. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> The target character Span<T> to which the contents of this StringMaker will be copied. Exceptions ArgumentException Thrown if the target length is less than this StringMaker Length. Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of characters up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The ReadOnlySpan of characters to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ForEachArray<T>(T, ForEachArrayAction<T>) Invokes a StringMaker.ForEachArrayAction<TArg> for each character array in the StringMaker. public void ForEachArray<T>(T arg, StringMaker.ForEachArrayAction<T> action) Parameters arg T The argument to pass into the action. action StringMaker.ForEachArrayAction<T> The action to invoke. Type Parameters T The type of argument to be passed into the action. ReleaseMemory() Clears and releases excess character arrays to the shared pool. Also sets the null '\\0' character from the Length index to the end of the current character array. public StringMaker ReleaseMemory() Returns StringMaker Returns the instance, enabling a fluent interface. Reset() Sets the Length to zero, and clear the NumberFormat. public StringMaker Reset() Returns StringMaker Returns the instance, enabling a fluent interface. SetArrayPoolMaxCount(int) Sets the maximum number of character arrays that can be stored in the shared pool. public static void SetArrayPoolMaxCount(int maxCount) Parameters maxCount int The maximum number of character arrays that can be stored. Exceptions ArgumentOutOfRangeException Thrown if maxCount is less than zero. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. Operators operator +(StringMaker, bool) Appends a value. public static StringMaker operator +(StringMaker stringMaker, bool value) Parameters stringMaker StringMaker The StringMaker to append. value bool The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, char) Appends a value. public static StringMaker operator +(StringMaker stringMaker, char value) Parameters stringMaker StringMaker The StringMaker to append. value char The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, DateTime) Appends a value. public static StringMaker operator +(StringMaker stringMaker, DateTime value) Parameters stringMaker StringMaker The StringMaker to append. value DateTime The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, double) Appends a value. public static StringMaker operator +(StringMaker stringMaker, double value) Parameters stringMaker StringMaker The StringMaker to append. value double The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, long) Appends a value. public static StringMaker operator +(StringMaker stringMaker, long value) Parameters stringMaker StringMaker The StringMaker to append. value long The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, ReadOnlySpan<char>) Appends a value. public static StringMaker operator +(StringMaker stringMaker, ReadOnlySpan<char> value) Parameters stringMaker StringMaker The StringMaker to append. value ReadOnlySpan<char> The value to append. Returns StringMaker Returns the instance, enabling a fluent interface. operator +(StringMaker, ulong) Appends a value. public static StringMaker operator +(StringMaker stringMaker, ulong value) Parameters stringMaker StringMaker The StringMaker to append. value ulong The value to append. Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerHandle.html": {
    "href": "api/Switchboard.StringMakerHandle.html",
    "title": "Struct StringMakerHandle | Switchboard",
    "keywords": "Struct StringMakerHandle Namespace Switchboard Assembly Switchboard.StringMaker.dll Provides a readonly ref struct facade for StringMaker. public readonly ref struct StringMakerHandle Constructors StringMakerHandle(StringMaker) Initializes a new instance with the stringMaker as the internal reference. public StringMakerHandle(StringMaker stringMaker) Parameters stringMaker StringMaker The StringMaker to contain within the StringMakerHandle. Properties Length Gets the current character count, the number of characters that will be copied during operations like ToString() or CopyTo(Span<char>). public int Length { get; set; } Exceptions ArgumentOutOfRangeException Thrown if the set value is less than zero. NumberFormat Gets or sets the FloatFormatInfo used to format number values. public FloatFormatInfo NumberFormat { get; set; } Methods Append(bool) Appends a boolean value. public StringMakerHandle Append(bool value) Parameters value bool The boolean value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char) Appends a character. public StringMakerHandle Append(char value) Parameters value char The character to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(char, int) Appends a repeating character. public StringMakerHandle Append(char value, int count) Parameters value char The character to append. count int The number of times to repeat the character. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime) Appends a DateTime. public StringMakerHandle Append(DateTime value) Parameters value DateTime The DateTime to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(DateTime, int) Appends a DateTime. public StringMakerHandle Append(DateTime value, int subSecondPrecision) Parameters value DateTime The DateTime to append. subSecondPrecision int The number of digits to display for fractions of a second. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double) Appends a double-precision floating-point number. public StringMakerHandle Append(double value) Parameters value double The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, FloatFormatInfo) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, FloatFormatInfo format) Parameters value double The number to append. format FloatFormatInfo The format configuration info used to append the result. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(double, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int minFractionalDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits is less than zero. Append(double, int, int) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int minFractionalDigits, int maxFractionalDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. Append(double, int, int, bool) Appends a double-precision floating-point number. public StringMakerHandle Append(double value, int minFractionalDigits, int maxFractionalDigits, bool groupDigits) Parameters value double The number to append. minFractionalDigits int The minimum number of fractional digits to display. maxFractionalDigits int The maximum number of fractional digits to display. groupDigits bool Whether to separate digit groups with a comma. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Exceptions ArgumentOutOfRangeException Thrown if minFractionalDigits or maxFractionalDigits are less than zero, or if minFractionalDigits is greater than maxFractionalDigits. Append(long) Appends a long integer. public StringMakerHandle Append(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(long, char) Appends a long integer. public StringMakerHandle Append(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ReadOnlySpan<char>) Appends a ReadOnlySpan<T> of characters. public StringMakerHandle Append(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The ReadOnlySpan<T> of characters to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong) Appends an unsinged long integer. public StringMakerHandle Append(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Append(ulong, char) Appends an unsinged long integer. public StringMakerHandle Append(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(byte) Appends a byte as a binary value. public StringMakerHandle AppendBinary(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(short) Appends a short integer as a binary value. public StringMakerHandle AppendBinary(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(short, char) Appends a short integer as a binary value. public StringMakerHandle AppendBinary(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(int) Appends an integer as a binary value. public StringMakerHandle AppendBinary(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(int, char) Appends an integer as a binary value. public StringMakerHandle AppendBinary(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(long) Appends a long integer as a binary value. public StringMakerHandle AppendBinary(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(long, char) Appends a long integer as a binary value. public StringMakerHandle AppendBinary(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(sbyte) Appends a signed byte as a binary value. public StringMakerHandle AppendBinary(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(ushort) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendBinary(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(ushort, char) Appends an unsigned short integer as a binary value. public StringMakerHandle AppendBinary(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(uint) Appends an unsigned integer as a binary value. public StringMakerHandle AppendBinary(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(uint, char) Appends an unsigned integer as a binary value. public StringMakerHandle AppendBinary(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(ulong) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendBinary(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendBinary(ulong, char) Appends an unsigned long integer as a binary value. public StringMakerHandle AppendBinary(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(byte) Appends a byte as a hexadecimal value. public StringMakerHandle AppendHexadecimal(byte value) Parameters value byte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(short) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(short value) Parameters value short The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(short, char) Appends a short integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(short value, char digitGroupSeparator) Parameters value short The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(int) Appends an integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(int value) Parameters value int The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(int, char) Appends an integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(int value, char digitGroupSeparator) Parameters value int The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(long) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(long value) Parameters value long The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(long, char) Appends a long integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(long value, char digitGroupSeparator) Parameters value long The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(sbyte) Appends a signed byte as a hexadecimal value. public StringMakerHandle AppendHexadecimal(sbyte value) Parameters value sbyte The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(ushort) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(ushort value) Parameters value ushort The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(ushort, char) Appends an unsigned short integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(ushort value, char digitGroupSeparator) Parameters value ushort The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(uint) Appends an unsigned integer. public StringMakerHandle AppendHexadecimal(uint value) Parameters value uint The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(uint, char) Appends an unsigned integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(uint value, char digitGroupSeparator) Parameters value uint The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(ulong) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(ulong value) Parameters value ulong The number to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. AppendHexadecimal(ulong, char) Appends an unsigned long integer as a hexadecimal value. public StringMakerHandle AppendHexadecimal(ulong value, char digitGroupSeparator) Parameters value ulong The number to append. digitGroupSeparator char The character to use for separating digit groups. Returns StringMakerHandle Returns the instance, enabling a fluent interface. Clear() Sets the Length to zero. public StringMakerHandle Clear() Returns StringMakerHandle Returns the instance, enabling a fluent interface. Clear(FloatFormatInfo) Sets the Length to zero, and sets the NumberFormat. public StringMakerHandle Clear(FloatFormatInfo numberFormat) Parameters numberFormat FloatFormatInfo Returns StringMakerHandle Returns the instance, enabling a fluent interface. ConvertToUTF8(Span<byte>) Converts the contents of the instance to a UTF-8 byte Span<T>. public int ConvertToUTF8(Span<byte> target) Parameters target Span<byte> The target byte Span<T> to which the conversion will be copied. Returns int The number of bytes copied to the target. Exceptions ArgumentException Thrown if the target length is not enough to hold the encoded data. CopyTo(Span<char>) Copies the contents of the instance to a character Span<T>. public void CopyTo(Span<char> target) Parameters target Span<char> Exceptions ArgumentException Thrown if the target length is less than this StringMaker Length. Equals(StringMaker) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMaker stringMaker) Parameters stringMaker StringMaker The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(StringMakerHandle) Compares the characters of two StringMaker instances up to the current Length. public bool Equals(StringMakerHandle stringMakerHandle) Parameters stringMakerHandle StringMakerHandle The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. Equals(ReadOnlySpan<char>) Compares the characters of a StringMaker to a ReadOnlySpan of char up to the current Length. public bool Equals(ReadOnlySpan<char> span) Parameters span ReadOnlySpan<char> The other StringMaker to compare. Returns bool Return true if both have equal length and equal character values up to the current Length. ForEachArray<T>(T, ForEachArrayAction<T>) Invokes a StringMaker.ForEachArrayAction<TArg> for each character array in the StringMaker. public void ForEachArray<T>(T arg, StringMaker.ForEachArrayAction<T> action) Parameters arg T The argument to pass into the action. action StringMaker.ForEachArrayAction<T> The action to invoke. Type Parameters T The type of argument to be passed into the action. ReleaseMemory() Clears and releases excess character arrays to the shared pool, and sets the null '\\0' character from the Length index to the end of the last remaining character array. public StringMakerHandle ReleaseMemory() Returns StringMakerHandle Returns the instance, enabling a fluent interface. Reset() Sets the Length to zero, and clear the NumberFormat. public StringMakerHandle Reset() Returns StringMakerHandle Returns the instance, enabling a fluent interface. ToString() Allocates a new string and copies the contents of the StringMaker. public override string ToString() Returns string The new string. Operators operator +(StringMakerHandle, bool) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, bool value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value bool The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, char) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, char value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value char The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, DateTime) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, DateTime value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value DateTime The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, double) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, double value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value double The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, long) Appends a long integer. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, long value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value long The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, ReadOnlySpan<char>) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, ReadOnlySpan<char> value) Parameters stringMakerHandle StringMakerHandle The StringMakerHandle to append. value ReadOnlySpan<char> The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface. operator +(StringMakerHandle, ulong) Appends a value. public static StringMakerHandle operator +(StringMakerHandle stringMakerHandle, ulong value) Parameters stringMakerHandle StringMakerHandle The StringMaker to append. value ulong The value to append. Returns StringMakerHandle Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.StringMakerILoggerExtensions.html": {
    "href": "api/Switchboard.StringMakerILoggerExtensions.html",
    "title": "Class StringMakerILoggerExtensions | Switchboard",
    "keywords": "Class StringMakerILoggerExtensions Namespace Switchboard Assembly Switchboard.StringMakerILogger.dll Provides extension methods for the ILogger interface to accept StringMaker messages. public static class StringMakerILoggerExtensions Inheritance object StringMakerILoggerExtensions Fields StackAllocMax The maximum character length that uses stackalloc to allocate temporary memory on the stack when copying the contents of a StringMaker. If a StringMaker contains more than this number of characters, a new character array will be allocated on the heap for garbage collection. public const int StackAllocMax = 32768 Methods Log(ILogger, LogLevel, StringMaker, string, string, int) Logs a StringMaker message. If the length of the message is greater than StackAllocMax, a new character array will be allocated on the heap for garbage collection. public static void Log(this ILogger logger, LogLevel logLevel, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the message. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. Log(ILogger, LogLevel, Exception, StringMaker) Logs an exception with a StringMaker message. If the length of the message is greater than StackAllocMax, a new character array will be allocated on the heap for garbage collection. public static void Log(this ILogger logger, LogLevel logLevel, Exception exception, StringMaker message) Parameters logger ILogger The logger. logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogCritical(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogCritical(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Critical. public static void LogCritical(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogDebug(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogDebug(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Debug. public static void LogDebug(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogError(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Error. public static void LogError(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogError(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Error. public static void LogError(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogInformation(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Information. public static void LogInformation(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogInformation(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Information. public static void LogInformation(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogTrace(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogTrace(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Trace. public static void LogTrace(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception. LogWarning(ILogger, StringMaker, string, string, int) Logs a message with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, StringMaker message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logger ILogger The logger. message StringMaker The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. LogWarning(ILogger, Exception, StringMaker) Logs an exception with the LogLevel set to Warning. public static void LogWarning(this ILogger logger, Exception exception, StringMaker message) Parameters logger ILogger The logger. exception Exception The exception to log. message StringMaker A log message to be included with the exception."
  },
  "api/Switchboard.StringMakerUnityExtensions.html": {
    "href": "api/Switchboard.StringMakerUnityExtensions.html",
    "title": "Class StringMakerUnityExtensions | Switchboard",
    "keywords": "Class StringMakerUnityExtensions Namespace Switchboard Assembly Switchboard.StringMakerUnity.dll Provides extension methods for StringMaker to append common Unity types. public static class StringMakerUnityExtensions Inheritance object StringMakerUnityExtensions Methods Append(StringMaker, Bounds) Appends a Bounds value. public static StringMaker Append(this StringMaker stringMaker, Bounds value) Parameters stringMaker StringMaker The StringMaker. value Bounds The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, BoundsInt) Appends a BoundsInt value. public static StringMaker Append(this StringMaker stringMaker, BoundsInt value) Parameters stringMaker StringMaker The StringMaker. value BoundsInt The boundaries to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Color) Appends a Color value. public static StringMaker Append(this StringMaker stringMaker, Color value) Parameters stringMaker StringMaker The StringMaker. value Color The color to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Rect) Appends a Rect value. public static StringMaker Append(this StringMaker stringMaker, Rect value) Parameters stringMaker StringMaker The StringMaker. value Rect The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, RectInt) Appends a RectInt value. public static StringMaker Append(this StringMaker stringMaker, RectInt value) Parameters stringMaker StringMaker The StringMaker. value RectInt The rectangle to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2) Appends a Vector2 value. public static StringMaker Append(this StringMaker stringMaker, Vector2 value) Parameters stringMaker StringMaker The StringMaker. value Vector2 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector2Int) Appends a Vector2Int value. public static StringMaker Append(this StringMaker stringMaker, Vector2Int value) Parameters stringMaker StringMaker The StringMaker. value Vector2Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3) Appends a Vector3 value. public static StringMaker Append(this StringMaker stringMaker, Vector3 value) Parameters stringMaker StringMaker The StringMaker. value Vector3 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector3Int) Appends a Vector3Int value. public static StringMaker Append(this StringMaker stringMaker, Vector3Int value) Parameters stringMaker StringMaker The StringMaker. value Vector3Int The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface. Append(StringMaker, Vector4) Appends a Vector4 value. public static StringMaker Append(this StringMaker stringMaker, Vector4 value) Parameters stringMaker StringMaker The StringMaker. value Vector4 The vector to append. Returns StringMaker Returns the instance, enabling a fluent interface."
  },
  "api/Switchboard.SwitchboardLogger.html": {
    "href": "api/Switchboard.SwitchboardLogger.html",
    "title": "Class SwitchboardLogger | Switchboard",
    "keywords": "Class SwitchboardLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a single, static LoggerRoot ILogger that can send log output to multiple targets. public static class SwitchboardLogger Inheritance object SwitchboardLogger Properties Root Gets the static logger root instance. public static LoggerRoot Root { get; } Methods AddDefaultUnityLogger() Sends Root log output to Unity's default logger. public static void AddDefaultUnityLogger() HijackDebugLogHandler() Sends calls to Unity's Debug.Log method to the logger Root. public static void HijackDebugLogHandler() RemoveDefaultUnityLogger() Stops sending Root log output to Unity's default logger. public static void RemoveDefaultUnityLogger() RestoreDebugLogHandler() Sends calls to Unity's Debug.Log method straight to Unity's default logger. public static void RestoreDebugLogHandler()"
  },
  "api/Switchboard.SwitchboardMenuOrder.html": {
    "href": "api/Switchboard.SwitchboardMenuOrder.html",
    "title": "Class SwitchboardMenuOrder | Switchboard",
    "keywords": "Class SwitchboardMenuOrder Namespace Switchboard Assembly Switchboard.DependencyInjection.dll Provides Switchboard's order in the asset creation menu. public static class SwitchboardMenuOrder Inheritance object SwitchboardMenuOrder Fields Value Gets Switchboard's order in the asset creation menu. public const int Value = 1080"
  },
  "api/Switchboard.UnityLogger.html": {
    "href": "api/Switchboard.UnityLogger.html",
    "title": "Class UnityLogger | Switchboard",
    "keywords": "Class UnityLogger Namespace Switchboard Assembly Switchboard.UnityLogger.dll An implementation of ILogger that targets the UnityLogHandler. public sealed class UnityLogger : ILogger Inheritance object UnityLogger Implements ILogger Extension Methods ILoggerExtensions.Log(ILogger, LogLevel, Exception) ILoggerExtensions.LogCritical(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogCritical(ILogger, Exception) ILoggerExtensions.LogCritical(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogDebug(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogDebug(ILogger, Exception) ILoggerExtensions.LogDebug(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogError(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogError(ILogger, Exception) ILoggerExtensions.LogError(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogInformation(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogInformation(ILogger, Exception) ILoggerExtensions.LogInformation(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogTrace(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogTrace(ILogger, Exception) ILoggerExtensions.LogTrace(ILogger, ReadOnlySpan<char>, string, string, int) ILoggerExtensions.LogWarning(ILogger, Exception, ReadOnlySpan<char>) ILoggerExtensions.LogWarning(ILogger, Exception) ILoggerExtensions.LogWarning(ILogger, ReadOnlySpan<char>, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, StringMaker, string, string, int) StringMakerILoggerExtensions.Log(ILogger, LogLevel, Exception, StringMaker) StringMakerILoggerExtensions.LogCritical(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogCritical(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogDebug(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogDebug(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogError(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogError(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogInformation(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogInformation(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogTrace(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogTrace(ILogger, Exception, StringMaker) StringMakerILoggerExtensions.LogWarning(ILogger, StringMaker, string, string, int) StringMakerILoggerExtensions.LogWarning(ILogger, Exception, StringMaker) Properties Default Gets a static instance of the class. public static UnityLogger Default { get; } LogCallerInfo Gets or sets whether information about the caller of the log method should be displayed. public bool LogCallerInfo { get; set; } LogLevel Gets or sets the minimum level of significance required for a log entry to be processed. public LogLevel LogLevel { get; set; } Methods Log(LogLevel, Exception, ReadOnlySpan<char>) Logs an exception. public void Log(LogLevel logLevel, Exception exception, ReadOnlySpan<char> message) Parameters logLevel LogLevel The level of significance assigned to the exception. exception Exception The exception to log. message ReadOnlySpan<char> A log message to be included with the exception. Exceptions ArgumentNullException Thrown if exception is null. Log(LogLevel, ReadOnlySpan<char>, string, string, int) Logs a message. public void Log(LogLevel logLevel, ReadOnlySpan<char> message, string memberName = null, string filePath = null, int lineNumber = 0) Parameters logLevel LogLevel The level of significance assigned to the message. message ReadOnlySpan<char> The log message. memberName string The name of the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. filePath string The name of the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value. lineNumber int The line number within the file that contains the member that called the method. Do not provide an argument. The compiler will automatically assign the correct value."
  },
  "api/Switchboard.UnityLogHandler.html": {
    "href": "api/Switchboard.UnityLogHandler.html",
    "title": "Class UnityLogHandler | Switchboard",
    "keywords": "Class UnityLogHandler Namespace Switchboard Assembly Switchboard.UnityLogger.dll Provides a reference to the default Unity log handler. public static class UnityLogHandler Inheritance object UnityLogHandler Properties Default Gets the default Unity log handler. public static ILogHandler Default { get; }"
  },
  "api/Switchboard.UnityLogHijacker.html": {
    "href": "api/Switchboard.UnityLogHijacker.html",
    "title": "Class UnityLogHijacker | Switchboard",
    "keywords": "Class UnityLogHijacker Namespace Switchboard Assembly Switchboard.UnityLogger.dll Redirects calls to Unity log methods to an ILogger implementation instead, when assigned to UnityEngine.Debug.unityLogger.logHandler. public sealed class UnityLogHijacker : ILogHandler Inheritance object UnityLogHijacker Implements ILogHandler Constructors UnityLogHijacker(ILogger) Initializes a new instance of the class. public UnityLogHijacker(ILogger logger) Parameters logger ILogger The logger to be used instead of the Unity logger. Exceptions ArgumentNullException Thrown if logger is null. Methods LogException(Exception, Object) Logs an exception message. public void LogException(Exception exception, Object context) Parameters exception Exception Runtime Exception. context Object The UnityEngine.Object to which the exception applies. LogFormat(LogType, Object, string, params object[]) Logs a formatted message. public void LogFormat(LogType logType, Object context, string format, params object[] args) Parameters logType LogType The type of log message. context Object The UnityEngine.Object to which the message applies. format string A composite format string. args object[] Format arguments."
  },
  "index.html": {
    "href": "index.html",
    "title": "Switchboard | Switchboard",
    "keywords": "Switchboard Switchboard is a high performance logging framework, with dependency injection, built for the Unity game engine. Switchboard will automatically create rotating log files on any hardware platform, with almost no measurable impact on performance. No garbage memory is allocated in the process, and you can log thousands of log entries per frame without affecting gameplay. Log files for Android, iOS, and other platforms are no problem. Manipulating strings of text without garbage memory allocation is made possible by StringMaker, a direct replacement for StringBuilder. In Unity, StringBuilder allocates garbage memory when appending number variables. StringMaker can append numbers without allocation, in every imaginable format, even those not supported by .NET. Standard .NET code is simply not capable of displaying certain number values. A float can never display more than nine significant digits, for example. Even the debugger is inaccurate. StringMaker renders perfectly accurate floating-point numbers that show the true decimal representation of what is actually stored in binary. StringMaker is compatible with TextMesh Pro, so you can even update the text in your game without allocating any garbage memory. Dependency injection for Unity is built in. Switchboard provides a composition root where you can define the code that runs when you play the game, no matter which scene is loaded. From there, you can inject dependencies, like the logger, into MonoBehaviours with a loosely coupled interface. No need to directly reference a specific class dependency. This helps keep your code modular, and allows for unit testing with mock dependencies. You'll never need another singleton, or to load a certain scene to initialize your game. Play testing in any scene is easy. Switchboard is designed for disabling domain reload and scene reload, so you can enter play mode instantly. Your composition root properties can be changed easily in the editor, perfect for testing and experimentation, and you will not lose any changes when you stop playing, as with scene data. An innovative design pattern allows Switchboard to completely avoid the costly reflection and code generation that other frameworks use. Modular dependencies are key, so Switchboard is designed for you to only use the features you need. For example, if you want log files, but not dependency injection, removing or replacing the unwanted modules is easy. Each feature is built with modularity in mind, so you only import what you actually need. Switchboard is available on the Unity Asset Store."
  },
  "manual/dependency-injection.html": {
    "href": "manual/dependency-injection.html",
    "title": "Dependency Injection | Switchboard",
    "keywords": "Dependency Injection When you instantiate a new object by calling the class contructor and provide a constructor argument, you have performed dependency injection. In fact, that is the ideal, and most common form of dependency injection. Constructor injection should be preferred whenever possible. Objects that instantiate other objects should provide dependencies to their child objects. Dependencies should be passed down through the application hierarchy, starting from the composition root. In a standard C# application, the composition root is the main method that runs when the executable runs, but Unity provides us no access to a composition root by default. With dependency injection, the dependent object does not seek out its own dependency, like when using a static reference. When an object contains a direct reference to a type that it depends on, those types are tightly coupled. You cannot separate the implementation of the dependent object from the object upon which it depends. This can lead to an unnecessary amount of strong dependencies throughout your code base over time, eventually leading to spaghetti code, where all of your classes are tangled together. They can't be separated from one another without causing compilation errors. When many classes have these types of strong dependencies it can feel like every file in the project has a chain of dependencies that ultimately references every other file in the project. This makes it very difficult to separate your modules along clean conceptual boundaries. So, what is the alternative? When you have a well defined separation of concerns between the responsibilities of various classes and modules, those modules can be loosely coupled together via abstract interfaces. An interface provides a minimal contract for object interaction, only the required methods, properties, and events, without requiring the full implementation. This allows your types to depend on simple interfaces, rather than needing the particular implementation of a certain class. When an object depends on an interface, it becomes trivial to swap the actual implementation behind that interface. And, the dependent object is more portable, as it only requires the interface. This allows code modules to be transferred more easily between projects. Programming objects to depend on interfaces encourages S.O.L.I.D. programming principles and clean code architecture. More accurately, S.O.L.I.D. code actually requires interface injection. When a type depends on an interface, the concrete implementation of that interface must be injected in from the outside. You can't just make reference to a static interface. So, dependency injection is a fundamental and necessary component of a truly modular code base. Singletons, Service Locators, and Static References Unity programmers are quite familiar with using singletons, service locators, and static references. However, when one type depends on a static reference to another type, it becomes tightly coupled to it. It cannot compile without the other. So, why use static references if they always result in tight coupling? In fact, there are many who say that you should never use them. However, there are circumstances where tight coupling is acceptable, there are even circumstances where a static reference is indeed the best option. This is the case in an environment such as Unity. In Unity, your scripts commonly derive from the MonoBehaviour class, and are instantiated automatically by the Unity runtime. By the time your MonoBehaviour methods execute, the constructor has already been called. So, constructor injection is not an option. We could use method injection, or inject values directly into properties, but without knowing the new object has been instantiated, how is injection triggered? Most frameworks only concern themselves with injecting objects that are already saved into scene files. They usually require additional components to be added to your scenes, and may require you to load certain scenes and components first. If they even support injecting dynamically instantiated game objects, like dropping a prefab into a scene while play testing, they usually do so with a service locator. Often these service locators are bloated with dependencies that run deep into that specific framework. The Unity Way Unity does not allow you to directly instantiate new instances of MonoBehaviour derived scripts using a constructor. Constructors are called by the Unity runtime. There is no event invoked when a new MonoBehaviour is created. There is no way to register a factory to inject new MonoBehaviours. Therefore, your scripts have no choice but to directly reference some static dependency. Objects can be added directly to a scene from the editor while playing, and there is no way for you to inject them. The typical wisdom from outside Unity concerning dependency injection and static references is not always applicable due to these environmental differences. The Service Locator pattern is relevant here. A service locator is a singleton or static class that provides dependencies to other objects upon request. It is a service that provides other services. This pattern comes with all of the concerns associated with any other static reference, like tightly coupling your code to that particular implementation. In most other programming environments, where constructor injection is not restricted, this is an anti-pattern to be avoided. But, when constructor injection is not available, a service locator seems unavoidable. However, when the implementation is sufficiently abstract even a service locator can work like an interface. This is the inspiration for the Injector Locator pattern. The Injector Locator Pattern When object instantiation is beyond your control, and constructor injection is impossible, it becomes necessary to use a static reference to satisfy certain dependencies. That is why Unity dependency injection frameworks, if they even support injecting editor insantiated objects, use a service locator of some kind to do it. However, if the service locator is made abstract, then it can function much like an interface. For that purpose, the InjectorLocator was created. It serves as a static reference with a single responsibility, to provide an IInjector interface. The IInjector has a generic method that then provides instances of any type. One concern with static references is that they are globally accessible. Global values can be altered from anywhere, potentially corrupting the state of the application. The IInjector assigned to the InjectorLocator could be removed while the application is running. However, C# delegates provide a way of setting a global value, and keeping access private for the setter. Delegates can refer to private or protected methods, enabling classes to hide public access to a method delegate. If a global value is actually a delegate that returns the desired value, a private method delegate can be assigned to it. Global access to remove the assigned delegate can then be restricted, unless the matching delegate is provided. Therefore, even though the static value is global, if the assigned delegate is private, it cannot be removed by an external agent. The Switchboard implementation of this pattern is free and open source under the MIT license. It is publicly available on the Switchboard GitHub repository located at https://github.com/swipetrack/switchboard/tree/main/interface/InjectorLocator. The entire Switchboard framework is designed for loose coupling. Therefore, the only real dependency you need is on this simple, open source pattern. Technically, the entire rest of the Switchboard framework can be removed from your project at any time without error. The IInjector Interface The IInjector interface is the fundamental interface for dependency injection. It consists of a single, generic method. The generic type argument specifies the type of object requested from the IInjector. The IInjector can return an instance of that type, but it may return null if it cannot fulfill the request. Once you have an IInjector instance, you can request any type of object from it, and it is all done via loose coupling. Composition Root & Dependency Injector The CompositionRoot is the entry point for initializing the application at run time. This happens when you press play in the editor, or launch the application. On the CompositionRootAsset in the Switchboard settings menu there is a Dependency Injector field. There, you can assign a DependencyInjector asset. The DependencyInjector class implements the IInjector interface, and the CompositionRoot passes it through as the result of the InjectorLocator.GetInjector() method. This allows MonoBehaviours to indirectly reference the DependencyInjector as an IInjector. They only need to directly reference the InjectorLocator. First, the CompositionRoot loads the CompositionRootAsset. Then, it invokes Activation() on the assigned DependencyInjector. The DependencyInjector assigned to the CompositionRoot is saved when play begins, so changing the value at run time has no practical effect. In the MonoBehaviour.Awake() method, MonoBehaviours can call InjectorLocator.GetInjector() to get the DependencyInjector as an IInjector. Then, the IInjector.Get() method can return any Type of dependency from the DependencyInjector. Deactivation() is invoked when the Destructor hidden in Unity's persistent DontDestroyOnLoad scene is destroyed. A DependencyInjector is a ScriptableObject, so it exists as an asset in your project, not in the scene hierarchy. The DependencyInjector is where you can bind assets and other objects to the root of your application. Tight coupling occurs in the DependencyInjector, to the root objects bound within it, so that everything else beyond the root can remain modular, using injected references to each other. Serialized Unity objects with the Expandable attribute can be expanded in the editor, so you don't have to select a nested object to modify its properties. Everything nested within the CompositionRoot can be modified in one place. You can instantiate pure C# classes and pass the properties assigned to the DependencyInjector as arguments to class constructors. Thus, you can compose the business logic of your application at the composition root, using plain old C# classes and constructor injection. You can derive various implementations of DependencyInjector, and save multiple instances in the editor. The injector can be swapped out easily to completely change the root behavior of your application. You can create a mock dependency injector and swap to it for unit testing. Any properties that you change in the DependencyInjector asset are live at run time, and persist after you stop playing. This makes testing, tweaking, and experimenting simple and intuitive. Other Frameworks Most other frameworks rely on reflection. Reflection in C# allows you to access information, methods, and properties of a type or instance, even if they are not public. Reflection operations are relatively costly in terms of performance. Reflection should be avoided at run time, especially in the context of a video game, where performance is a top priority. Most dependency injection frameworks have you assign framework specific attributes to your class members. At some point, hopefully not at run time, the dependent objects undergo reflection. All of their members are examined for those attributes, and dependencies are injected accordingly. If not at run time, code or content gets generated by a reflection baking process that happens earlier, to improve performance. The problem with reflection is that it is notoriously slow. The performance penalty is either added to your game at run time, or it is added to your development process in dev time. Whenever changes are made, the reflection baking process has to happen again. Relying on reflection can also result in problems caused by code stripping. Code stripping automatically removes unused code from your build, and Unity does not understand reflection based relationships in your code. Switchboard has none of those issues. No reflection occurs at design time, compile time, or run time. It is avoided entirely, and the performance is nearly instantaneous. Switchboard is fully compatible with disabling domain reload and scene reload. You can press play and begin working nearly instantly. You can drop a prefab game object into a scene, and it will automatically get its dependencies without any effect on performance. Properties at the composition root can be updated in real time, and the changes persist when you stop play, unlike changes in the scene hierarchy, which are reverted. All dependencies can be altered with a single reference, and you're ready to play immediately. Some solutions also struggle with execution order. Getting your composition root to load first, and persist until all MonoBehaviours have been destroyed, is a genuine problem. Many plugins have elaborate requirements for you to deal with. You may be required to add framework specific objects to your scenes or project. You may have to load a certain scene before you can load others. Switchboard has all of the execution order issues resolved for you. The CompositionRoot activates the DependencyInjector when you press play, or when starting the application. When it activates, the first scene is already loaded, but no MonoBehaviour Awake(), OnEnable(), or Start() methods have been called. You can instantiate objects, including game objects, before any other scripts execute. If a class doesn't need to exist in a scene, it can just exist at the composition root. You will be able to write more of your code as pure C# classes that activate when you play. The DependencyInjector automatically deactivates after all other MonoBehaviours have been destroyed. Eliminating an explicit reference to another class does not necessarily mean that you have eliminated tight coupling. If your code base is littered with framework specific attributes, that is a type of dependency. Some frameworks require your MonoBehaviours to derive from a specific base class, or implement a particular interface, or add framework specific components. To inject objects that are instantiated via the editor, other frameworks also use a static service locator, just like Switchboard. This service locator may be buried in some other component that your code does not directly reference, but their service locator is still a requirement. You must attach those framework specific components to your game objects. Switchboard is the only framework that embraces the facts, and abstracts the necessary service locator into a tiny, open-source design pattern. With other frameworks, even if some of your dependencies are loosely coupled, the rest of your project still ends up tightly coupled to that framework. It really negates the overall purpose of dependency injection. When using Switchboard, you only depend on the open-source Injector Locator pattern, and you only reference it on one line per class."
  },
  "manual/expandable.html": {
    "href": "manual/expandable.html",
    "title": "Expandable Objects | Switchboard",
    "keywords": "Expandable Objects Switchboard uses an Expandable attribute on the DependencyInjector in the CompositionRootAsset. This allows you to assign the DependencyInjector and modify its properties in place, without having to select the object. You can apply the Expandable attribute to any object reference in the editor to see its properties. The attribute accepts a boolean argument to specify if the property is runtime read-only. If true, the object reference will become unchangeable when you press play. This helps to clarify objects that are not intended to change at runtime. Expandable object fields can be nested, and there is no depth limit on nested objects. However, if an object has already been expanded once it will not be expanded again in the same hierarchy to avoid infinite recursion from circular references."
  },
  "manual/feedback.html": {
    "href": "manual/feedback.html",
    "title": "| Switchboard",
    "keywords": "Unity Discussions Here is the official Unity Discussions thread for Switchboard. https://forum.unity.com/threads/switchboard-dependency-injection-log-files-zero-gc-strings.1509374/ GitHub Discussions Here is a dedicated GitHub forum for discussions. https://github.com/swipetrack/switchboard/discussions Report an Issue If you find a bug, want to request a feature, or have any other issue please report it here. https://github.com/swipetrack/switchboard/issues Direct Message If you would like to send a direct message concerning Switchboard, please send an email to switchboard@swipetrack.com. Review Please consider leaving a positive review on the Unity Asset Store. It is greatly appreciated!"
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "User Manual | Switchboard",
    "keywords": "User Manual Welcome to the Switchboard user manual. Please use the table of contents to navigate to other pages. Switchboard Switchboard is a high performance logging framework, with dependency injection, built for the Unity game engine. Switchboard will automatically create rotating log files on any hardware platform, with almost no measurable impact on performance. No garbage memory is allocated in the process, and you can log thousands of log entries per frame without affecting gameplay. Log files for Android, iOS, and other platforms are no problem. Manipulating strings of text without garbage memory allocation is made possible by StringMaker, a direct replacement for StringBuilder. In Unity, StringBuilder allocates garbage memory when appending number variables. StringMaker can append numbers without allocation, in every imaginable format, even those not supported by .NET. Standard .NET code is simply not capable of displaying certain number values. A float can never display more than nine significant digits, for example. Even the debugger is inaccurate. StringMaker renders perfectly accurate floating-point numbers that show the true decimal representation of what is actually stored in binary. StringMaker is compatible with TextMesh Pro, so you can even update the text in your game without allocating any garbage memory. Dependency injection for Unity is built in. Switchboard provides a composition root where you can define the code that runs when you play the game, no matter which scene is loaded. From there, you can inject dependencies, like the logger, into MonoBehaviours with a loosely coupled interface. No need to directly reference a specific class dependency. This helps keep your code modular, and allows for unit testing with mock dependencies. You'll never need another singleton, or to load a certain scene to initialize your game. Play testing in any scene is easy. Switchboard is designed for disabling domain reload and scene reload, so you can enter play mode instantly. Your composition root properties can be changed easily in the editor, perfect for testing and experimentation, and you will not lose any changes when you stop playing, as with scene data. An innovative design pattern allows Switchboard to completely avoid the costly reflection and code generation that other frameworks use. Modular dependencies are key, so Switchboard is designed for you to only use the features you need. For example, if you want log files, but not dependency injection, removing or replacing the unwanted modules is easy. Each feature is built with modularity in mind, so you only import what you actually need. Switchboard is available on the Unity Asset Store."
  },
  "manual/logger.html": {
    "href": "manual/logger.html",
    "title": "Core Logger | Switchboard",
    "keywords": "Core Logger Switchboard includes a logging framework that writes persistent log files to disk, on any hardware platform, with minimal performance impact. With Switchboard you can record log files without allocating a single byte of memory for garbage collection. Most of the logger module is in the Core library, which has no dependencies on Unity. Switchboard's ILogger interface and LogFileWriter can be used in any C# application. Switchboard implements an ILogger interface that is meant to be essentially interchangeable with the standard .NET ILogger interface. The main implementation of the ILogger interface is the LoggerRoot, which maintains an array of other ILogger implementations, and calls the appropriate log method on each one. These are referred to as log targets, but they have no special definition because they are just other ILogger implementations. Typically, the main ILogger instance that gets injected is a LoggerRoot with a LogFileWriter, and potentially other log targets. Custom log targets can be added to the LoggerRoot, so that logs are sent to multiple targets. Setting the LogLevel on an ILogger implementation, like the LoggerRoot or LogFileWriter, restricts which log entries are recorded. If a log entry's LogLevel is lower than the target, then it is not recorded. Log formatting can be customized by implementing the ILogFormatter interface. The LogFileWriter will use the implementation that you pass to its constructor for each new log entry, before it's added to the queue. Custom formatting can be applied based on the log level, the file path, line number, and method that logged the entry, or any other data available to your custom formatter. If LogFileWriter.LogCallerInfo is true, the Format method with caller information will be called, instead of the basic Format method. Append the desired log output to the empty StringMakerHandle result, and it will be written to the log file. One caveat of the LogFileWriter is that it's designed for a loop based system, as is the case in game development. When a log entry is sent to the LogFileWriter, it is formatted and added to a queue of entries that will be flushed to disk later. This design decouples the log call from the more costly process of opening a FileStream and flushing the appropriate bytes to the disk. Therefore, LogFileWriter.FlushLogs() must be invoked periodically. In Switchboard's standard use case, this method is called at the end of each frame. In your application, you may call this method wherever it seems most appropriate. However, if logs are not flushed regularly, it becomes possible for many logs to build up in the queue, which could cause flushing to take longer. Opening the FileStream is a costly operation. By default, Switchboard opens the FileStream and keeps it open for the duration of the application. The LogFileWriter OpenNewFile() or Open() methods will open the FileStream, creating a new file if necessary, and keep it open until Close() is called. Flushing logs will also open the FileStream if it is not already open. Unity Logger Switchboard includes an ILogger implementation that writes to Unity's default logger. When you use the ILogger interface provided by the BasicInjector, log entries are sent to SwitchboardLogger.Root. SwitchboardLogger.Root is the static LoggerRoot in Unity. It has the UnityLogger target assigned by default, which sends log entries to Unity's default logger. So, ILogger log entries will still be sent to the default Console logs. The BasicInjector disables the UnityLogger in built applications, outside of the Unity editor, if a Switchboard log file is created. Unity also has an ILogger interface, but it is mostly unused by anyone for anything. So, when using Switchboard.ILogger and UnityEngine, you will have to define the following alias with your using statements: using ILogger = Switchboard.ILogger. That will make it clear that ILogger refers to the Switchboard.ILogger interface. The SwitchboardLogger can override the default UnityLogHandler with a UnityLogHijacker that routes Debug.Log calls to the SwitchboardLogger.Root instead. The LoggerRoot still sends the hijacked Debug.Log calls to the UnityLogger, but they can also be sent to any other log target as well, like the LogFileWriter and your own custom log targets. So, even Debug.Log calls get routed to Switchboard log files. The static SwitchboardLogger has helper methods for hijacking or restoring the default UnityLogHandler for Debug.Log calls, and for disabling or enabling the UnityLogger target on the Root logger. FileLogger Switchboard includes a FileLogger component for Unity. The BasicInjector instantiates a FileLogger component as part of its Activation method. Enabling this component will create a log file with the specified property values, if able. If a log file cannot be opened, the component will automatically disable. FileLogger is set to disable automatically on Awake. This is so you can create a GameObject from script, add a FileLogger component, and configure its properties before attempting to enable it. For a scene or prefab FileLogger you can disable that functionality in the editor. Examine the FileLogger class to see how it uses the lower level LogFileWriter class. FileLogger implements the ILogger interface, so referencing it as an ILogger gives you access all of the expected extension methods. It can be assigned to Switchboard's root logger as a log target, or referenced directly if you prefer. Example Logs Here is an example log file, which allocates no memory for garbage collection, and performs much faster than Unity's default logs methods."
  },
  "manual/other-features.html": {
    "href": "manual/other-features.html",
    "title": "Precise Clock | Switchboard",
    "keywords": "Precise Clock The PreciseClock is a static class that provides DateTime values with the precision of a Stopwatch. File Utilties The File Utilties module provides a PathUtility for operations like validating and combining file paths, and a FileRemover for removing old log files when the directory reaches its limit."
  },
  "manual/platform-flags.html": {
    "href": "manual/platform-flags.html",
    "title": "Platform Flags | Switchboard",
    "keywords": "Platform Flags The PlatformFlags enum provides a dropdown menu in the editor for selecting multiple hardware platforms. So, you can easily add a property for selecting various platforms, and compare it against the current platform using the ApplicationPlatform class, for creating platform dependent conditions."
  },
  "manual/setup.html": {
    "href": "manual/setup.html",
    "title": "Installation and Setup | Switchboard",
    "keywords": "Installation and Setup Switchboard is available for download through the Unity Asset Store: https://assetstore.unity.com/packages/tools/utilities/switchboard-250879. After importing Switchboard, log files are automatically enabled. Just press play, and then view the resulting log files in your Application.persistentDataPath directory. You can use the StringMaker class to reduce garbage memory allocation from strings. The default BasicInjector provides an ILogger interface that accepts a StringMaker, for zero-garbage logging. The TextMeshProExtensions add a SetCharArray method to TextMesh Pro that accepts a StringMaker, for zero-garbage UI text manipulation. With your own DependencyInjector derived class you can define what happens when the app starts, and what type of dependencies to inject. MonoBehaviours can reference these dependencies using the InjectorLocator. Script Execution Order To properly use dependency injection, ensure that the script execution order of the Destructor component is set to the highest possible value, so that the DependencyInjector.Deactivation method occurs after all other MonoBehaviours have been destroyed. This should already be set, but it is good to check for yourself. You can do this by expanding the Switchboard.DependencyInjection.dll and dragging the Destructor class to the Script Execution Order menu in the Project Settings window. For log files, ensure that the script execution order of the FileLogger is set as high as possible, except for the Destructor, so that the FileLogger will flush queued log entries to disk during the final LateUpdate at the end of each frame. Again, this should already be set, but it's good to make sure. Basic Injector Open the Switchboard menu in the Project Settings window. This will automatically create a CompositionRootAsset if necessary, located at Switchboard/Resources/CompositionRoot.asset. This asset is required by Switchboard's dependency injection assembly at run time. The name of the file cannot be changed, but it can be relocated to any Resources directory. A BasicInjector instance should already be assigned by default. The BasicInjector provides a standard method for activating Switchboard's log files and injecting the ILogger dependency into MonoBehaviour components. You may assign a DependencyInjector asset to the composition root, or disable the \"Log Null Injector Error\" option to ignore dependency injection. Log Level Log entries below this level will not be recorded. Immediate Flush Log entries at or greater than this level will attempt to flush the log file immediately after queuing the log entry. Log Caller Info Display info about the method that called for the log entry, the file name, line number, and method name. Log File Name The name assigned to each log file before appending a time stamp. Log File Extension The file extension assigned to log files. Log File Size Limit The maximum size of each log file, in bytes. Log Folder Limit The maximum total number of bytes allowed for all log files in the log file directory. Log Platforms The hardware platforms where log files will be enabled. Clock Sync Time How often to synchronize with the system clock, in seconds. This affects time stamps in the standard log formatter. Max Char Arrays The maximum number of character arrays that can be stored in the character array pool shared by all StringMaker instances. Get Dependencies Call the InjectorLocator.GetInjector method to reference the assigned DependencyInjector via the IInjector interface. If the IInjector instance is not null, use the IInjector.Get method to request a dependency of a certain type. If a dependency is required for the script to function properly, attempt to get the dependency in the OnEnable method, and if it is unavailable then disable the component. The IInjector.TryGet method returns a boolean to indicate whether the dependency was provided. public class ExampleMonoBehaviour : MonoBehaviour { private ILogger Logger; private IService RequiredDependency; private void OnEnable() { IInjector injector = InjectorLocator.GetInjector(); // Optional Dependencies (Check for null before using them.) Logger = injector?.Get<ILogger>(); // Required Dependencies if(injector == null) { enabled = false; Debug.LogError(\"IInjector unavailable.\"); } else if(!injector.TryGet(out Logger)) { enabled = false; Debug.LogError(\"Logger unavailable.\"); } else if(!injector.TryGet(out RequiredDependency)) { enabled = false; Logger.LogError(\"A required dependency was not provided.\"); } else { // Dependencies validated. Proceed with OnEnable. } } } Logger and StringMaker Open the LoggerAndStringMaker scene, then press play. The Console window will display some example numbers that can not be displayed with typical C# code, like the ToString method. Highlight each log entry to compare the output of the ToString method with StringMaker. Open the FloatExample script to see how a StringMaker is used to log messages with the ILogger interface to avoid allocating garbage memory typically associated with strings. You can view the resulting log files in the Application.persistentDataPath on your computer. TextMesh Pro A TextMeshProExtensions class is included so that you can assign text to TextMesh Pro components without garbage memory allocations. The SetCharArray extension methods enable easy assignment of a StringMaker to a TextMesh Pro text component. The script is included with references to TextMesh Pro commented out, so Switchboard does not have an explicit dependency on TextMesh Pro. If you have the TextMesh Pro package installed, uncomment the included scripts, both TextMeshProExtensions, and the TextMeshProExample script. In the TextMeshPro example scene, create a TextMesh Pro text component, and assign it to the TextMeshProExample script. Press play to ensure the text is being updated every frame. Then, create a debug build of this scene to profile using the Profiler window. You should see that zero memory is allocated in the GC section of the profiler. Dependency Injection Open the DependencyInjection example scene. Assign the ExampleInjector asset to the Dependency Injector field in the Switchboard settings menu. There should already be a Model asset assigned in the ExampleInjector. Press play, and see how the color and position of the example object are automatically injected into the ExampleMonoBehaviour. Change the color and properties of the assigned model to see how the changes update the object in the scene in real time. Assign the other model asset to the ExampleInjector. See how the color and motion of the object change to match the new model. Notice that this model is a different class with different properties. Change the properties to continue affecting the scene. Stop playing, and notice that the changes you made to the model data are not lost the way that changes to the scene are lost. This enables you to modify properties while playing without losing any of your changes. The ExampleMonoBehaviour has a simple dependency, an interface that provides color and position. Any object capable of providing these properties can fulfill that dependency. It has no reference to a concrete type. Therefore you can inject any type into it from the outside. Inspect the ExampleMonoBehaviour and notice how simple the class is, with no logic related specifically to movement. This type of separation is especially useful for separating UI components from the data they are supposed to represent. Switchboard enables you to create a game independent from scenes. The heart of your application should live at the root of your project, and start automatically regardless of the scene. Dependencies are injected from the composition root outward, into any scene. Establishing cross-scene references without creating explicit type dependencies or spaghetti code is easy. The assigned DependencyInjector and its properties are easy to change in the editor. So, it's simple to swap out the actual code that other objects depend on. This allows you to treat scenes more like the view layer of your application. The modeled business logic of your game can live at the root of your project, as pure C# classes if you like. You can easily change modules and plugins without causing issues, or swap to mock objects for unit testing. Custom Dependency Injector Use the ExampleInjector class as a template for creating your own DependencyInjector. Create a new C# script, then copy the contents of the ExampleInjector and modify it to create a new DependencyInjector class. The class should either derive from BasicInjector or DependencyInjector. The BasicInjector class includes built-in log file functionality. Derive directly from the DependencyInjector class if you want to fully customize your DependencyInjector from scratch. The CreateAssetMenu attribute is required to create an instance of the injector object within the project. If you want the create option to be in the Switchboard section of the Create Menu, use the attribute arguments (menuName = \"Switchboard/Your Injector Name Here\", order = SwitchboardMenuOrder.Value). You can define one DependencyInjector class and create multiple instances of separate injector assets with different property configurations, or create different injector classes for different scenarios. Override the Activation, Deactivation, and Get methods. If deriving from from BasicInjector, these methods should include a call to the base method. The DependencyInjector base class has no base class functionality to call. Activation should call base.Activation at the start of the method, but Deactivation and Get should call their base methods at the end. If the Get method of your DependencyInjector derived class does not return an instance of Type T, it should return base.Get. The Activation method will run when the application starts playing, before Awake, OnEnable, or Start methods are called on MonoBehaviours. You can instantiate game objects, components, or prefabs, and they will be added to the first scene before MonoBehaviours activate. However, the composition root enables you to use more pure C# classes that are injected out to scenes only if necessary. Objects that instantiate from the composition root may not need to be MonoBehaviours at all if they don't interact directly with scene components. The Deactivation method will run when the application is ending, but don't assume it is guaranteed. Deactivation may not run in all cases. If the application closes suddenly, it is possible that this method may not be invoked. However, this method is where everything that was initialized during Activation can also be shut down gracefully when play is stopped in the editor. The Get method provides an instance of the requested Type of object, if the DependencyInjector has been activated. This method will not be invoked until Activation has occurred, prior to Deactivation. You can use the typeof(T) operator to compare the request to a certain typeof(IInterface) and return an appropriate object as T. [CreateAssetMenu(fileName = nameof(ExampleInjector), menuName = \"Switchboard/Example Injector\", order = SwitchboardMenuOrder.Value)] public class ExampleInjector : BasicInjector { // Add properties. protected override void Activation() { base.Activation(); // Activate your application. } protected override void Deactivation() { // Deactivate your application. base.Deactivation(); } // Provide dependencies via IInjector.Get<T>(). public override T Get<T>() { Type type = typeof(T); if(type == typeof(IService)) return Service as T; return base.Get<T>(); } }"
  },
  "manual/stringmaker.html": {
    "href": "manual/stringmaker.html",
    "title": "StringMaker | Switchboard",
    "keywords": "StringMaker Modifying a string in C# allocates a new string object every time. Eventually, the garbage collector sweeps up old strings and releases their memory for reuse, but garbage collection is a costly operation. The garbage collector could cause your frame rate to stutter. If possible, it's better not to allocate garbage memory in the first place. Using a StringBuilder can help, but in Unity StringBuilder allocates a new string every time it appends a number variable. Appending number variables to strings is crucial when building dynamic text output. Using a StringBuilder does not eliminate garbage memory, at least not in Unity. (Newer versions of StringBuilder, available outside of Unity, no longer allocate garbage memory when appending number variables.) StringMaker is a direct replacement for StringBuilder that never allocates garbage memory. Neither StringBuilder, nor StringMaker are referenced via interface. They are both tightly coupled dependencies, no matter which one you use. However, I designed StringMaker with method signatures that match StringBuilder methods. So, you can easily find and replace StringBuilder with StringMaker. Most methods should work just as expected. However, there are some StringBuilder methods I did not replicate in StringMaker because I view them as costly or unnecessary. Also, StringMaker includes some additional methods that StringBuilder does not. StringMaker can convert its contents directly into a UTF-8 byte array for easy, garbage-free transmission into a human readable text file. StringMaker is built for Unity. It supports appending Unity specific types, like Vector3, and it integrates with TextMesh Pro. Uncomment the TextMeshProExtensions class to add StringMaker extension methods to TextMesh Pro components. Then you can call the SetText method on a TextMesh Pro component and pass a StringMaker argument to assign text without allocating garbage memory."
  },
  "release-notes/v1.0.0.html": {
    "href": "release-notes/v1.0.0.html",
    "title": "Version 1.0.0 | Switchboard",
    "keywords": "Version 1.0.0 Initial release."
  },
  "release-notes/v1.1.0.html": {
    "href": "release-notes/v1.1.0.html",
    "title": "Version 1.1.0 | Switchboard",
    "keywords": "Version 1.1.0 Simplified the InjectorLocator pattern. Removed the IInjectable interface. Changed the IInjector method signature from bool Inject (out T) to T Get (). Changed the InjectorLocator to simply provide an IInjector reference via GetInjector() method, and to no longer allow assigning multiple delegates to an event. Rather, only a single delegate can be assigned or removed. This is to discourage attempts at nesting dependency containers via the functionality of InjectorLocator. If a dependency nesting solution is desired, it should be provided at a higher layer of the protocol with a custom DependencyInjector implementation at the CompositionRoot. InjectorLocator throws exceptions directly, not via helper method to help with inlining, because the exceptions are thrown from the AssignLocatorDelegate and RemoveLocatorDelegate methods, so they occur infrequently. DependencyInjector no longer logs a warning if it fails to provide an instance of a type. That is better left to be handled by the derived DependencyInjector, or the dependent client code. DependencyInjector now just makes IInjector.Get () an abstract method to be overloaded directly in derived classes. This helps make the IInjector implementation less mysterious. DependencyInjector removed InvalidOperationException from Get () method. The expected use case is that the CompositionRoot will always have activated the one DependencyInjector instance using it. Removing the exception can only be beneficial for performance. If inactive, it will not invoke the Get method, but it will not throw an exception either. DependencyInjector now uses a State enum to control Activation() and Deactivation(). CompositionRoot avoids the overloaded Unity null equality comparison on the DependencyInjector when deactivating. This allows Deactivation() to still be called, even if the dependency injector asset is deleted from the project while playing. SwitchboardLogger.RootInstance changed to SwitchboardLogger.Root. Changed the name of the ActionIn delegate to ActionWithInput . Changed PlatformStats to PlatformStatsLog, since it's an odd class and I don't want to cause name collisions with other assemblies. Made it more obvious that the CompositionRootAsset in the Switchboard settings menu is readonly. Moved the Expandable attribute assembly from the Interface directory to the Unity directory. Moved StringMakerILoggerExtensions to its own assembly. Moved PlatformStats to the LogFileManager assembly."
  },
  "release-notes/v1.2.0.html": {
    "href": "release-notes/v1.2.0.html",
    "title": "Version 1.2.0 | Switchboard",
    "keywords": "Version 1.2.0 It is now easier to use log files directly without dependencies on any other assemblies. For instance, if you don't want to use dependency injection, or the ticker module, they can be deleted without losing any of the log file functionality provided by the new FileLogger component. Bug Fixes CompositionRoot now always sets its DependencyInjector to null and removes itself from the InjectorLocator when it begins activation, to prevent corrupted state between play sessions in the editor. It will only assign itself to the InjectorLocator if the DependencyInjector state is truly active, with no exceptions. Now, it always saves a reference to the assigned dependency injector BEFORE it attempts to activate it. So, if activating the DependencyInjector throws an exception, it will still deactivate it when play stops. A log file is now opened immediately when the BasicInjector activates. LogFileWriter no longer throws an AggregateException every time it fails to open a new file, only if an exception also occurred when closing the old file. StandardLogFormatter and UnityLogger are now more resilient to caller info that has been manually set to null or empty. Changes Converted LogFileManager into a MonoBehaviour named FileLogger, and added it to the readable Scripts directory. Removed the LogFileManager and ClockSynchronizer assemblies. Changed StringMaker.Clear method to just set Length = 0, just as StringBuilder does. Before, it was releasing its internal memory back to the shared CharacterArrayPool. But, you can achieve that same behavior by manually calling StringMaker.Clear().TrimExcess(). Having StringMaker.Clear() helps enable fluent interface operations, and its more performant and consistent with StringBuilder for it to just set Length = 0. Overloaded the + operator to append basic types to StringMaker. Renamed StringMaker.ThreadStaticInstance, ObjectPool.ThreadStaticInstance, and ThreadSafeObjectPool.StaticInstance properties to Shared. Renamed the ObjectPool and ThreadSafeObjectPool RequestItem methods to TryGet. Updated example code. Simplified example injection code. FloatExample demonstrates usage of StringMaker + operator. Improved formatting of platform stats at the beginning of log files created by the BasicInjector. StandardLogFormatter moved the caller info to come right after the time stamp. Added ILogger extension methods that allow for logging an exception without having to provide a message argument. UnityLogHandler.Initialize method is now private."
  },
  "release-notes/v2.0.0.html": {
    "href": "release-notes/v2.0.0.html",
    "title": "Version 2.0.0 | Switchboard",
    "keywords": "Version 2.0.0 This version aims to focus Switchboard into a zero-garbage log file plugin for Unity, with dependency injection, rather than a dependency injection plugin with log files. Some of the important changes include getting rid of the Collections, Ticker, and Events assemblies, removing the character limit from StringMaker, and changing the way floating-point numbers handle the FloatFormatInfo object. A StringMaker can now set and clear a FloatFormatInfo object that will control the way all numbers are formatted when appending, so that you can use the streamlined + operator syntax and still get the desired number formatting results. Also tried to make the examples and documentation more approachable. Bug Fixes Fixed UnityLogger not displaying LogLevel.Critical appropriately as an error. Fixed a bug where trying to display the longest possible double-precision floating-point numbers was causing an exception. Based on Rick Regan's article about the longest possible doubles, I thought the number of digits was 1074, but either he miscounted, or was not including the leading zero before the decimal place. After counting the number of characters myself from his article I was able to see that I need to allocate enough space for one more character. Fixed an issue that was allocating garbage when checking TextMesh Pro text property for equality with StringMaker before calling SetCharArray. In the editor, SetCharArray itself allocates. In a build, checking the text property allocates. So, I got rid of the equality check, and you can get to 0 GC in a final build. Fixed an issue with over indentation of the expandable object drawer with serializable classes in Unity 2022. Fixed an issue where file names for caller info were not being parsed correctly on Linux because the paths were compiled on Windows. Changes Loggers no longer throw an exception if logging a null or empty message. Added ILogger extensions for logging exceptions with a StringMaker message. It may as well be supported. Removed the lines from the expandable property drawer because expandable works with lists and arrays, but the lines didn't render properly. Returned to throwing exceptions from separate methods to prevent interference with inlining. Removed the character limit on StringMaker. Changed the name of StringMaker.TrimExcess to StringMaker.ReleaseMemory. Changed StringMaker methods AppendAsHex, AppendAsBinary, AppendAsScientific to AppendHexadecimal, AppendBinary, AppendScientific. Removed the StringMaker Capacity property because I can't think of a use for it where you wouldn't just use Length or Append(char, int), and ReleaseMemory(), and it simplifies the internal logic. Changed StringMakerILoggerExtensions to use a soft character limit of 32768 under which it uses stackalloc, and over it allocates new char arrays. Did something similar with TextMeshProExtensions, with the same character count, but using a static char[] because TMPro_Text.SetCharArray doesn't accept a Span argument, so stackalloc is not an option. Added a ForEachSpan (ReadOnlySpanAction<char, T>, T) method to StringMaker that will allow me to feed the individual memory pages of a StringMaker directly into LogFileWriter so that I can encode UTF-8 bytes one page at a time and not worry about big intermediary byte buffers. Simplified the internal logic of LogFileWriter.FlushLogs(). FlushLogs now only attempts to open the existing file path. It no longer attempts to create a new file during the attempt to flush. If FlushLogs is failing because it can't get the existing file open, then it should be handle with a try/catch block that handles repeated failures by manually trying to open a new file, or taking some other action. Added a LogFileWriter.FileIsOpen property to make it easy for users to check if they have successfully opened a FileStream. Added a way to set the max count of the StringMakerPool that LogFileWriter uses, and changed FlushLogs to release all StringMakers at the end of the flush, with one SpinLock, instead of one at a time. It will fail to release the StringMakers if there is an exception during a flush, but that's not the end of the world, the exception is worse. Should improve performance of the flush a bit. Now that StringMaker has no character limit, LogFileWriter has logic for re-logging an entry if it runs out of space in the current file. If a log entry is cut off, it will be re-logged at the start of the next file. But, it will only re-log an entry once, any time that entry is the start of a new file, even if it cannot fit into to file size limit. Removed all of the assemblies related to Collections, Ticker, and Events to clean up the whole plugin and make it much more focused it representing what it does. Added an extension method to IInjector that adds a bool TryGet (out T) method, but any IInjector implementers only need to implent the basic T Get () method to get both options. Cleaned up the BasicInjector that will come set automatically when you download the plugin to have all of the log file settings visible in the Switchboard Project Settings menu, and cleaned up the FileLogger component to be much more readable, simpler, and likely more robust with better exception handling. Moved the settings into separate serializable data class, so that those settings are naturally built into their own sections with a collapsable foldout. So, they won't interfere with any customer's additional injector properties. Moved PlatformFlags and ApplicationPlatform to the public scripts folder because that may be the most likely thing in the whole plugin to break over time as Unity changes their hardware platform support. If it's a public script it can be modified to change with the times. Changed FloatToTextConverter back to being able to specify 0 maximum fractional digits. I improved the example so that when customers change the model asset at the root of the project the behavior and color of the object changes immediately in real time. I also added a bunch of comments to the ExampleMonoBehvaiour as a sort of mini documentation. Changed the order of minFractionalDigits and maxFractionalDigits on FloatToTextConverter/StringMaker methods. Changed FloatToTextConverter/StringMaker methods that take a FloatFormatInfo to only take that argument, which also contains MinFractionalDigits and MaxFractionalDigits now. StringMaker now has a NumberFormat property where you can set a FloatFormatInfo object that gets used every time you append a number value. So, you can still use the overloaed + operator notation, and still get the desired custom formatting. For integer numbers, it uses the specified digit group separator character to separate digit groups, if the group digits option is set. Added an overload for StringMaker.Clear() that takes a FloatFormatInfo so that you can clear and set the NumberFormat at the same time. Added a Reset() method that clears and clear the NumberFormat. Changed instances of Clear to Reset as necessary, now that number format is something to account for on a StringMaker instance. Changed FloatFormatInfo to use a ScientificNotationCharacter value, instead of a boolean for uppercase / lowercase E. Changed it to use MinExponentDigits, so you can specify 0-3 minimum digits for the exponent in scientific notation. That makes the boolean for whether to show a 0 exponent, and the boolean for padding exponents redundant, and you can customize to match what .NET does by default. With E formatting they force a minimum of 3 digits, but with G formatting they use minimum 2 exponent digits. My tests are now able to match the default .NET output easily with a few property tweaks of a FloatFormatInfo object, depending on which style you're trying to match. Changed the amount of leading zeroes allowed on fractional numbers before converting to scientific notation. Added a setting for immediate flush log level to the FileLogger, so that it attempts to flush the log file immediately on errors and such. Added an option to the expandable property drawer so that you can set an object field as runtime readonly, and when you start playing in the editor it will lock that object so that it's obvious you shouldn't try to change it at runtime. Added a protected ILogger reference that just points to SwitchboardLogger.Root to the BasicInjector class so that derived injectors can easily reference Logger. Added static factory methods to FloatFormatInfo that create format objects that match .NET's standard ToString() behavior, and the behavior of the \"G9\", \"G17\", and \"E\" format specifiers, so that customers can easily match the standard .NET output if they like. Changed the definition of PlatformFlags because Unity 2022 throws a warning about obsolete hardware platforms. Also reorganized the order so they are in sections for easier reading. Renamed TextMeshProExtensions methods from SetText to SetCharArray for clarity, and so that it's not possible to accidentally try to call StringMaker.ToString."
  }
}